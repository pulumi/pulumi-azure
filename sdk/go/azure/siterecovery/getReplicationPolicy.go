// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Azure Site Recovery replication policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/siterecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := siterecovery.LookupReplicationPolicy(ctx, &siterecovery.LookupReplicationPolicyArgs{
//				Name:              "replication-policy",
//				RecoveryVaultName: "tfex-recovery_vault",
//				ResourceGroupName: "tfex-resource_group",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupReplicationPolicy(ctx *pulumi.Context, args *LookupReplicationPolicyArgs, opts ...pulumi.InvokeOption) (*LookupReplicationPolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupReplicationPolicyResult
	err := ctx.Invoke("azure:siterecovery/getReplicationPolicy:getReplicationPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getReplicationPolicy.
type LookupReplicationPolicyArgs struct {
	// Specifies the name of the Azure Site Recovery replication policy.
	Name string `pulumi:"name"`
	// The name of the Recovery Services Vault that the Azure Site Recovery replication policy is associated witth.
	RecoveryVaultName string `pulumi:"recoveryVaultName"`
	// The name of the resource group in which the associated Azure Site Recovery replication policy resides.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getReplicationPolicy.
type LookupReplicationPolicyResult struct {
	// Specifies the frequency (in minutes) at which to create application consistent recovery.
	ApplicationConsistentSnapshotFrequencyInMinutes int `pulumi:"applicationConsistentSnapshotFrequencyInMinutes"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The duration in minutes for which the recovery points need to be stored.
	RecoveryPointRetentionInMinutes int    `pulumi:"recoveryPointRetentionInMinutes"`
	RecoveryVaultName               string `pulumi:"recoveryVaultName"`
	ResourceGroupName               string `pulumi:"resourceGroupName"`
}

func LookupReplicationPolicyOutput(ctx *pulumi.Context, args LookupReplicationPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupReplicationPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupReplicationPolicyResult, error) {
			args := v.(LookupReplicationPolicyArgs)
			r, err := LookupReplicationPolicy(ctx, &args, opts...)
			var s LookupReplicationPolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupReplicationPolicyResultOutput)
}

// A collection of arguments for invoking getReplicationPolicy.
type LookupReplicationPolicyOutputArgs struct {
	// Specifies the name of the Azure Site Recovery replication policy.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Recovery Services Vault that the Azure Site Recovery replication policy is associated witth.
	RecoveryVaultName pulumi.StringInput `pulumi:"recoveryVaultName"`
	// The name of the resource group in which the associated Azure Site Recovery replication policy resides.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupReplicationPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReplicationPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getReplicationPolicy.
type LookupReplicationPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupReplicationPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupReplicationPolicyResult)(nil)).Elem()
}

func (o LookupReplicationPolicyResultOutput) ToLookupReplicationPolicyResultOutput() LookupReplicationPolicyResultOutput {
	return o
}

func (o LookupReplicationPolicyResultOutput) ToLookupReplicationPolicyResultOutputWithContext(ctx context.Context) LookupReplicationPolicyResultOutput {
	return o
}

// Specifies the frequency (in minutes) at which to create application consistent recovery.
func (o LookupReplicationPolicyResultOutput) ApplicationConsistentSnapshotFrequencyInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupReplicationPolicyResult) int { return v.ApplicationConsistentSnapshotFrequencyInMinutes }).(pulumi.IntOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupReplicationPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupReplicationPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// The duration in minutes for which the recovery points need to be stored.
func (o LookupReplicationPolicyResultOutput) RecoveryPointRetentionInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupReplicationPolicyResult) int { return v.RecoveryPointRetentionInMinutes }).(pulumi.IntOutput)
}

func (o LookupReplicationPolicyResultOutput) RecoveryVaultName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationPolicyResult) string { return v.RecoveryVaultName }).(pulumi.StringOutput)
}

func (o LookupReplicationPolicyResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupReplicationPolicyResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupReplicationPolicyResultOutput{})
}
