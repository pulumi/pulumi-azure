// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a VMWare Replication Policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/recoveryservices"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/siterecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("eastus"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVault, err := recoveryservices.NewVault(ctx, "exampleVault", &recoveryservices.VaultArgs{
//				Location:                        exampleResourceGroup.Location,
//				ResourceGroupName:               exampleResourceGroup.Name,
//				Sku:                             pulumi.String("Standard"),
//				ClassicVmwareReplicationEnabled: pulumi.Bool(true),
//				SoftDeleteEnabled:               pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = siterecovery.NewVMWareReplicationPolicy(ctx, "exampleVMWareReplicationPolicy", &siterecovery.VMWareReplicationPolicyArgs{
//				RecoveryVaultId:                                 exampleVault.ID(),
//				RecoveryPointRetentionInMinutes:                 pulumi.Int(1440),
//				ApplicationConsistentSnapshotFrequencyInMinutes: pulumi.Int(240),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VMWare Replication Policy can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/vault1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationPolicies/policy1
//
// ```
type VMWareReplicationPolicy struct {
	pulumi.CustomResourceState

	// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
	ApplicationConsistentSnapshotFrequencyInMinutes pulumi.IntOutput `pulumi:"applicationConsistentSnapshotFrequencyInMinutes"`
	// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
	RecoveryPointRetentionInMinutes pulumi.IntOutput `pulumi:"recoveryPointRetentionInMinutes"`
	// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
	RecoveryVaultId pulumi.StringOutput `pulumi:"recoveryVaultId"`
}

// NewVMWareReplicationPolicy registers a new resource with the given unique name, arguments, and options.
func NewVMWareReplicationPolicy(ctx *pulumi.Context,
	name string, args *VMWareReplicationPolicyArgs, opts ...pulumi.ResourceOption) (*VMWareReplicationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationConsistentSnapshotFrequencyInMinutes == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationConsistentSnapshotFrequencyInMinutes'")
	}
	if args.RecoveryPointRetentionInMinutes == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryPointRetentionInMinutes'")
	}
	if args.RecoveryVaultId == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VMWareReplicationPolicy
	err := ctx.RegisterResource("azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMWareReplicationPolicy gets an existing VMWareReplicationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMWareReplicationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMWareReplicationPolicyState, opts ...pulumi.ResourceOption) (*VMWareReplicationPolicy, error) {
	var resource VMWareReplicationPolicy
	err := ctx.ReadResource("azure:siterecovery/vMWareReplicationPolicy:VMWareReplicationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMWareReplicationPolicy resources.
type vmwareReplicationPolicyState struct {
	// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
	ApplicationConsistentSnapshotFrequencyInMinutes *int `pulumi:"applicationConsistentSnapshotFrequencyInMinutes"`
	// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
	Name *string `pulumi:"name"`
	// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
	RecoveryPointRetentionInMinutes *int `pulumi:"recoveryPointRetentionInMinutes"`
	// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
	RecoveryVaultId *string `pulumi:"recoveryVaultId"`
}

type VMWareReplicationPolicyState struct {
	// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
	ApplicationConsistentSnapshotFrequencyInMinutes pulumi.IntPtrInput
	// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
	Name pulumi.StringPtrInput
	// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
	RecoveryPointRetentionInMinutes pulumi.IntPtrInput
	// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
	RecoveryVaultId pulumi.StringPtrInput
}

func (VMWareReplicationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareReplicationPolicyState)(nil)).Elem()
}

type vmwareReplicationPolicyArgs struct {
	// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
	ApplicationConsistentSnapshotFrequencyInMinutes int `pulumi:"applicationConsistentSnapshotFrequencyInMinutes"`
	// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
	Name *string `pulumi:"name"`
	// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
	RecoveryPointRetentionInMinutes int `pulumi:"recoveryPointRetentionInMinutes"`
	// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
	RecoveryVaultId string `pulumi:"recoveryVaultId"`
}

// The set of arguments for constructing a VMWareReplicationPolicy resource.
type VMWareReplicationPolicyArgs struct {
	// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
	ApplicationConsistentSnapshotFrequencyInMinutes pulumi.IntInput
	// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
	Name pulumi.StringPtrInput
	// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
	RecoveryPointRetentionInMinutes pulumi.IntInput
	// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
	RecoveryVaultId pulumi.StringInput
}

func (VMWareReplicationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareReplicationPolicyArgs)(nil)).Elem()
}

type VMWareReplicationPolicyInput interface {
	pulumi.Input

	ToVMWareReplicationPolicyOutput() VMWareReplicationPolicyOutput
	ToVMWareReplicationPolicyOutputWithContext(ctx context.Context) VMWareReplicationPolicyOutput
}

func (*VMWareReplicationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**VMWareReplicationPolicy)(nil)).Elem()
}

func (i *VMWareReplicationPolicy) ToVMWareReplicationPolicyOutput() VMWareReplicationPolicyOutput {
	return i.ToVMWareReplicationPolicyOutputWithContext(context.Background())
}

func (i *VMWareReplicationPolicy) ToVMWareReplicationPolicyOutputWithContext(ctx context.Context) VMWareReplicationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMWareReplicationPolicyOutput)
}

// VMWareReplicationPolicyArrayInput is an input type that accepts VMWareReplicationPolicyArray and VMWareReplicationPolicyArrayOutput values.
// You can construct a concrete instance of `VMWareReplicationPolicyArrayInput` via:
//
//	VMWareReplicationPolicyArray{ VMWareReplicationPolicyArgs{...} }
type VMWareReplicationPolicyArrayInput interface {
	pulumi.Input

	ToVMWareReplicationPolicyArrayOutput() VMWareReplicationPolicyArrayOutput
	ToVMWareReplicationPolicyArrayOutputWithContext(context.Context) VMWareReplicationPolicyArrayOutput
}

type VMWareReplicationPolicyArray []VMWareReplicationPolicyInput

func (VMWareReplicationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMWareReplicationPolicy)(nil)).Elem()
}

func (i VMWareReplicationPolicyArray) ToVMWareReplicationPolicyArrayOutput() VMWareReplicationPolicyArrayOutput {
	return i.ToVMWareReplicationPolicyArrayOutputWithContext(context.Background())
}

func (i VMWareReplicationPolicyArray) ToVMWareReplicationPolicyArrayOutputWithContext(ctx context.Context) VMWareReplicationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMWareReplicationPolicyArrayOutput)
}

// VMWareReplicationPolicyMapInput is an input type that accepts VMWareReplicationPolicyMap and VMWareReplicationPolicyMapOutput values.
// You can construct a concrete instance of `VMWareReplicationPolicyMapInput` via:
//
//	VMWareReplicationPolicyMap{ "key": VMWareReplicationPolicyArgs{...} }
type VMWareReplicationPolicyMapInput interface {
	pulumi.Input

	ToVMWareReplicationPolicyMapOutput() VMWareReplicationPolicyMapOutput
	ToVMWareReplicationPolicyMapOutputWithContext(context.Context) VMWareReplicationPolicyMapOutput
}

type VMWareReplicationPolicyMap map[string]VMWareReplicationPolicyInput

func (VMWareReplicationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMWareReplicationPolicy)(nil)).Elem()
}

func (i VMWareReplicationPolicyMap) ToVMWareReplicationPolicyMapOutput() VMWareReplicationPolicyMapOutput {
	return i.ToVMWareReplicationPolicyMapOutputWithContext(context.Background())
}

func (i VMWareReplicationPolicyMap) ToVMWareReplicationPolicyMapOutputWithContext(ctx context.Context) VMWareReplicationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMWareReplicationPolicyMapOutput)
}

type VMWareReplicationPolicyOutput struct{ *pulumi.OutputState }

func (VMWareReplicationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMWareReplicationPolicy)(nil)).Elem()
}

func (o VMWareReplicationPolicyOutput) ToVMWareReplicationPolicyOutput() VMWareReplicationPolicyOutput {
	return o
}

func (o VMWareReplicationPolicyOutput) ToVMWareReplicationPolicyOutputWithContext(ctx context.Context) VMWareReplicationPolicyOutput {
	return o
}

// Specifies the frequency at which to create application consistent recovery points. Must between `0` to `720`.
func (o VMWareReplicationPolicyOutput) ApplicationConsistentSnapshotFrequencyInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v *VMWareReplicationPolicy) pulumi.IntOutput {
		return v.ApplicationConsistentSnapshotFrequencyInMinutes
	}).(pulumi.IntOutput)
}

// The name which should be used for this Classic Replication Policy. Changing this forces a new Replication Policy to be created.
func (o VMWareReplicationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VMWareReplicationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the period up to which the recovery points will be retained. Must between `0` to `21600`.
func (o VMWareReplicationPolicyOutput) RecoveryPointRetentionInMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v *VMWareReplicationPolicy) pulumi.IntOutput { return v.RecoveryPointRetentionInMinutes }).(pulumi.IntOutput)
}

// ID of the Recovery Services Vault. Changing this forces a new Replication Policy to be created.
func (o VMWareReplicationPolicyOutput) RecoveryVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *VMWareReplicationPolicy) pulumi.StringOutput { return v.RecoveryVaultId }).(pulumi.StringOutput)
}

type VMWareReplicationPolicyArrayOutput struct{ *pulumi.OutputState }

func (VMWareReplicationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMWareReplicationPolicy)(nil)).Elem()
}

func (o VMWareReplicationPolicyArrayOutput) ToVMWareReplicationPolicyArrayOutput() VMWareReplicationPolicyArrayOutput {
	return o
}

func (o VMWareReplicationPolicyArrayOutput) ToVMWareReplicationPolicyArrayOutputWithContext(ctx context.Context) VMWareReplicationPolicyArrayOutput {
	return o
}

func (o VMWareReplicationPolicyArrayOutput) Index(i pulumi.IntInput) VMWareReplicationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMWareReplicationPolicy {
		return vs[0].([]*VMWareReplicationPolicy)[vs[1].(int)]
	}).(VMWareReplicationPolicyOutput)
}

type VMWareReplicationPolicyMapOutput struct{ *pulumi.OutputState }

func (VMWareReplicationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMWareReplicationPolicy)(nil)).Elem()
}

func (o VMWareReplicationPolicyMapOutput) ToVMWareReplicationPolicyMapOutput() VMWareReplicationPolicyMapOutput {
	return o
}

func (o VMWareReplicationPolicyMapOutput) ToVMWareReplicationPolicyMapOutputWithContext(ctx context.Context) VMWareReplicationPolicyMapOutput {
	return o
}

func (o VMWareReplicationPolicyMapOutput) MapIndex(k pulumi.StringInput) VMWareReplicationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMWareReplicationPolicy {
		return vs[0].(map[string]*VMWareReplicationPolicy)[vs[1].(string)]
	}).(VMWareReplicationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMWareReplicationPolicyInput)(nil)).Elem(), &VMWareReplicationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMWareReplicationPolicyArrayInput)(nil)).Elem(), VMWareReplicationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMWareReplicationPolicyMapInput)(nil)).Elem(), VMWareReplicationPolicyMap{})
	pulumi.RegisterOutputType(VMWareReplicationPolicyOutput{})
	pulumi.RegisterOutputType(VMWareReplicationPolicyArrayOutput{})
	pulumi.RegisterOutputType(VMWareReplicationPolicyMapOutput{})
}
