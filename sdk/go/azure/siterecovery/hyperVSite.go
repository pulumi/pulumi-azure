// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a HyperV Site in Recovery Service Vault.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/recoveryservices"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/siterecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("eastus"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVault, err := recoveryservices.NewVault(ctx, "exampleVault", &recoveryservices.VaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//				SoftDeleteEnabled: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = siterecovery.NewHyperVSite(ctx, "exampleHyperVSite", &siterecovery.HyperVSiteArgs{
//				RecoveryVaultId: exampleVault.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Recovery Services can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:siterecovery/hyperVSite:HyperVSite example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.RecoveryServices/vaults/vault1/replicationFabrics/fabric1
//
// ```
type HyperVSite struct {
	pulumi.CustomResourceState

	// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
	RecoveryVaultId pulumi.StringOutput `pulumi:"recoveryVaultId"`
}

// NewHyperVSite registers a new resource with the given unique name, arguments, and options.
func NewHyperVSite(ctx *pulumi.Context,
	name string, args *HyperVSiteArgs, opts ...pulumi.ResourceOption) (*HyperVSite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecoveryVaultId == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HyperVSite
	err := ctx.RegisterResource("azure:siterecovery/hyperVSite:HyperVSite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHyperVSite gets an existing HyperVSite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHyperVSite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HyperVSiteState, opts ...pulumi.ResourceOption) (*HyperVSite, error) {
	var resource HyperVSite
	err := ctx.ReadResource("azure:siterecovery/hyperVSite:HyperVSite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HyperVSite resources.
type hyperVSiteState struct {
	// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
	Name *string `pulumi:"name"`
	// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
	RecoveryVaultId *string `pulumi:"recoveryVaultId"`
}

type HyperVSiteState struct {
	// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
	Name pulumi.StringPtrInput
	// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
	RecoveryVaultId pulumi.StringPtrInput
}

func (HyperVSiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*hyperVSiteState)(nil)).Elem()
}

type hyperVSiteArgs struct {
	// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
	Name *string `pulumi:"name"`
	// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
	RecoveryVaultId string `pulumi:"recoveryVaultId"`
}

// The set of arguments for constructing a HyperVSite resource.
type HyperVSiteArgs struct {
	// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
	Name pulumi.StringPtrInput
	// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
	RecoveryVaultId pulumi.StringInput
}

func (HyperVSiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hyperVSiteArgs)(nil)).Elem()
}

type HyperVSiteInput interface {
	pulumi.Input

	ToHyperVSiteOutput() HyperVSiteOutput
	ToHyperVSiteOutputWithContext(ctx context.Context) HyperVSiteOutput
}

func (*HyperVSite) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperVSite)(nil)).Elem()
}

func (i *HyperVSite) ToHyperVSiteOutput() HyperVSiteOutput {
	return i.ToHyperVSiteOutputWithContext(context.Background())
}

func (i *HyperVSite) ToHyperVSiteOutputWithContext(ctx context.Context) HyperVSiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperVSiteOutput)
}

// HyperVSiteArrayInput is an input type that accepts HyperVSiteArray and HyperVSiteArrayOutput values.
// You can construct a concrete instance of `HyperVSiteArrayInput` via:
//
//	HyperVSiteArray{ HyperVSiteArgs{...} }
type HyperVSiteArrayInput interface {
	pulumi.Input

	ToHyperVSiteArrayOutput() HyperVSiteArrayOutput
	ToHyperVSiteArrayOutputWithContext(context.Context) HyperVSiteArrayOutput
}

type HyperVSiteArray []HyperVSiteInput

func (HyperVSiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HyperVSite)(nil)).Elem()
}

func (i HyperVSiteArray) ToHyperVSiteArrayOutput() HyperVSiteArrayOutput {
	return i.ToHyperVSiteArrayOutputWithContext(context.Background())
}

func (i HyperVSiteArray) ToHyperVSiteArrayOutputWithContext(ctx context.Context) HyperVSiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperVSiteArrayOutput)
}

// HyperVSiteMapInput is an input type that accepts HyperVSiteMap and HyperVSiteMapOutput values.
// You can construct a concrete instance of `HyperVSiteMapInput` via:
//
//	HyperVSiteMap{ "key": HyperVSiteArgs{...} }
type HyperVSiteMapInput interface {
	pulumi.Input

	ToHyperVSiteMapOutput() HyperVSiteMapOutput
	ToHyperVSiteMapOutputWithContext(context.Context) HyperVSiteMapOutput
}

type HyperVSiteMap map[string]HyperVSiteInput

func (HyperVSiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HyperVSite)(nil)).Elem()
}

func (i HyperVSiteMap) ToHyperVSiteMapOutput() HyperVSiteMapOutput {
	return i.ToHyperVSiteMapOutputWithContext(context.Background())
}

func (i HyperVSiteMap) ToHyperVSiteMapOutputWithContext(ctx context.Context) HyperVSiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HyperVSiteMapOutput)
}

type HyperVSiteOutput struct{ *pulumi.OutputState }

func (HyperVSiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HyperVSite)(nil)).Elem()
}

func (o HyperVSiteOutput) ToHyperVSiteOutput() HyperVSiteOutput {
	return o
}

func (o HyperVSiteOutput) ToHyperVSiteOutputWithContext(ctx context.Context) HyperVSiteOutput {
	return o
}

// The name which should be used for this Recovery Service. Changing this forces a new Site to be created.
func (o HyperVSiteOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperVSite) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the Recovery Services Vault where the Site created. Changing this forces a new Site to be created.
func (o HyperVSiteOutput) RecoveryVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *HyperVSite) pulumi.StringOutput { return v.RecoveryVaultId }).(pulumi.StringOutput)
}

type HyperVSiteArrayOutput struct{ *pulumi.OutputState }

func (HyperVSiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HyperVSite)(nil)).Elem()
}

func (o HyperVSiteArrayOutput) ToHyperVSiteArrayOutput() HyperVSiteArrayOutput {
	return o
}

func (o HyperVSiteArrayOutput) ToHyperVSiteArrayOutputWithContext(ctx context.Context) HyperVSiteArrayOutput {
	return o
}

func (o HyperVSiteArrayOutput) Index(i pulumi.IntInput) HyperVSiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HyperVSite {
		return vs[0].([]*HyperVSite)[vs[1].(int)]
	}).(HyperVSiteOutput)
}

type HyperVSiteMapOutput struct{ *pulumi.OutputState }

func (HyperVSiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HyperVSite)(nil)).Elem()
}

func (o HyperVSiteMapOutput) ToHyperVSiteMapOutput() HyperVSiteMapOutput {
	return o
}

func (o HyperVSiteMapOutput) ToHyperVSiteMapOutputWithContext(ctx context.Context) HyperVSiteMapOutput {
	return o
}

func (o HyperVSiteMapOutput) MapIndex(k pulumi.StringInput) HyperVSiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HyperVSite {
		return vs[0].(map[string]*HyperVSite)[vs[1].(string)]
	}).(HyperVSiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HyperVSiteInput)(nil)).Elem(), &HyperVSite{})
	pulumi.RegisterInputType(reflect.TypeOf((*HyperVSiteArrayInput)(nil)).Elem(), HyperVSiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HyperVSiteMapInput)(nil)).Elem(), HyperVSiteMap{})
	pulumi.RegisterOutputType(HyperVSiteOutput{})
	pulumi.RegisterOutputType(HyperVSiteArrayOutput{})
	pulumi.RegisterOutputType(HyperVSiteMapOutput{})
}
