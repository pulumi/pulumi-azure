// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Azure Site Recovery replication policy within a recovery vault. Replication policies define the frequency at which recovery points are created and how long they are stored.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/recoveryservices"
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/siterecovery"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		secondary, err := core.NewResourceGroup(ctx, "secondary", &core.ResourceGroupArgs{
// 			Location: pulumi.String("East US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		vault, err := recoveryservices.NewVault(ctx, "vault", &recoveryservices.VaultArgs{
// 			Location:          secondary.Location,
// 			ResourceGroupName: secondary.Name,
// 			Sku:               pulumi.String("Standard"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = siterecovery.NewReplicationPolicy(ctx, "policy", &siterecovery.ReplicationPolicyArgs{
// 			ResourceGroupName:                               secondary.Name,
// 			RecoveryVaultName:                               vault.Name,
// 			RecoveryPointRetentionInMinutes:                 24 * 60,
// 			ApplicationConsistentSnapshotFrequencyInMinutes: 4 * 60,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Site Recovery Replication Policies can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:siterecovery/replicationPolicy:ReplicationPolicy mypolicy /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationPolicies/policy-name
// ```
type ReplicationPolicy struct {
	pulumi.CustomResourceState

	// Specifies the frequency(in minutes) at which to create application consistent recovery points.
	ApplicationConsistentSnapshotFrequencyInMinutes pulumi.IntOutput `pulumi:"applicationConsistentSnapshotFrequencyInMinutes"`
	// The name of the network mapping.
	Name pulumi.StringOutput `pulumi:"name"`
	// The duration in minutes for which the recovery points need to be stored.
	RecoveryPointRetentionInMinutes pulumi.IntOutput `pulumi:"recoveryPointRetentionInMinutes"`
	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringOutput `pulumi:"recoveryVaultName"`
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewReplicationPolicy registers a new resource with the given unique name, arguments, and options.
func NewReplicationPolicy(ctx *pulumi.Context,
	name string, args *ReplicationPolicyArgs, opts ...pulumi.ResourceOption) (*ReplicationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationConsistentSnapshotFrequencyInMinutes == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationConsistentSnapshotFrequencyInMinutes'")
	}
	if args.RecoveryPointRetentionInMinutes == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryPointRetentionInMinutes'")
	}
	if args.RecoveryVaultName == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource ReplicationPolicy
	err := ctx.RegisterResource("azure:siterecovery/replicationPolicy:ReplicationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationPolicy gets an existing ReplicationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationPolicyState, opts ...pulumi.ResourceOption) (*ReplicationPolicy, error) {
	var resource ReplicationPolicy
	err := ctx.ReadResource("azure:siterecovery/replicationPolicy:ReplicationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationPolicy resources.
type replicationPolicyState struct {
	// Specifies the frequency(in minutes) at which to create application consistent recovery points.
	ApplicationConsistentSnapshotFrequencyInMinutes *int `pulumi:"applicationConsistentSnapshotFrequencyInMinutes"`
	// The name of the network mapping.
	Name *string `pulumi:"name"`
	// The duration in minutes for which the recovery points need to be stored.
	RecoveryPointRetentionInMinutes *int `pulumi:"recoveryPointRetentionInMinutes"`
	// The name of the vault that should be updated.
	RecoveryVaultName *string `pulumi:"recoveryVaultName"`
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type ReplicationPolicyState struct {
	// Specifies the frequency(in minutes) at which to create application consistent recovery points.
	ApplicationConsistentSnapshotFrequencyInMinutes pulumi.IntPtrInput
	// The name of the network mapping.
	Name pulumi.StringPtrInput
	// The duration in minutes for which the recovery points need to be stored.
	RecoveryPointRetentionInMinutes pulumi.IntPtrInput
	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringPtrInput
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringPtrInput
}

func (ReplicationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationPolicyState)(nil)).Elem()
}

type replicationPolicyArgs struct {
	// Specifies the frequency(in minutes) at which to create application consistent recovery points.
	ApplicationConsistentSnapshotFrequencyInMinutes int `pulumi:"applicationConsistentSnapshotFrequencyInMinutes"`
	// The name of the network mapping.
	Name *string `pulumi:"name"`
	// The duration in minutes for which the recovery points need to be stored.
	RecoveryPointRetentionInMinutes int `pulumi:"recoveryPointRetentionInMinutes"`
	// The name of the vault that should be updated.
	RecoveryVaultName string `pulumi:"recoveryVaultName"`
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ReplicationPolicy resource.
type ReplicationPolicyArgs struct {
	// Specifies the frequency(in minutes) at which to create application consistent recovery points.
	ApplicationConsistentSnapshotFrequencyInMinutes pulumi.IntInput
	// The name of the network mapping.
	Name pulumi.StringPtrInput
	// The duration in minutes for which the recovery points need to be stored.
	RecoveryPointRetentionInMinutes pulumi.IntInput
	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringInput
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringInput
}

func (ReplicationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationPolicyArgs)(nil)).Elem()
}

type ReplicationPolicyInput interface {
	pulumi.Input

	ToReplicationPolicyOutput() ReplicationPolicyOutput
	ToReplicationPolicyOutputWithContext(ctx context.Context) ReplicationPolicyOutput
}

func (*ReplicationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationPolicy)(nil))
}

func (i *ReplicationPolicy) ToReplicationPolicyOutput() ReplicationPolicyOutput {
	return i.ToReplicationPolicyOutputWithContext(context.Background())
}

func (i *ReplicationPolicy) ToReplicationPolicyOutputWithContext(ctx context.Context) ReplicationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationPolicyOutput)
}

func (i *ReplicationPolicy) ToReplicationPolicyPtrOutput() ReplicationPolicyPtrOutput {
	return i.ToReplicationPolicyPtrOutputWithContext(context.Background())
}

func (i *ReplicationPolicy) ToReplicationPolicyPtrOutputWithContext(ctx context.Context) ReplicationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationPolicyPtrOutput)
}

type ReplicationPolicyPtrInput interface {
	pulumi.Input

	ToReplicationPolicyPtrOutput() ReplicationPolicyPtrOutput
	ToReplicationPolicyPtrOutputWithContext(ctx context.Context) ReplicationPolicyPtrOutput
}

type replicationPolicyPtrType ReplicationPolicyArgs

func (*replicationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationPolicy)(nil))
}

func (i *replicationPolicyPtrType) ToReplicationPolicyPtrOutput() ReplicationPolicyPtrOutput {
	return i.ToReplicationPolicyPtrOutputWithContext(context.Background())
}

func (i *replicationPolicyPtrType) ToReplicationPolicyPtrOutputWithContext(ctx context.Context) ReplicationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationPolicyPtrOutput)
}

// ReplicationPolicyArrayInput is an input type that accepts ReplicationPolicyArray and ReplicationPolicyArrayOutput values.
// You can construct a concrete instance of `ReplicationPolicyArrayInput` via:
//
//          ReplicationPolicyArray{ ReplicationPolicyArgs{...} }
type ReplicationPolicyArrayInput interface {
	pulumi.Input

	ToReplicationPolicyArrayOutput() ReplicationPolicyArrayOutput
	ToReplicationPolicyArrayOutputWithContext(context.Context) ReplicationPolicyArrayOutput
}

type ReplicationPolicyArray []ReplicationPolicyInput

func (ReplicationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ReplicationPolicy)(nil))
}

func (i ReplicationPolicyArray) ToReplicationPolicyArrayOutput() ReplicationPolicyArrayOutput {
	return i.ToReplicationPolicyArrayOutputWithContext(context.Background())
}

func (i ReplicationPolicyArray) ToReplicationPolicyArrayOutputWithContext(ctx context.Context) ReplicationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationPolicyArrayOutput)
}

// ReplicationPolicyMapInput is an input type that accepts ReplicationPolicyMap and ReplicationPolicyMapOutput values.
// You can construct a concrete instance of `ReplicationPolicyMapInput` via:
//
//          ReplicationPolicyMap{ "key": ReplicationPolicyArgs{...} }
type ReplicationPolicyMapInput interface {
	pulumi.Input

	ToReplicationPolicyMapOutput() ReplicationPolicyMapOutput
	ToReplicationPolicyMapOutputWithContext(context.Context) ReplicationPolicyMapOutput
}

type ReplicationPolicyMap map[string]ReplicationPolicyInput

func (ReplicationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ReplicationPolicy)(nil))
}

func (i ReplicationPolicyMap) ToReplicationPolicyMapOutput() ReplicationPolicyMapOutput {
	return i.ToReplicationPolicyMapOutputWithContext(context.Background())
}

func (i ReplicationPolicyMap) ToReplicationPolicyMapOutputWithContext(ctx context.Context) ReplicationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationPolicyMapOutput)
}

type ReplicationPolicyOutput struct {
	*pulumi.OutputState
}

func (ReplicationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicationPolicy)(nil))
}

func (o ReplicationPolicyOutput) ToReplicationPolicyOutput() ReplicationPolicyOutput {
	return o
}

func (o ReplicationPolicyOutput) ToReplicationPolicyOutputWithContext(ctx context.Context) ReplicationPolicyOutput {
	return o
}

func (o ReplicationPolicyOutput) ToReplicationPolicyPtrOutput() ReplicationPolicyPtrOutput {
	return o.ToReplicationPolicyPtrOutputWithContext(context.Background())
}

func (o ReplicationPolicyOutput) ToReplicationPolicyPtrOutputWithContext(ctx context.Context) ReplicationPolicyPtrOutput {
	return o.ApplyT(func(v ReplicationPolicy) *ReplicationPolicy {
		return &v
	}).(ReplicationPolicyPtrOutput)
}

type ReplicationPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (ReplicationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationPolicy)(nil))
}

func (o ReplicationPolicyPtrOutput) ToReplicationPolicyPtrOutput() ReplicationPolicyPtrOutput {
	return o
}

func (o ReplicationPolicyPtrOutput) ToReplicationPolicyPtrOutputWithContext(ctx context.Context) ReplicationPolicyPtrOutput {
	return o
}

type ReplicationPolicyArrayOutput struct{ *pulumi.OutputState }

func (ReplicationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicationPolicy)(nil))
}

func (o ReplicationPolicyArrayOutput) ToReplicationPolicyArrayOutput() ReplicationPolicyArrayOutput {
	return o
}

func (o ReplicationPolicyArrayOutput) ToReplicationPolicyArrayOutputWithContext(ctx context.Context) ReplicationPolicyArrayOutput {
	return o
}

func (o ReplicationPolicyArrayOutput) Index(i pulumi.IntInput) ReplicationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicationPolicy {
		return vs[0].([]ReplicationPolicy)[vs[1].(int)]
	}).(ReplicationPolicyOutput)
}

type ReplicationPolicyMapOutput struct{ *pulumi.OutputState }

func (ReplicationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReplicationPolicy)(nil))
}

func (o ReplicationPolicyMapOutput) ToReplicationPolicyMapOutput() ReplicationPolicyMapOutput {
	return o
}

func (o ReplicationPolicyMapOutput) ToReplicationPolicyMapOutputWithContext(ctx context.Context) ReplicationPolicyMapOutput {
	return o
}

func (o ReplicationPolicyMapOutput) MapIndex(k pulumi.StringInput) ReplicationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReplicationPolicy {
		return vs[0].(map[string]ReplicationPolicy)[vs[1].(string)]
	}).(ReplicationPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(ReplicationPolicyOutput{})
	pulumi.RegisterOutputType(ReplicationPolicyPtrOutput{})
	pulumi.RegisterOutputType(ReplicationPolicyArrayOutput{})
	pulumi.RegisterOutputType(ReplicationPolicyMapOutput{})
}
