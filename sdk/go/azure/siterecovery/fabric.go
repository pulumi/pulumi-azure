// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Azure Site Recovery Replication Fabric within a Recovery Services vault. Only Azure fabrics are supported at this time. Replication Fabrics serve as a container within an Azure region for other Site Recovery resources such as protection containers, protected items, network mappings.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/recoveryservices"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/siterecovery"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		primary, err := core.NewResourceGroup(ctx, "primary", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		secondary, err := core.NewResourceGroup(ctx, "secondary", &core.ResourceGroupArgs{
// 			Location: pulumi.String("East US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		vault, err := recoveryservices.NewVault(ctx, "vault", &recoveryservices.VaultArgs{
// 			Location:          secondary.Location,
// 			ResourceGroupName: secondary.Name,
// 			Sku:               pulumi.String("Standard"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = siterecovery.NewFabric(ctx, "fabric", &siterecovery.FabricArgs{
// 			ResourceGroupName: secondary.Name,
// 			RecoveryVaultName: vault.Name,
// 			Location:          primary.Location,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Site Recovery Fabric can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:siterecovery/fabric:Fabric myfabric /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/fabric-name
// ```
type Fabric struct {
	pulumi.CustomResourceState

	// In what region should the fabric be located.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the network mapping.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringOutput `pulumi:"recoveryVaultName"`
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewFabric registers a new resource with the given unique name, arguments, and options.
func NewFabric(ctx *pulumi.Context,
	name string, args *FabricArgs, opts ...pulumi.ResourceOption) (*Fabric, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecoveryVaultName == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource Fabric
	err := ctx.RegisterResource("azure:siterecovery/fabric:Fabric", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFabric gets an existing Fabric resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFabric(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FabricState, opts ...pulumi.ResourceOption) (*Fabric, error) {
	var resource Fabric
	err := ctx.ReadResource("azure:siterecovery/fabric:Fabric", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fabric resources.
type fabricState struct {
	// In what region should the fabric be located.
	Location *string `pulumi:"location"`
	// The name of the network mapping.
	Name *string `pulumi:"name"`
	// The name of the vault that should be updated.
	RecoveryVaultName *string `pulumi:"recoveryVaultName"`
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type FabricState struct {
	// In what region should the fabric be located.
	Location pulumi.StringPtrInput
	// The name of the network mapping.
	Name pulumi.StringPtrInput
	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringPtrInput
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringPtrInput
}

func (FabricState) ElementType() reflect.Type {
	return reflect.TypeOf((*fabricState)(nil)).Elem()
}

type fabricArgs struct {
	// In what region should the fabric be located.
	Location *string `pulumi:"location"`
	// The name of the network mapping.
	Name *string `pulumi:"name"`
	// The name of the vault that should be updated.
	RecoveryVaultName string `pulumi:"recoveryVaultName"`
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a Fabric resource.
type FabricArgs struct {
	// In what region should the fabric be located.
	Location pulumi.StringPtrInput
	// The name of the network mapping.
	Name pulumi.StringPtrInput
	// The name of the vault that should be updated.
	RecoveryVaultName pulumi.StringInput
	// Name of the resource group where the vault that should be updated is located.
	ResourceGroupName pulumi.StringInput
}

func (FabricArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fabricArgs)(nil)).Elem()
}

type FabricInput interface {
	pulumi.Input

	ToFabricOutput() FabricOutput
	ToFabricOutputWithContext(ctx context.Context) FabricOutput
}

func (*Fabric) ElementType() reflect.Type {
	return reflect.TypeOf((*Fabric)(nil))
}

func (i *Fabric) ToFabricOutput() FabricOutput {
	return i.ToFabricOutputWithContext(context.Background())
}

func (i *Fabric) ToFabricOutputWithContext(ctx context.Context) FabricOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricOutput)
}

func (i *Fabric) ToFabricPtrOutput() FabricPtrOutput {
	return i.ToFabricPtrOutputWithContext(context.Background())
}

func (i *Fabric) ToFabricPtrOutputWithContext(ctx context.Context) FabricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricPtrOutput)
}

type FabricPtrInput interface {
	pulumi.Input

	ToFabricPtrOutput() FabricPtrOutput
	ToFabricPtrOutputWithContext(ctx context.Context) FabricPtrOutput
}

type fabricPtrType FabricArgs

func (*fabricPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Fabric)(nil))
}

func (i *fabricPtrType) ToFabricPtrOutput() FabricPtrOutput {
	return i.ToFabricPtrOutputWithContext(context.Background())
}

func (i *fabricPtrType) ToFabricPtrOutputWithContext(ctx context.Context) FabricPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricPtrOutput)
}

// FabricArrayInput is an input type that accepts FabricArray and FabricArrayOutput values.
// You can construct a concrete instance of `FabricArrayInput` via:
//
//          FabricArray{ FabricArgs{...} }
type FabricArrayInput interface {
	pulumi.Input

	ToFabricArrayOutput() FabricArrayOutput
	ToFabricArrayOutputWithContext(context.Context) FabricArrayOutput
}

type FabricArray []FabricInput

func (FabricArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*Fabric)(nil))
}

func (i FabricArray) ToFabricArrayOutput() FabricArrayOutput {
	return i.ToFabricArrayOutputWithContext(context.Background())
}

func (i FabricArray) ToFabricArrayOutputWithContext(ctx context.Context) FabricArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricArrayOutput)
}

// FabricMapInput is an input type that accepts FabricMap and FabricMapOutput values.
// You can construct a concrete instance of `FabricMapInput` via:
//
//          FabricMap{ "key": FabricArgs{...} }
type FabricMapInput interface {
	pulumi.Input

	ToFabricMapOutput() FabricMapOutput
	ToFabricMapOutputWithContext(context.Context) FabricMapOutput
}

type FabricMap map[string]FabricInput

func (FabricMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*Fabric)(nil))
}

func (i FabricMap) ToFabricMapOutput() FabricMapOutput {
	return i.ToFabricMapOutputWithContext(context.Background())
}

func (i FabricMap) ToFabricMapOutputWithContext(ctx context.Context) FabricMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FabricMapOutput)
}

type FabricOutput struct {
	*pulumi.OutputState
}

func (FabricOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Fabric)(nil))
}

func (o FabricOutput) ToFabricOutput() FabricOutput {
	return o
}

func (o FabricOutput) ToFabricOutputWithContext(ctx context.Context) FabricOutput {
	return o
}

func (o FabricOutput) ToFabricPtrOutput() FabricPtrOutput {
	return o.ToFabricPtrOutputWithContext(context.Background())
}

func (o FabricOutput) ToFabricPtrOutputWithContext(ctx context.Context) FabricPtrOutput {
	return o.ApplyT(func(v Fabric) *Fabric {
		return &v
	}).(FabricPtrOutput)
}

type FabricPtrOutput struct {
	*pulumi.OutputState
}

func (FabricPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fabric)(nil))
}

func (o FabricPtrOutput) ToFabricPtrOutput() FabricPtrOutput {
	return o
}

func (o FabricPtrOutput) ToFabricPtrOutputWithContext(ctx context.Context) FabricPtrOutput {
	return o
}

type FabricArrayOutput struct{ *pulumi.OutputState }

func (FabricArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Fabric)(nil))
}

func (o FabricArrayOutput) ToFabricArrayOutput() FabricArrayOutput {
	return o
}

func (o FabricArrayOutput) ToFabricArrayOutputWithContext(ctx context.Context) FabricArrayOutput {
	return o
}

func (o FabricArrayOutput) Index(i pulumi.IntInput) FabricOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Fabric {
		return vs[0].([]Fabric)[vs[1].(int)]
	}).(FabricOutput)
}

type FabricMapOutput struct{ *pulumi.OutputState }

func (FabricMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Fabric)(nil))
}

func (o FabricMapOutput) ToFabricMapOutput() FabricMapOutput {
	return o
}

func (o FabricMapOutput) ToFabricMapOutputWithContext(ctx context.Context) FabricMapOutput {
	return o
}

func (o FabricMapOutput) MapIndex(k pulumi.StringInput) FabricOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Fabric {
		return vs[0].(map[string]Fabric)[vs[1].(string)]
	}).(FabricOutput)
}

func init() {
	pulumi.RegisterOutputType(FabricOutput{})
	pulumi.RegisterOutputType(FabricPtrOutput{})
	pulumi.RegisterOutputType(FabricArrayOutput{})
	pulumi.RegisterOutputType(FabricMapOutput{})
}
