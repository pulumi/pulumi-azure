// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages an Azure Site Recovery replication policy for VMWare within a Recovery Vault.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/recoveryservices"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/siterecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("East US"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVault, err := recoveryservices.NewVault(ctx, "exampleVault", &recoveryservices.VaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVMWareReplicationPolicy, err := siterecovery.NewVMWareReplicationPolicy(ctx, "exampleVMWareReplicationPolicy", &siterecovery.VMWareReplicationPolicyArgs{
//				RecoveryVaultId:                                 exampleVault.ID(),
//				RecoveryPointRetentionInMinutes:                 pulumi.Int(1440),
//				ApplicationConsistentSnapshotFrequencyInMinutes: pulumi.Int(240),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = siterecovery.NewVmwareReplicationPolicyAssociation(ctx, "exampleVmwareReplicationPolicyAssociation", &siterecovery.VmwareReplicationPolicyAssociationArgs{
//				RecoveryVaultId: exampleVault.ID(),
//				PolicyId:        exampleVMWareReplicationPolicy.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Site Recovery Replication Policies can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:siterecovery/vmwareReplicationPolicyAssociation:VmwareReplicationPolicyAssociation mypolicy /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resource-group-name/providers/Microsoft.RecoveryServices/vaults/recovery-vault-name/replicationFabrics/site-name/replicationProtectionContainers/container-name/replicationProtectionContainerMappings/mapping-name
//
// ```
type VmwareReplicationPolicyAssociation struct {
	pulumi.CustomResourceState

	// The name of the replication policy association. Changing this forces a new association to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the VMWare replication policy which to be associated. Changing this forces a new association to be created.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// The ID of the Recovery Service Vault to which the policy should be associated.
	// Changing this forces a new association to be created.
	RecoveryVaultId pulumi.StringOutput `pulumi:"recoveryVaultId"`
}

// NewVmwareReplicationPolicyAssociation registers a new resource with the given unique name, arguments, and options.
func NewVmwareReplicationPolicyAssociation(ctx *pulumi.Context,
	name string, args *VmwareReplicationPolicyAssociationArgs, opts ...pulumi.ResourceOption) (*VmwareReplicationPolicyAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	if args.RecoveryVaultId == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VmwareReplicationPolicyAssociation
	err := ctx.RegisterResource("azure:siterecovery/vmwareReplicationPolicyAssociation:VmwareReplicationPolicyAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVmwareReplicationPolicyAssociation gets an existing VmwareReplicationPolicyAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVmwareReplicationPolicyAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VmwareReplicationPolicyAssociationState, opts ...pulumi.ResourceOption) (*VmwareReplicationPolicyAssociation, error) {
	var resource VmwareReplicationPolicyAssociation
	err := ctx.ReadResource("azure:siterecovery/vmwareReplicationPolicyAssociation:VmwareReplicationPolicyAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VmwareReplicationPolicyAssociation resources.
type vmwareReplicationPolicyAssociationState struct {
	// The name of the replication policy association. Changing this forces a new association to be created.
	Name *string `pulumi:"name"`
	// The ID of the VMWare replication policy which to be associated. Changing this forces a new association to be created.
	PolicyId *string `pulumi:"policyId"`
	// The ID of the Recovery Service Vault to which the policy should be associated.
	// Changing this forces a new association to be created.
	RecoveryVaultId *string `pulumi:"recoveryVaultId"`
}

type VmwareReplicationPolicyAssociationState struct {
	// The name of the replication policy association. Changing this forces a new association to be created.
	Name pulumi.StringPtrInput
	// The ID of the VMWare replication policy which to be associated. Changing this forces a new association to be created.
	PolicyId pulumi.StringPtrInput
	// The ID of the Recovery Service Vault to which the policy should be associated.
	// Changing this forces a new association to be created.
	RecoveryVaultId pulumi.StringPtrInput
}

func (VmwareReplicationPolicyAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareReplicationPolicyAssociationState)(nil)).Elem()
}

type vmwareReplicationPolicyAssociationArgs struct {
	// The name of the replication policy association. Changing this forces a new association to be created.
	Name *string `pulumi:"name"`
	// The ID of the VMWare replication policy which to be associated. Changing this forces a new association to be created.
	PolicyId string `pulumi:"policyId"`
	// The ID of the Recovery Service Vault to which the policy should be associated.
	// Changing this forces a new association to be created.
	RecoveryVaultId string `pulumi:"recoveryVaultId"`
}

// The set of arguments for constructing a VmwareReplicationPolicyAssociation resource.
type VmwareReplicationPolicyAssociationArgs struct {
	// The name of the replication policy association. Changing this forces a new association to be created.
	Name pulumi.StringPtrInput
	// The ID of the VMWare replication policy which to be associated. Changing this forces a new association to be created.
	PolicyId pulumi.StringInput
	// The ID of the Recovery Service Vault to which the policy should be associated.
	// Changing this forces a new association to be created.
	RecoveryVaultId pulumi.StringInput
}

func (VmwareReplicationPolicyAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmwareReplicationPolicyAssociationArgs)(nil)).Elem()
}

type VmwareReplicationPolicyAssociationInput interface {
	pulumi.Input

	ToVmwareReplicationPolicyAssociationOutput() VmwareReplicationPolicyAssociationOutput
	ToVmwareReplicationPolicyAssociationOutputWithContext(ctx context.Context) VmwareReplicationPolicyAssociationOutput
}

func (*VmwareReplicationPolicyAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareReplicationPolicyAssociation)(nil)).Elem()
}

func (i *VmwareReplicationPolicyAssociation) ToVmwareReplicationPolicyAssociationOutput() VmwareReplicationPolicyAssociationOutput {
	return i.ToVmwareReplicationPolicyAssociationOutputWithContext(context.Background())
}

func (i *VmwareReplicationPolicyAssociation) ToVmwareReplicationPolicyAssociationOutputWithContext(ctx context.Context) VmwareReplicationPolicyAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareReplicationPolicyAssociationOutput)
}

func (i *VmwareReplicationPolicyAssociation) ToOutput(ctx context.Context) pulumix.Output[*VmwareReplicationPolicyAssociation] {
	return pulumix.Output[*VmwareReplicationPolicyAssociation]{
		OutputState: i.ToVmwareReplicationPolicyAssociationOutputWithContext(ctx).OutputState,
	}
}

// VmwareReplicationPolicyAssociationArrayInput is an input type that accepts VmwareReplicationPolicyAssociationArray and VmwareReplicationPolicyAssociationArrayOutput values.
// You can construct a concrete instance of `VmwareReplicationPolicyAssociationArrayInput` via:
//
//	VmwareReplicationPolicyAssociationArray{ VmwareReplicationPolicyAssociationArgs{...} }
type VmwareReplicationPolicyAssociationArrayInput interface {
	pulumi.Input

	ToVmwareReplicationPolicyAssociationArrayOutput() VmwareReplicationPolicyAssociationArrayOutput
	ToVmwareReplicationPolicyAssociationArrayOutputWithContext(context.Context) VmwareReplicationPolicyAssociationArrayOutput
}

type VmwareReplicationPolicyAssociationArray []VmwareReplicationPolicyAssociationInput

func (VmwareReplicationPolicyAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmwareReplicationPolicyAssociation)(nil)).Elem()
}

func (i VmwareReplicationPolicyAssociationArray) ToVmwareReplicationPolicyAssociationArrayOutput() VmwareReplicationPolicyAssociationArrayOutput {
	return i.ToVmwareReplicationPolicyAssociationArrayOutputWithContext(context.Background())
}

func (i VmwareReplicationPolicyAssociationArray) ToVmwareReplicationPolicyAssociationArrayOutputWithContext(ctx context.Context) VmwareReplicationPolicyAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareReplicationPolicyAssociationArrayOutput)
}

func (i VmwareReplicationPolicyAssociationArray) ToOutput(ctx context.Context) pulumix.Output[[]*VmwareReplicationPolicyAssociation] {
	return pulumix.Output[[]*VmwareReplicationPolicyAssociation]{
		OutputState: i.ToVmwareReplicationPolicyAssociationArrayOutputWithContext(ctx).OutputState,
	}
}

// VmwareReplicationPolicyAssociationMapInput is an input type that accepts VmwareReplicationPolicyAssociationMap and VmwareReplicationPolicyAssociationMapOutput values.
// You can construct a concrete instance of `VmwareReplicationPolicyAssociationMapInput` via:
//
//	VmwareReplicationPolicyAssociationMap{ "key": VmwareReplicationPolicyAssociationArgs{...} }
type VmwareReplicationPolicyAssociationMapInput interface {
	pulumi.Input

	ToVmwareReplicationPolicyAssociationMapOutput() VmwareReplicationPolicyAssociationMapOutput
	ToVmwareReplicationPolicyAssociationMapOutputWithContext(context.Context) VmwareReplicationPolicyAssociationMapOutput
}

type VmwareReplicationPolicyAssociationMap map[string]VmwareReplicationPolicyAssociationInput

func (VmwareReplicationPolicyAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmwareReplicationPolicyAssociation)(nil)).Elem()
}

func (i VmwareReplicationPolicyAssociationMap) ToVmwareReplicationPolicyAssociationMapOutput() VmwareReplicationPolicyAssociationMapOutput {
	return i.ToVmwareReplicationPolicyAssociationMapOutputWithContext(context.Background())
}

func (i VmwareReplicationPolicyAssociationMap) ToVmwareReplicationPolicyAssociationMapOutputWithContext(ctx context.Context) VmwareReplicationPolicyAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VmwareReplicationPolicyAssociationMapOutput)
}

func (i VmwareReplicationPolicyAssociationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VmwareReplicationPolicyAssociation] {
	return pulumix.Output[map[string]*VmwareReplicationPolicyAssociation]{
		OutputState: i.ToVmwareReplicationPolicyAssociationMapOutputWithContext(ctx).OutputState,
	}
}

type VmwareReplicationPolicyAssociationOutput struct{ *pulumi.OutputState }

func (VmwareReplicationPolicyAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VmwareReplicationPolicyAssociation)(nil)).Elem()
}

func (o VmwareReplicationPolicyAssociationOutput) ToVmwareReplicationPolicyAssociationOutput() VmwareReplicationPolicyAssociationOutput {
	return o
}

func (o VmwareReplicationPolicyAssociationOutput) ToVmwareReplicationPolicyAssociationOutputWithContext(ctx context.Context) VmwareReplicationPolicyAssociationOutput {
	return o
}

func (o VmwareReplicationPolicyAssociationOutput) ToOutput(ctx context.Context) pulumix.Output[*VmwareReplicationPolicyAssociation] {
	return pulumix.Output[*VmwareReplicationPolicyAssociation]{
		OutputState: o.OutputState,
	}
}

// The name of the replication policy association. Changing this forces a new association to be created.
func (o VmwareReplicationPolicyAssociationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareReplicationPolicyAssociation) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The ID of the VMWare replication policy which to be associated. Changing this forces a new association to be created.
func (o VmwareReplicationPolicyAssociationOutput) PolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareReplicationPolicyAssociation) pulumi.StringOutput { return v.PolicyId }).(pulumi.StringOutput)
}

// The ID of the Recovery Service Vault to which the policy should be associated.
// Changing this forces a new association to be created.
func (o VmwareReplicationPolicyAssociationOutput) RecoveryVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *VmwareReplicationPolicyAssociation) pulumi.StringOutput { return v.RecoveryVaultId }).(pulumi.StringOutput)
}

type VmwareReplicationPolicyAssociationArrayOutput struct{ *pulumi.OutputState }

func (VmwareReplicationPolicyAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VmwareReplicationPolicyAssociation)(nil)).Elem()
}

func (o VmwareReplicationPolicyAssociationArrayOutput) ToVmwareReplicationPolicyAssociationArrayOutput() VmwareReplicationPolicyAssociationArrayOutput {
	return o
}

func (o VmwareReplicationPolicyAssociationArrayOutput) ToVmwareReplicationPolicyAssociationArrayOutputWithContext(ctx context.Context) VmwareReplicationPolicyAssociationArrayOutput {
	return o
}

func (o VmwareReplicationPolicyAssociationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VmwareReplicationPolicyAssociation] {
	return pulumix.Output[[]*VmwareReplicationPolicyAssociation]{
		OutputState: o.OutputState,
	}
}

func (o VmwareReplicationPolicyAssociationArrayOutput) Index(i pulumi.IntInput) VmwareReplicationPolicyAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VmwareReplicationPolicyAssociation {
		return vs[0].([]*VmwareReplicationPolicyAssociation)[vs[1].(int)]
	}).(VmwareReplicationPolicyAssociationOutput)
}

type VmwareReplicationPolicyAssociationMapOutput struct{ *pulumi.OutputState }

func (VmwareReplicationPolicyAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VmwareReplicationPolicyAssociation)(nil)).Elem()
}

func (o VmwareReplicationPolicyAssociationMapOutput) ToVmwareReplicationPolicyAssociationMapOutput() VmwareReplicationPolicyAssociationMapOutput {
	return o
}

func (o VmwareReplicationPolicyAssociationMapOutput) ToVmwareReplicationPolicyAssociationMapOutputWithContext(ctx context.Context) VmwareReplicationPolicyAssociationMapOutput {
	return o
}

func (o VmwareReplicationPolicyAssociationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VmwareReplicationPolicyAssociation] {
	return pulumix.Output[map[string]*VmwareReplicationPolicyAssociation]{
		OutputState: o.OutputState,
	}
}

func (o VmwareReplicationPolicyAssociationMapOutput) MapIndex(k pulumi.StringInput) VmwareReplicationPolicyAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VmwareReplicationPolicyAssociation {
		return vs[0].(map[string]*VmwareReplicationPolicyAssociation)[vs[1].(string)]
	}).(VmwareReplicationPolicyAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareReplicationPolicyAssociationInput)(nil)).Elem(), &VmwareReplicationPolicyAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareReplicationPolicyAssociationArrayInput)(nil)).Elem(), VmwareReplicationPolicyAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VmwareReplicationPolicyAssociationMapInput)(nil)).Elem(), VmwareReplicationPolicyAssociationMap{})
	pulumi.RegisterOutputType(VmwareReplicationPolicyAssociationOutput{})
	pulumi.RegisterOutputType(VmwareReplicationPolicyAssociationArrayOutput{})
	pulumi.RegisterOutputType(VmwareReplicationPolicyAssociationMapOutput{})
}
