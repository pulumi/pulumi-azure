// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Site Recovery Plan within a Recovery Services vault. A recovery plan gathers machines into recovery groups for the purpose of failover.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/recoveryservices"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/siterecovery"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			sourceResourceGroup, err := core.NewResourceGroup(ctx, "sourceResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("west us"),
//			})
//			if err != nil {
//				return err
//			}
//			targetResourceGroup, err := core.NewResourceGroup(ctx, "targetResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("east us"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleVault, err := recoveryservices.NewVault(ctx, "exampleVault", &recoveryservices.VaultArgs{
//				Location:          targetResourceGroup.Location,
//				ResourceGroupName: targetResourceGroup.Name,
//				Sku:               pulumi.String("Standard"),
//			})
//			if err != nil {
//				return err
//			}
//			sourceFabric, err := siterecovery.NewFabric(ctx, "sourceFabric", &siterecovery.FabricArgs{
//				ResourceGroupName: pulumi.Any(azurerm_resource_group.Example.Name),
//				RecoveryVaultName: exampleVault.Name,
//				Location:          sourceResourceGroup.Location,
//			})
//			if err != nil {
//				return err
//			}
//			targetFabric, err := siterecovery.NewFabric(ctx, "targetFabric", &siterecovery.FabricArgs{
//				ResourceGroupName: targetResourceGroup.Name,
//				RecoveryVaultName: exampleVault.Name,
//				Location:          targetResourceGroup.Location,
//			}, pulumi.DependsOn([]pulumi.Resource{
//				sourceFabric,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = siterecovery.NewReplicationRecoveryPlan(ctx, "exampleReplicationRecoveryPlan", &siterecovery.ReplicationRecoveryPlanArgs{
//				RecoveryVaultId:        pulumi.Any(azurerm_recovery_services_vault.Target.Id),
//				SourceRecoveryFabricId: sourceFabric.ID(),
//				TargetRecoveryFabricId: targetFabric.ID(),
//				RecoveryGroups: siterecovery.ReplicationRecoveryPlanRecoveryGroupArray{
//					&siterecovery.ReplicationRecoveryPlanRecoveryGroupArgs{
//						Type: pulumi.String("Boot"),
//						ReplicatedProtectedItems: pulumi.StringArray{
//							azurerm_site_recovery_replicated_vm.Test.Id,
//						},
//					},
//					&siterecovery.ReplicationRecoveryPlanRecoveryGroupArgs{
//						Type: pulumi.String("Failover"),
//					},
//					&siterecovery.ReplicationRecoveryPlanRecoveryGroupArgs{
//						Type: pulumi.String("Shutdown"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Site Recovery Fabric can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan RecoveryServices/vaults/vaultName/replicationRecoveryPlans/planName
//
// ```
type ReplicationRecoveryPlan struct {
	pulumi.CustomResourceState

	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Three or more `recoveryGroup` block.
	RecoveryGroups ReplicationRecoveryPlanRecoveryGroupArrayOutput `pulumi:"recoveryGroups"`
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringOutput `pulumi:"recoveryVaultId"`
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId pulumi.StringOutput `pulumi:"sourceRecoveryFabricId"`
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId pulumi.StringOutput `pulumi:"targetRecoveryFabricId"`
}

// NewReplicationRecoveryPlan registers a new resource with the given unique name, arguments, and options.
func NewReplicationRecoveryPlan(ctx *pulumi.Context,
	name string, args *ReplicationRecoveryPlanArgs, opts ...pulumi.ResourceOption) (*ReplicationRecoveryPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecoveryVaultId == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultId'")
	}
	if args.SourceRecoveryFabricId == nil {
		return nil, errors.New("invalid value for required argument 'SourceRecoveryFabricId'")
	}
	if args.TargetRecoveryFabricId == nil {
		return nil, errors.New("invalid value for required argument 'TargetRecoveryFabricId'")
	}
	var resource ReplicationRecoveryPlan
	err := ctx.RegisterResource("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationRecoveryPlan gets an existing ReplicationRecoveryPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationRecoveryPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationRecoveryPlanState, opts ...pulumi.ResourceOption) (*ReplicationRecoveryPlan, error) {
	var resource ReplicationRecoveryPlan
	err := ctx.ReadResource("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationRecoveryPlan resources.
type replicationRecoveryPlanState struct {
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Three or more `recoveryGroup` block.
	RecoveryGroups []ReplicationRecoveryPlanRecoveryGroup `pulumi:"recoveryGroups"`
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId *string `pulumi:"recoveryVaultId"`
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId *string `pulumi:"sourceRecoveryFabricId"`
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId *string `pulumi:"targetRecoveryFabricId"`
}

type ReplicationRecoveryPlanState struct {
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Three or more `recoveryGroup` block.
	RecoveryGroups ReplicationRecoveryPlanRecoveryGroupArrayInput
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringPtrInput
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId pulumi.StringPtrInput
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId pulumi.StringPtrInput
}

func (ReplicationRecoveryPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationRecoveryPlanState)(nil)).Elem()
}

type replicationRecoveryPlanArgs struct {
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Three or more `recoveryGroup` block.
	RecoveryGroups []ReplicationRecoveryPlanRecoveryGroup `pulumi:"recoveryGroups"`
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId string `pulumi:"recoveryVaultId"`
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId string `pulumi:"sourceRecoveryFabricId"`
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId string `pulumi:"targetRecoveryFabricId"`
}

// The set of arguments for constructing a ReplicationRecoveryPlan resource.
type ReplicationRecoveryPlanArgs struct {
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Three or more `recoveryGroup` block.
	RecoveryGroups ReplicationRecoveryPlanRecoveryGroupArrayInput
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringInput
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId pulumi.StringInput
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId pulumi.StringInput
}

func (ReplicationRecoveryPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationRecoveryPlanArgs)(nil)).Elem()
}

type ReplicationRecoveryPlanInput interface {
	pulumi.Input

	ToReplicationRecoveryPlanOutput() ReplicationRecoveryPlanOutput
	ToReplicationRecoveryPlanOutputWithContext(ctx context.Context) ReplicationRecoveryPlanOutput
}

func (*ReplicationRecoveryPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationRecoveryPlan)(nil)).Elem()
}

func (i *ReplicationRecoveryPlan) ToReplicationRecoveryPlanOutput() ReplicationRecoveryPlanOutput {
	return i.ToReplicationRecoveryPlanOutputWithContext(context.Background())
}

func (i *ReplicationRecoveryPlan) ToReplicationRecoveryPlanOutputWithContext(ctx context.Context) ReplicationRecoveryPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationRecoveryPlanOutput)
}

// ReplicationRecoveryPlanArrayInput is an input type that accepts ReplicationRecoveryPlanArray and ReplicationRecoveryPlanArrayOutput values.
// You can construct a concrete instance of `ReplicationRecoveryPlanArrayInput` via:
//
//	ReplicationRecoveryPlanArray{ ReplicationRecoveryPlanArgs{...} }
type ReplicationRecoveryPlanArrayInput interface {
	pulumi.Input

	ToReplicationRecoveryPlanArrayOutput() ReplicationRecoveryPlanArrayOutput
	ToReplicationRecoveryPlanArrayOutputWithContext(context.Context) ReplicationRecoveryPlanArrayOutput
}

type ReplicationRecoveryPlanArray []ReplicationRecoveryPlanInput

func (ReplicationRecoveryPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicationRecoveryPlan)(nil)).Elem()
}

func (i ReplicationRecoveryPlanArray) ToReplicationRecoveryPlanArrayOutput() ReplicationRecoveryPlanArrayOutput {
	return i.ToReplicationRecoveryPlanArrayOutputWithContext(context.Background())
}

func (i ReplicationRecoveryPlanArray) ToReplicationRecoveryPlanArrayOutputWithContext(ctx context.Context) ReplicationRecoveryPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationRecoveryPlanArrayOutput)
}

// ReplicationRecoveryPlanMapInput is an input type that accepts ReplicationRecoveryPlanMap and ReplicationRecoveryPlanMapOutput values.
// You can construct a concrete instance of `ReplicationRecoveryPlanMapInput` via:
//
//	ReplicationRecoveryPlanMap{ "key": ReplicationRecoveryPlanArgs{...} }
type ReplicationRecoveryPlanMapInput interface {
	pulumi.Input

	ToReplicationRecoveryPlanMapOutput() ReplicationRecoveryPlanMapOutput
	ToReplicationRecoveryPlanMapOutputWithContext(context.Context) ReplicationRecoveryPlanMapOutput
}

type ReplicationRecoveryPlanMap map[string]ReplicationRecoveryPlanInput

func (ReplicationRecoveryPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicationRecoveryPlan)(nil)).Elem()
}

func (i ReplicationRecoveryPlanMap) ToReplicationRecoveryPlanMapOutput() ReplicationRecoveryPlanMapOutput {
	return i.ToReplicationRecoveryPlanMapOutputWithContext(context.Background())
}

func (i ReplicationRecoveryPlanMap) ToReplicationRecoveryPlanMapOutputWithContext(ctx context.Context) ReplicationRecoveryPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationRecoveryPlanMapOutput)
}

type ReplicationRecoveryPlanOutput struct{ *pulumi.OutputState }

func (ReplicationRecoveryPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationRecoveryPlan)(nil)).Elem()
}

func (o ReplicationRecoveryPlanOutput) ToReplicationRecoveryPlanOutput() ReplicationRecoveryPlanOutput {
	return o
}

func (o ReplicationRecoveryPlanOutput) ToReplicationRecoveryPlanOutputWithContext(ctx context.Context) ReplicationRecoveryPlanOutput {
	return o
}

// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
func (o ReplicationRecoveryPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Three or more `recoveryGroup` block.
func (o ReplicationRecoveryPlanOutput) RecoveryGroups() ReplicationRecoveryPlanRecoveryGroupArrayOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) ReplicationRecoveryPlanRecoveryGroupArrayOutput {
		return v.RecoveryGroups
	}).(ReplicationRecoveryPlanRecoveryGroupArrayOutput)
}

// The ID of the vault that should be updated. Changing this forces a new resource to be created.
func (o ReplicationRecoveryPlanOutput) RecoveryVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) pulumi.StringOutput { return v.RecoveryVaultId }).(pulumi.StringOutput)
}

// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
func (o ReplicationRecoveryPlanOutput) SourceRecoveryFabricId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) pulumi.StringOutput { return v.SourceRecoveryFabricId }).(pulumi.StringOutput)
}

// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
func (o ReplicationRecoveryPlanOutput) TargetRecoveryFabricId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) pulumi.StringOutput { return v.TargetRecoveryFabricId }).(pulumi.StringOutput)
}

type ReplicationRecoveryPlanArrayOutput struct{ *pulumi.OutputState }

func (ReplicationRecoveryPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicationRecoveryPlan)(nil)).Elem()
}

func (o ReplicationRecoveryPlanArrayOutput) ToReplicationRecoveryPlanArrayOutput() ReplicationRecoveryPlanArrayOutput {
	return o
}

func (o ReplicationRecoveryPlanArrayOutput) ToReplicationRecoveryPlanArrayOutputWithContext(ctx context.Context) ReplicationRecoveryPlanArrayOutput {
	return o
}

func (o ReplicationRecoveryPlanArrayOutput) Index(i pulumi.IntInput) ReplicationRecoveryPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplicationRecoveryPlan {
		return vs[0].([]*ReplicationRecoveryPlan)[vs[1].(int)]
	}).(ReplicationRecoveryPlanOutput)
}

type ReplicationRecoveryPlanMapOutput struct{ *pulumi.OutputState }

func (ReplicationRecoveryPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicationRecoveryPlan)(nil)).Elem()
}

func (o ReplicationRecoveryPlanMapOutput) ToReplicationRecoveryPlanMapOutput() ReplicationRecoveryPlanMapOutput {
	return o
}

func (o ReplicationRecoveryPlanMapOutput) ToReplicationRecoveryPlanMapOutputWithContext(ctx context.Context) ReplicationRecoveryPlanMapOutput {
	return o
}

func (o ReplicationRecoveryPlanMapOutput) MapIndex(k pulumi.StringInput) ReplicationRecoveryPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplicationRecoveryPlan {
		return vs[0].(map[string]*ReplicationRecoveryPlan)[vs[1].(string)]
	}).(ReplicationRecoveryPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationRecoveryPlanInput)(nil)).Elem(), &ReplicationRecoveryPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationRecoveryPlanArrayInput)(nil)).Elem(), ReplicationRecoveryPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationRecoveryPlanMapInput)(nil)).Elem(), ReplicationRecoveryPlanMap{})
	pulumi.RegisterOutputType(ReplicationRecoveryPlanOutput{})
	pulumi.RegisterOutputType(ReplicationRecoveryPlanArrayOutput{})
	pulumi.RegisterOutputType(ReplicationRecoveryPlanMapOutput{})
}
