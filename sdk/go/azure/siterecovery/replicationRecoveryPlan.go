// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package siterecovery

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Site Recovery Replication Recovery Plan within a Recovery Services vault. A recovery plan gathers machines into recovery groups for the purpose of failover.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	compute/virtualMachine "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/compute/virtualMachine"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	network/networkInterface "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkInterface"
//	network/publicIp "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/publicIp"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	recoveryservices/vault "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/recoveryservices/vault"
//	siterecovery/fabric "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/siterecovery/fabric"
//	siterecovery/networkMapping "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/siterecovery/networkMapping"
//	siterecovery/protectionContainer "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/siterecovery/protectionContainer"
//	siterecovery/protectionContainerMapping "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/siterecovery/protectionContainerMapping"
//	siterecovery/replicatedVM "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/siterecovery/replicatedVM"
//	siterecovery/replicationPolicy "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/siterecovery/replicationPolicy"
//	siterecovery/replicationRecoveryPlan "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/siterecovery/replicationRecoveryPlan"
//	storage/account "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/storage/account"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// primary, err := core/resourceGroup.NewResourceGroup(ctx, "primary", &core/resourceGroup.ResourceGroupArgs{
// Name: "tfex-replicated-vm-primary",
// Location: "West US",
// })
// if err != nil {
// return err
// }
// secondary, err := core/resourceGroup.NewResourceGroup(ctx, "secondary", &core/resourceGroup.ResourceGroupArgs{
// Name: "tfex-replicated-vm-secondary",
// Location: "East US",
// })
// if err != nil {
// return err
// }
// primaryVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "primary", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "network1",
// ResourceGroupName: primary.Name,
// AddressSpaces: []string{
// "192.168.1.0/24",
// },
// Location: primary.Location,
// })
// if err != nil {
// return err
// }
// primarySubnet, err := network/subnet.NewSubnet(ctx, "primary", &network/subnet.SubnetArgs{
// Name: "network1-subnet",
// ResourceGroupName: primary.Name,
// VirtualNetworkName: primaryVirtualNetwork.Name,
// AddressPrefixes: []string{
// "192.168.1.0/24",
// },
// })
// if err != nil {
// return err
// }
// primaryPublicIp, err := network/publicIp.NewPublicIp(ctx, "primary", &network/publicIp.PublicIpArgs{
// Name: "vm-public-ip-primary",
// AllocationMethod: "Static",
// Location: primary.Location,
// ResourceGroupName: primary.Name,
// Sku: "Basic",
// })
// if err != nil {
// return err
// }
// vmNetworkInterface, err := network/networkInterface.NewNetworkInterface(ctx, "vm", &network/networkInterface.NetworkInterfaceArgs{
// Name: "vm-nic",
// Location: primary.Location,
// ResourceGroupName: primary.Name,
// IpConfigurations: []map[string]interface{}{
// map[string]interface{}{
// "name": "vm",
// "subnetId": primarySubnet.Id,
// "privateIpAddressAllocation": "Dynamic",
// "publicIpAddressId": primaryPublicIp.Id,
// },
// },
// })
// if err != nil {
// return err
// }
// vm, err := compute/virtualMachine.NewVirtualMachine(ctx, "vm", &compute/virtualMachine.VirtualMachineArgs{
// Name: "vm",
// Location: primary.Location,
// ResourceGroupName: primary.Name,
// VmSize: "Standard_B1s",
// NetworkInterfaceIds: []interface{}{
// vmNetworkInterface.Id,
// },
// StorageImageReference: map[string]interface{}{
// "publisher": "Canonical",
// "offer": "0001-com-ubuntu-server-jammy",
// "sku": "22_04-lts",
// "version": "latest",
// },
// StorageOsDisk: map[string]interface{}{
// "name": "vm-os-disk",
// "osType": "Linux",
// "caching": "ReadWrite",
// "createOption": "FromImage",
// "managedDiskType": "Premium_LRS",
// },
// OsProfile: map[string]interface{}{
// "adminUsername": "test-admin-123",
// "adminPassword": "test-pwd-123",
// "computerName": "vm",
// },
// OsProfileLinuxConfig: map[string]interface{}{
// "disablePasswordAuthentication": false,
// },
// })
// if err != nil {
// return err
// }
// vault, err := recoveryservices/vault.NewVault(ctx, "vault", &recoveryservices/vault.VaultArgs{
// Name: "example-recovery-vault",
// Location: secondary.Location,
// ResourceGroupName: secondary.Name,
// Sku: "Standard",
// })
// if err != nil {
// return err
// }
// primaryFabric, err := siterecovery/fabric.NewFabric(ctx, "primary", &siterecovery/fabric.FabricArgs{
// Name: "primary-fabric",
// ResourceGroupName: secondary.Name,
// RecoveryVaultName: vault.Name,
// Location: primary.Location,
// })
// if err != nil {
// return err
// }
// secondaryFabric, err := siterecovery/fabric.NewFabric(ctx, "secondary", &siterecovery/fabric.FabricArgs{
// Name: "secondary-fabric",
// ResourceGroupName: secondary.Name,
// RecoveryVaultName: vault.Name,
// Location: secondary.Location,
// })
// if err != nil {
// return err
// }
// primaryProtectionContainer, err := siterecovery/protectionContainer.NewProtectionContainer(ctx, "primary", &siterecovery/protectionContainer.ProtectionContainerArgs{
// Name: "primary-protection-container",
// ResourceGroupName: secondary.Name,
// RecoveryVaultName: vault.Name,
// RecoveryFabricName: primaryFabric.Name,
// })
// if err != nil {
// return err
// }
// secondaryProtectionContainer, err := siterecovery/protectionContainer.NewProtectionContainer(ctx, "secondary", &siterecovery/protectionContainer.ProtectionContainerArgs{
// Name: "secondary-protection-container",
// ResourceGroupName: secondary.Name,
// RecoveryVaultName: vault.Name,
// RecoveryFabricName: secondaryFabric.Name,
// })
// if err != nil {
// return err
// }
// policy, err := siterecovery/replicationPolicy.NewReplicationPolicy(ctx, "policy", &siterecovery/replicationPolicy.ReplicationPolicyArgs{
// Name: "policy",
// ResourceGroupName: secondary.Name,
// RecoveryVaultName: vault.Name,
// RecoveryPointRetentionInMinutes: 24 * 60,
// ApplicationConsistentSnapshotFrequencyInMinutes: 4 * 60,
// })
// if err != nil {
// return err
// }
// _, err = siterecovery/protectionContainerMapping.NewProtectionContainerMapping(ctx, "container-mapping", &siterecovery/protectionContainerMapping.ProtectionContainerMappingArgs{
// Name: "container-mapping",
// ResourceGroupName: secondary.Name,
// RecoveryVaultName: vault.Name,
// RecoveryFabricName: primaryFabric.Name,
// RecoverySourceProtectionContainerName: primaryProtectionContainer.Name,
// RecoveryTargetProtectionContainerId: secondaryProtectionContainer.Id,
// RecoveryReplicationPolicyId: policy.Id,
// })
// if err != nil {
// return err
// }
// secondaryVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "secondary", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "network2",
// ResourceGroupName: secondary.Name,
// AddressSpaces: []string{
// "192.168.2.0/24",
// },
// Location: secondary.Location,
// })
// if err != nil {
// return err
// }
// _, err = siterecovery/networkMapping.NewNetworkMapping(ctx, "network-mapping", &siterecovery/networkMapping.NetworkMappingArgs{
// Name: "network-mapping",
// ResourceGroupName: secondary.Name,
// RecoveryVaultName: vault.Name,
// SourceRecoveryFabricName: primaryFabric.Name,
// TargetRecoveryFabricName: secondaryFabric.Name,
// SourceNetworkId: primaryVirtualNetwork.Id,
// TargetNetworkId: secondaryVirtualNetwork.Id,
// })
// if err != nil {
// return err
// }
// primaryAccount, err := storage/account.NewAccount(ctx, "primary", &storage/account.AccountArgs{
// Name: "primaryrecoverycache",
// Location: primary.Location,
// ResourceGroupName: primary.Name,
// AccountTier: "Standard",
// AccountReplicationType: "LRS",
// })
// if err != nil {
// return err
// }
// secondarySubnet, err := network/subnet.NewSubnet(ctx, "secondary", &network/subnet.SubnetArgs{
// Name: "network2-subnet",
// ResourceGroupName: secondary.Name,
// VirtualNetworkName: secondaryVirtualNetwork.Name,
// AddressPrefixes: []string{
// "192.168.2.0/24",
// },
// })
// if err != nil {
// return err
// }
// secondaryPublicIp, err := network/publicIp.NewPublicIp(ctx, "secondary", &network/publicIp.PublicIpArgs{
// Name: "vm-public-ip-secondary",
// AllocationMethod: "Static",
// Location: secondary.Location,
// ResourceGroupName: secondary.Name,
// Sku: "Basic",
// })
// if err != nil {
// return err
// }
// _, err = siterecovery/replicatedVM.NewReplicatedVM(ctx, "vm-replication", &siterecovery/replicatedVM.ReplicatedVMArgs{
// Name: "vm-replication",
// ResourceGroupName: secondary.Name,
// RecoveryVaultName: vault.Name,
// SourceRecoveryFabricName: primaryFabric.Name,
// SourceVmId: vm.Id,
// RecoveryReplicationPolicyId: policy.Id,
// SourceRecoveryProtectionContainerName: primaryProtectionContainer.Name,
// TargetResourceGroupId: secondary.Id,
// TargetRecoveryFabricId: secondaryFabric.Id,
// TargetRecoveryProtectionContainerId: secondaryProtectionContainer.Id,
// ManagedDisks: []map[string]interface{}{
// map[string]interface{}{
// "diskId": vm.StorageOsDisk.ManagedDiskId,
// "stagingStorageAccountId": primaryAccount.Id,
// "targetResourceGroupId": secondary.Id,
// "targetDiskType": "Premium_LRS",
// "targetReplicaDiskType": "Premium_LRS",
// },
// },
// NetworkInterfaces: []map[string]interface{}{
// map[string]interface{}{
// "sourceNetworkInterfaceId": vmNetworkInterface.Id,
// "targetSubnetName": secondarySubnet.Name,
// "recoveryPublicIpAddressId": secondaryPublicIp.Id,
// },
// },
// })
// if err != nil {
// return err
// }
// _, err = siterecovery/replicationRecoveryPlan.NewReplicationRecoveryPlan(ctx, "example", &siterecovery/replicationRecoveryPlan.ReplicationRecoveryPlanArgs{
// Name: "example-recover-plan",
// RecoveryVaultId: vault.Id,
// SourceRecoveryFabricId: primaryFabric.Id,
// TargetRecoveryFabricId: secondaryFabric.Id,
// ShutdownRecoveryGroup: nil,
// FailoverRecoveryGroup: nil,
// BootRecoveryGroups: []map[string]interface{}{
// map[string]interface{}{
// "replicatedProtectedItems": []interface{}{
// vm_replication.Id,
// },
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Site Recovery Fabric can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan azurerm_site_recovery_replication_recovery_plan.example /subscriptions/00000000-0000-0000-0000-00000000000/resourceGroups/groupName/providers/Microsoft.RecoveryServices/vaults/vaultName/replicationRecoveryPlans/planName
// ```
type ReplicationRecoveryPlan struct {
	pulumi.CustomResourceState

	// An `azureToAzureSettings` block as defined below.
	AzureToAzureSettings ReplicationRecoveryPlanAzureToAzureSettingsPtrOutput `pulumi:"azureToAzureSettings"`
	// One or more `bootRecoveryGroup` blocks as defined below.
	//
	// > **NOTE:** At least one `bootRecoveryGroup` block will be required in the next major version of the AzureRM Provider.
	BootRecoveryGroups ReplicationRecoveryPlanBootRecoveryGroupArrayOutput `pulumi:"bootRecoveryGroups"`
	// One `failoverRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `failoverRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	FailoverRecoveryGroup ReplicationRecoveryPlanFailoverRecoveryGroupOutput `pulumi:"failoverRecoveryGroup"`
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Three or more `recoveryGroup` block defined as below.
	//
	// > **Note:** The `recoveryGroup` block is deprecated in favor of `shutdownRecoveryGroup`, `failoverRecoveryGroup` and `bootRecoveryGroup`. It will be removed in v4.0 of the Azure Provider.
	//
	// Deprecated: the `recovery_group` block has been deprecated in favour of the `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group` and will be removed in version 4.0 of the provider.
	RecoveryGroups ReplicationRecoveryPlanRecoveryGroupArrayOutput `pulumi:"recoveryGroups"`
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringOutput `pulumi:"recoveryVaultId"`
	// One `shutdownRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `shutdownRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	ShutdownRecoveryGroup ReplicationRecoveryPlanShutdownRecoveryGroupOutput `pulumi:"shutdownRecoveryGroup"`
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId pulumi.StringOutput `pulumi:"sourceRecoveryFabricId"`
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId pulumi.StringOutput `pulumi:"targetRecoveryFabricId"`
}

// NewReplicationRecoveryPlan registers a new resource with the given unique name, arguments, and options.
func NewReplicationRecoveryPlan(ctx *pulumi.Context,
	name string, args *ReplicationRecoveryPlanArgs, opts ...pulumi.ResourceOption) (*ReplicationRecoveryPlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecoveryVaultId == nil {
		return nil, errors.New("invalid value for required argument 'RecoveryVaultId'")
	}
	if args.SourceRecoveryFabricId == nil {
		return nil, errors.New("invalid value for required argument 'SourceRecoveryFabricId'")
	}
	if args.TargetRecoveryFabricId == nil {
		return nil, errors.New("invalid value for required argument 'TargetRecoveryFabricId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReplicationRecoveryPlan
	err := ctx.RegisterResource("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicationRecoveryPlan gets an existing ReplicationRecoveryPlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicationRecoveryPlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicationRecoveryPlanState, opts ...pulumi.ResourceOption) (*ReplicationRecoveryPlan, error) {
	var resource ReplicationRecoveryPlan
	err := ctx.ReadResource("azure:siterecovery/replicationRecoveryPlan:ReplicationRecoveryPlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicationRecoveryPlan resources.
type replicationRecoveryPlanState struct {
	// An `azureToAzureSettings` block as defined below.
	AzureToAzureSettings *ReplicationRecoveryPlanAzureToAzureSettings `pulumi:"azureToAzureSettings"`
	// One or more `bootRecoveryGroup` blocks as defined below.
	//
	// > **NOTE:** At least one `bootRecoveryGroup` block will be required in the next major version of the AzureRM Provider.
	BootRecoveryGroups []ReplicationRecoveryPlanBootRecoveryGroup `pulumi:"bootRecoveryGroups"`
	// One `failoverRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `failoverRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	FailoverRecoveryGroup *ReplicationRecoveryPlanFailoverRecoveryGroup `pulumi:"failoverRecoveryGroup"`
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Three or more `recoveryGroup` block defined as below.
	//
	// > **Note:** The `recoveryGroup` block is deprecated in favor of `shutdownRecoveryGroup`, `failoverRecoveryGroup` and `bootRecoveryGroup`. It will be removed in v4.0 of the Azure Provider.
	//
	// Deprecated: the `recovery_group` block has been deprecated in favour of the `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group` and will be removed in version 4.0 of the provider.
	RecoveryGroups []ReplicationRecoveryPlanRecoveryGroup `pulumi:"recoveryGroups"`
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId *string `pulumi:"recoveryVaultId"`
	// One `shutdownRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `shutdownRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	ShutdownRecoveryGroup *ReplicationRecoveryPlanShutdownRecoveryGroup `pulumi:"shutdownRecoveryGroup"`
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId *string `pulumi:"sourceRecoveryFabricId"`
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId *string `pulumi:"targetRecoveryFabricId"`
}

type ReplicationRecoveryPlanState struct {
	// An `azureToAzureSettings` block as defined below.
	AzureToAzureSettings ReplicationRecoveryPlanAzureToAzureSettingsPtrInput
	// One or more `bootRecoveryGroup` blocks as defined below.
	//
	// > **NOTE:** At least one `bootRecoveryGroup` block will be required in the next major version of the AzureRM Provider.
	BootRecoveryGroups ReplicationRecoveryPlanBootRecoveryGroupArrayInput
	// One `failoverRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `failoverRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	FailoverRecoveryGroup ReplicationRecoveryPlanFailoverRecoveryGroupPtrInput
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Three or more `recoveryGroup` block defined as below.
	//
	// > **Note:** The `recoveryGroup` block is deprecated in favor of `shutdownRecoveryGroup`, `failoverRecoveryGroup` and `bootRecoveryGroup`. It will be removed in v4.0 of the Azure Provider.
	//
	// Deprecated: the `recovery_group` block has been deprecated in favour of the `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group` and will be removed in version 4.0 of the provider.
	RecoveryGroups ReplicationRecoveryPlanRecoveryGroupArrayInput
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringPtrInput
	// One `shutdownRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `shutdownRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	ShutdownRecoveryGroup ReplicationRecoveryPlanShutdownRecoveryGroupPtrInput
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId pulumi.StringPtrInput
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId pulumi.StringPtrInput
}

func (ReplicationRecoveryPlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationRecoveryPlanState)(nil)).Elem()
}

type replicationRecoveryPlanArgs struct {
	// An `azureToAzureSettings` block as defined below.
	AzureToAzureSettings *ReplicationRecoveryPlanAzureToAzureSettings `pulumi:"azureToAzureSettings"`
	// One or more `bootRecoveryGroup` blocks as defined below.
	//
	// > **NOTE:** At least one `bootRecoveryGroup` block will be required in the next major version of the AzureRM Provider.
	BootRecoveryGroups []ReplicationRecoveryPlanBootRecoveryGroup `pulumi:"bootRecoveryGroups"`
	// One `failoverRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `failoverRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	FailoverRecoveryGroup *ReplicationRecoveryPlanFailoverRecoveryGroup `pulumi:"failoverRecoveryGroup"`
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Three or more `recoveryGroup` block defined as below.
	//
	// > **Note:** The `recoveryGroup` block is deprecated in favor of `shutdownRecoveryGroup`, `failoverRecoveryGroup` and `bootRecoveryGroup`. It will be removed in v4.0 of the Azure Provider.
	//
	// Deprecated: the `recovery_group` block has been deprecated in favour of the `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group` and will be removed in version 4.0 of the provider.
	RecoveryGroups []ReplicationRecoveryPlanRecoveryGroup `pulumi:"recoveryGroups"`
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId string `pulumi:"recoveryVaultId"`
	// One `shutdownRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `shutdownRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	ShutdownRecoveryGroup *ReplicationRecoveryPlanShutdownRecoveryGroup `pulumi:"shutdownRecoveryGroup"`
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId string `pulumi:"sourceRecoveryFabricId"`
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId string `pulumi:"targetRecoveryFabricId"`
}

// The set of arguments for constructing a ReplicationRecoveryPlan resource.
type ReplicationRecoveryPlanArgs struct {
	// An `azureToAzureSettings` block as defined below.
	AzureToAzureSettings ReplicationRecoveryPlanAzureToAzureSettingsPtrInput
	// One or more `bootRecoveryGroup` blocks as defined below.
	//
	// > **NOTE:** At least one `bootRecoveryGroup` block will be required in the next major version of the AzureRM Provider.
	BootRecoveryGroups ReplicationRecoveryPlanBootRecoveryGroupArrayInput
	// One `failoverRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `failoverRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	FailoverRecoveryGroup ReplicationRecoveryPlanFailoverRecoveryGroupPtrInput
	// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Three or more `recoveryGroup` block defined as below.
	//
	// > **Note:** The `recoveryGroup` block is deprecated in favor of `shutdownRecoveryGroup`, `failoverRecoveryGroup` and `bootRecoveryGroup`. It will be removed in v4.0 of the Azure Provider.
	//
	// Deprecated: the `recovery_group` block has been deprecated in favour of the `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group` and will be removed in version 4.0 of the provider.
	RecoveryGroups ReplicationRecoveryPlanRecoveryGroupArrayInput
	// The ID of the vault that should be updated. Changing this forces a new resource to be created.
	RecoveryVaultId pulumi.StringInput
	// One `shutdownRecoveryGroup` block as defined below.
	//
	// > **NOTE:** `shutdownRecoveryGroup` will be required in the next major version of the AzureRM Provider.
	ShutdownRecoveryGroup ReplicationRecoveryPlanShutdownRecoveryGroupPtrInput
	// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
	SourceRecoveryFabricId pulumi.StringInput
	// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
	TargetRecoveryFabricId pulumi.StringInput
}

func (ReplicationRecoveryPlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicationRecoveryPlanArgs)(nil)).Elem()
}

type ReplicationRecoveryPlanInput interface {
	pulumi.Input

	ToReplicationRecoveryPlanOutput() ReplicationRecoveryPlanOutput
	ToReplicationRecoveryPlanOutputWithContext(ctx context.Context) ReplicationRecoveryPlanOutput
}

func (*ReplicationRecoveryPlan) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationRecoveryPlan)(nil)).Elem()
}

func (i *ReplicationRecoveryPlan) ToReplicationRecoveryPlanOutput() ReplicationRecoveryPlanOutput {
	return i.ToReplicationRecoveryPlanOutputWithContext(context.Background())
}

func (i *ReplicationRecoveryPlan) ToReplicationRecoveryPlanOutputWithContext(ctx context.Context) ReplicationRecoveryPlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationRecoveryPlanOutput)
}

// ReplicationRecoveryPlanArrayInput is an input type that accepts ReplicationRecoveryPlanArray and ReplicationRecoveryPlanArrayOutput values.
// You can construct a concrete instance of `ReplicationRecoveryPlanArrayInput` via:
//
//	ReplicationRecoveryPlanArray{ ReplicationRecoveryPlanArgs{...} }
type ReplicationRecoveryPlanArrayInput interface {
	pulumi.Input

	ToReplicationRecoveryPlanArrayOutput() ReplicationRecoveryPlanArrayOutput
	ToReplicationRecoveryPlanArrayOutputWithContext(context.Context) ReplicationRecoveryPlanArrayOutput
}

type ReplicationRecoveryPlanArray []ReplicationRecoveryPlanInput

func (ReplicationRecoveryPlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicationRecoveryPlan)(nil)).Elem()
}

func (i ReplicationRecoveryPlanArray) ToReplicationRecoveryPlanArrayOutput() ReplicationRecoveryPlanArrayOutput {
	return i.ToReplicationRecoveryPlanArrayOutputWithContext(context.Background())
}

func (i ReplicationRecoveryPlanArray) ToReplicationRecoveryPlanArrayOutputWithContext(ctx context.Context) ReplicationRecoveryPlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationRecoveryPlanArrayOutput)
}

// ReplicationRecoveryPlanMapInput is an input type that accepts ReplicationRecoveryPlanMap and ReplicationRecoveryPlanMapOutput values.
// You can construct a concrete instance of `ReplicationRecoveryPlanMapInput` via:
//
//	ReplicationRecoveryPlanMap{ "key": ReplicationRecoveryPlanArgs{...} }
type ReplicationRecoveryPlanMapInput interface {
	pulumi.Input

	ToReplicationRecoveryPlanMapOutput() ReplicationRecoveryPlanMapOutput
	ToReplicationRecoveryPlanMapOutputWithContext(context.Context) ReplicationRecoveryPlanMapOutput
}

type ReplicationRecoveryPlanMap map[string]ReplicationRecoveryPlanInput

func (ReplicationRecoveryPlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicationRecoveryPlan)(nil)).Elem()
}

func (i ReplicationRecoveryPlanMap) ToReplicationRecoveryPlanMapOutput() ReplicationRecoveryPlanMapOutput {
	return i.ToReplicationRecoveryPlanMapOutputWithContext(context.Background())
}

func (i ReplicationRecoveryPlanMap) ToReplicationRecoveryPlanMapOutputWithContext(ctx context.Context) ReplicationRecoveryPlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicationRecoveryPlanMapOutput)
}

type ReplicationRecoveryPlanOutput struct{ *pulumi.OutputState }

func (ReplicationRecoveryPlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicationRecoveryPlan)(nil)).Elem()
}

func (o ReplicationRecoveryPlanOutput) ToReplicationRecoveryPlanOutput() ReplicationRecoveryPlanOutput {
	return o
}

func (o ReplicationRecoveryPlanOutput) ToReplicationRecoveryPlanOutputWithContext(ctx context.Context) ReplicationRecoveryPlanOutput {
	return o
}

// An `azureToAzureSettings` block as defined below.
func (o ReplicationRecoveryPlanOutput) AzureToAzureSettings() ReplicationRecoveryPlanAzureToAzureSettingsPtrOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) ReplicationRecoveryPlanAzureToAzureSettingsPtrOutput {
		return v.AzureToAzureSettings
	}).(ReplicationRecoveryPlanAzureToAzureSettingsPtrOutput)
}

// One or more `bootRecoveryGroup` blocks as defined below.
//
// > **NOTE:** At least one `bootRecoveryGroup` block will be required in the next major version of the AzureRM Provider.
func (o ReplicationRecoveryPlanOutput) BootRecoveryGroups() ReplicationRecoveryPlanBootRecoveryGroupArrayOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) ReplicationRecoveryPlanBootRecoveryGroupArrayOutput {
		return v.BootRecoveryGroups
	}).(ReplicationRecoveryPlanBootRecoveryGroupArrayOutput)
}

// One `failoverRecoveryGroup` block as defined below.
//
// > **NOTE:** `failoverRecoveryGroup` will be required in the next major version of the AzureRM Provider.
func (o ReplicationRecoveryPlanOutput) FailoverRecoveryGroup() ReplicationRecoveryPlanFailoverRecoveryGroupOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) ReplicationRecoveryPlanFailoverRecoveryGroupOutput {
		return v.FailoverRecoveryGroup
	}).(ReplicationRecoveryPlanFailoverRecoveryGroupOutput)
}

// The name of the Replication Plan. The name can contain only letters, numbers, and hyphens. It should start with a letter and end with a letter or a number. Can be a maximum of 63 characters. Changing this forces a new resource to be created.
func (o ReplicationRecoveryPlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Three or more `recoveryGroup` block defined as below.
//
// > **Note:** The `recoveryGroup` block is deprecated in favor of `shutdownRecoveryGroup`, `failoverRecoveryGroup` and `bootRecoveryGroup`. It will be removed in v4.0 of the Azure Provider.
//
// Deprecated: the `recovery_group` block has been deprecated in favour of the `shutdown_recovery_group`, `failover_recovery_group` and `boot_recovery_group` and will be removed in version 4.0 of the provider.
func (o ReplicationRecoveryPlanOutput) RecoveryGroups() ReplicationRecoveryPlanRecoveryGroupArrayOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) ReplicationRecoveryPlanRecoveryGroupArrayOutput {
		return v.RecoveryGroups
	}).(ReplicationRecoveryPlanRecoveryGroupArrayOutput)
}

// The ID of the vault that should be updated. Changing this forces a new resource to be created.
func (o ReplicationRecoveryPlanOutput) RecoveryVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) pulumi.StringOutput { return v.RecoveryVaultId }).(pulumi.StringOutput)
}

// One `shutdownRecoveryGroup` block as defined below.
//
// > **NOTE:** `shutdownRecoveryGroup` will be required in the next major version of the AzureRM Provider.
func (o ReplicationRecoveryPlanOutput) ShutdownRecoveryGroup() ReplicationRecoveryPlanShutdownRecoveryGroupOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) ReplicationRecoveryPlanShutdownRecoveryGroupOutput {
		return v.ShutdownRecoveryGroup
	}).(ReplicationRecoveryPlanShutdownRecoveryGroupOutput)
}

// ID of source fabric to be recovered from. Changing this forces a new Replication Plan to be created.
func (o ReplicationRecoveryPlanOutput) SourceRecoveryFabricId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) pulumi.StringOutput { return v.SourceRecoveryFabricId }).(pulumi.StringOutput)
}

// ID of target fabric to recover. Changing this forces a new Replication Plan to be created.
func (o ReplicationRecoveryPlanOutput) TargetRecoveryFabricId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicationRecoveryPlan) pulumi.StringOutput { return v.TargetRecoveryFabricId }).(pulumi.StringOutput)
}

type ReplicationRecoveryPlanArrayOutput struct{ *pulumi.OutputState }

func (ReplicationRecoveryPlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicationRecoveryPlan)(nil)).Elem()
}

func (o ReplicationRecoveryPlanArrayOutput) ToReplicationRecoveryPlanArrayOutput() ReplicationRecoveryPlanArrayOutput {
	return o
}

func (o ReplicationRecoveryPlanArrayOutput) ToReplicationRecoveryPlanArrayOutputWithContext(ctx context.Context) ReplicationRecoveryPlanArrayOutput {
	return o
}

func (o ReplicationRecoveryPlanArrayOutput) Index(i pulumi.IntInput) ReplicationRecoveryPlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplicationRecoveryPlan {
		return vs[0].([]*ReplicationRecoveryPlan)[vs[1].(int)]
	}).(ReplicationRecoveryPlanOutput)
}

type ReplicationRecoveryPlanMapOutput struct{ *pulumi.OutputState }

func (ReplicationRecoveryPlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicationRecoveryPlan)(nil)).Elem()
}

func (o ReplicationRecoveryPlanMapOutput) ToReplicationRecoveryPlanMapOutput() ReplicationRecoveryPlanMapOutput {
	return o
}

func (o ReplicationRecoveryPlanMapOutput) ToReplicationRecoveryPlanMapOutputWithContext(ctx context.Context) ReplicationRecoveryPlanMapOutput {
	return o
}

func (o ReplicationRecoveryPlanMapOutput) MapIndex(k pulumi.StringInput) ReplicationRecoveryPlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplicationRecoveryPlan {
		return vs[0].(map[string]*ReplicationRecoveryPlan)[vs[1].(string)]
	}).(ReplicationRecoveryPlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationRecoveryPlanInput)(nil)).Elem(), &ReplicationRecoveryPlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationRecoveryPlanArrayInput)(nil)).Elem(), ReplicationRecoveryPlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicationRecoveryPlanMapInput)(nil)).Elem(), ReplicationRecoveryPlanMap{})
	pulumi.RegisterOutputType(ReplicationRecoveryPlanOutput{})
	pulumi.RegisterOutputType(ReplicationRecoveryPlanArrayOutput{})
	pulumi.RegisterOutputType(ReplicationRecoveryPlanMapOutput{})
}
