// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfunction

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Network Function Collector Policy.
//
// ## Import
//
// Network Function Collector Policy can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:networkfunction/collectorPolicy:CollectorPolicy example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.NetworkFunction/azureTrafficCollectors/azureTrafficCollector1/collectorPolicies/collectorPolicy1
//
// ```
type CollectorPolicy struct {
	pulumi.CustomResourceState

	// An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxEmission CollectorPolicyIpfxEmissionOutput `pulumi:"ipfxEmission"`
	// An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxIngestion CollectorPolicyIpfxIngestionOutput `pulumi:"ipfxIngestion"`
	// Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A mapping of tags which should be assigned to the Network Function Collector Policy.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	TrafficCollectorId pulumi.StringOutput `pulumi:"trafficCollectorId"`
}

// NewCollectorPolicy registers a new resource with the given unique name, arguments, and options.
func NewCollectorPolicy(ctx *pulumi.Context,
	name string, args *CollectorPolicyArgs, opts ...pulumi.ResourceOption) (*CollectorPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpfxEmission == nil {
		return nil, errors.New("invalid value for required argument 'IpfxEmission'")
	}
	if args.IpfxIngestion == nil {
		return nil, errors.New("invalid value for required argument 'IpfxIngestion'")
	}
	if args.TrafficCollectorId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficCollectorId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CollectorPolicy
	err := ctx.RegisterResource("azure:networkfunction/collectorPolicy:CollectorPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCollectorPolicy gets an existing CollectorPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCollectorPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CollectorPolicyState, opts ...pulumi.ResourceOption) (*CollectorPolicy, error) {
	var resource CollectorPolicy
	err := ctx.ReadResource("azure:networkfunction/collectorPolicy:CollectorPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CollectorPolicy resources.
type collectorPolicyState struct {
	// An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxEmission *CollectorPolicyIpfxEmission `pulumi:"ipfxEmission"`
	// An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxIngestion *CollectorPolicyIpfxIngestion `pulumi:"ipfxIngestion"`
	// Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Network Function Collector Policy.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	TrafficCollectorId *string `pulumi:"trafficCollectorId"`
}

type CollectorPolicyState struct {
	// An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxEmission CollectorPolicyIpfxEmissionPtrInput
	// An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxIngestion CollectorPolicyIpfxIngestionPtrInput
	// Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Network Function Collector Policy.
	Tags pulumi.StringMapInput
	// Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	TrafficCollectorId pulumi.StringPtrInput
}

func (CollectorPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*collectorPolicyState)(nil)).Elem()
}

type collectorPolicyArgs struct {
	// An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxEmission CollectorPolicyIpfxEmission `pulumi:"ipfxEmission"`
	// An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxIngestion CollectorPolicyIpfxIngestion `pulumi:"ipfxIngestion"`
	// Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
	Location *string `pulumi:"location"`
	// Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags which should be assigned to the Network Function Collector Policy.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	TrafficCollectorId string `pulumi:"trafficCollectorId"`
}

// The set of arguments for constructing a CollectorPolicy resource.
type CollectorPolicyArgs struct {
	// An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxEmission CollectorPolicyIpfxEmissionInput
	// An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
	IpfxIngestion CollectorPolicyIpfxIngestionInput
	// Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
	Location pulumi.StringPtrInput
	// Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Network Function Collector Policy.
	Tags pulumi.StringMapInput
	// Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
	TrafficCollectorId pulumi.StringInput
}

func (CollectorPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*collectorPolicyArgs)(nil)).Elem()
}

type CollectorPolicyInput interface {
	pulumi.Input

	ToCollectorPolicyOutput() CollectorPolicyOutput
	ToCollectorPolicyOutputWithContext(ctx context.Context) CollectorPolicyOutput
}

func (*CollectorPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectorPolicy)(nil)).Elem()
}

func (i *CollectorPolicy) ToCollectorPolicyOutput() CollectorPolicyOutput {
	return i.ToCollectorPolicyOutputWithContext(context.Background())
}

func (i *CollectorPolicy) ToCollectorPolicyOutputWithContext(ctx context.Context) CollectorPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyOutput)
}

// CollectorPolicyArrayInput is an input type that accepts CollectorPolicyArray and CollectorPolicyArrayOutput values.
// You can construct a concrete instance of `CollectorPolicyArrayInput` via:
//
//	CollectorPolicyArray{ CollectorPolicyArgs{...} }
type CollectorPolicyArrayInput interface {
	pulumi.Input

	ToCollectorPolicyArrayOutput() CollectorPolicyArrayOutput
	ToCollectorPolicyArrayOutputWithContext(context.Context) CollectorPolicyArrayOutput
}

type CollectorPolicyArray []CollectorPolicyInput

func (CollectorPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CollectorPolicy)(nil)).Elem()
}

func (i CollectorPolicyArray) ToCollectorPolicyArrayOutput() CollectorPolicyArrayOutput {
	return i.ToCollectorPolicyArrayOutputWithContext(context.Background())
}

func (i CollectorPolicyArray) ToCollectorPolicyArrayOutputWithContext(ctx context.Context) CollectorPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyArrayOutput)
}

// CollectorPolicyMapInput is an input type that accepts CollectorPolicyMap and CollectorPolicyMapOutput values.
// You can construct a concrete instance of `CollectorPolicyMapInput` via:
//
//	CollectorPolicyMap{ "key": CollectorPolicyArgs{...} }
type CollectorPolicyMapInput interface {
	pulumi.Input

	ToCollectorPolicyMapOutput() CollectorPolicyMapOutput
	ToCollectorPolicyMapOutputWithContext(context.Context) CollectorPolicyMapOutput
}

type CollectorPolicyMap map[string]CollectorPolicyInput

func (CollectorPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CollectorPolicy)(nil)).Elem()
}

func (i CollectorPolicyMap) ToCollectorPolicyMapOutput() CollectorPolicyMapOutput {
	return i.ToCollectorPolicyMapOutputWithContext(context.Background())
}

func (i CollectorPolicyMap) ToCollectorPolicyMapOutputWithContext(ctx context.Context) CollectorPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyMapOutput)
}

type CollectorPolicyOutput struct{ *pulumi.OutputState }

func (CollectorPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectorPolicy)(nil)).Elem()
}

func (o CollectorPolicyOutput) ToCollectorPolicyOutput() CollectorPolicyOutput {
	return o
}

func (o CollectorPolicyOutput) ToCollectorPolicyOutputWithContext(ctx context.Context) CollectorPolicyOutput {
	return o
}

// An `ipfxEmission` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyOutput) IpfxEmission() CollectorPolicyIpfxEmissionOutput {
	return o.ApplyT(func(v *CollectorPolicy) CollectorPolicyIpfxEmissionOutput { return v.IpfxEmission }).(CollectorPolicyIpfxEmissionOutput)
}

// An `ipfxIngestion` block as defined below. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyOutput) IpfxIngestion() CollectorPolicyIpfxIngestionOutput {
	return o.ApplyT(func(v *CollectorPolicy) CollectorPolicyIpfxIngestionOutput { return v.IpfxIngestion }).(CollectorPolicyIpfxIngestionOutput)
}

// Specifies the Azure Region where the Network Function Collector Policy should exist. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *CollectorPolicy) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name which should be used for this Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CollectorPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Network Function Collector Policy.
func (o CollectorPolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *CollectorPolicy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Specifies the Azure Traffic Collector ID of the Network Function Collector Policy. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyOutput) TrafficCollectorId() pulumi.StringOutput {
	return o.ApplyT(func(v *CollectorPolicy) pulumi.StringOutput { return v.TrafficCollectorId }).(pulumi.StringOutput)
}

type CollectorPolicyArrayOutput struct{ *pulumi.OutputState }

func (CollectorPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CollectorPolicy)(nil)).Elem()
}

func (o CollectorPolicyArrayOutput) ToCollectorPolicyArrayOutput() CollectorPolicyArrayOutput {
	return o
}

func (o CollectorPolicyArrayOutput) ToCollectorPolicyArrayOutputWithContext(ctx context.Context) CollectorPolicyArrayOutput {
	return o
}

func (o CollectorPolicyArrayOutput) Index(i pulumi.IntInput) CollectorPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CollectorPolicy {
		return vs[0].([]*CollectorPolicy)[vs[1].(int)]
	}).(CollectorPolicyOutput)
}

type CollectorPolicyMapOutput struct{ *pulumi.OutputState }

func (CollectorPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CollectorPolicy)(nil)).Elem()
}

func (o CollectorPolicyMapOutput) ToCollectorPolicyMapOutput() CollectorPolicyMapOutput {
	return o
}

func (o CollectorPolicyMapOutput) ToCollectorPolicyMapOutputWithContext(ctx context.Context) CollectorPolicyMapOutput {
	return o
}

func (o CollectorPolicyMapOutput) MapIndex(k pulumi.StringInput) CollectorPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CollectorPolicy {
		return vs[0].(map[string]*CollectorPolicy)[vs[1].(string)]
	}).(CollectorPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorPolicyInput)(nil)).Elem(), &CollectorPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorPolicyArrayInput)(nil)).Elem(), CollectorPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorPolicyMapInput)(nil)).Elem(), CollectorPolicyMap{})
	pulumi.RegisterOutputType(CollectorPolicyOutput{})
	pulumi.RegisterOutputType(CollectorPolicyArrayOutput{})
	pulumi.RegisterOutputType(CollectorPolicyMapOutput{})
}
