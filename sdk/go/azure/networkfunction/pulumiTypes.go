// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package networkfunction

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CollectorPolicyIpfxEmission struct {
	// A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
	DestinationTypes string `pulumi:"destinationTypes"`
}

// CollectorPolicyIpfxEmissionInput is an input type that accepts CollectorPolicyIpfxEmissionArgs and CollectorPolicyIpfxEmissionOutput values.
// You can construct a concrete instance of `CollectorPolicyIpfxEmissionInput` via:
//
//	CollectorPolicyIpfxEmissionArgs{...}
type CollectorPolicyIpfxEmissionInput interface {
	pulumi.Input

	ToCollectorPolicyIpfxEmissionOutput() CollectorPolicyIpfxEmissionOutput
	ToCollectorPolicyIpfxEmissionOutputWithContext(context.Context) CollectorPolicyIpfxEmissionOutput
}

type CollectorPolicyIpfxEmissionArgs struct {
	// A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
	DestinationTypes pulumi.StringInput `pulumi:"destinationTypes"`
}

func (CollectorPolicyIpfxEmissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectorPolicyIpfxEmission)(nil)).Elem()
}

func (i CollectorPolicyIpfxEmissionArgs) ToCollectorPolicyIpfxEmissionOutput() CollectorPolicyIpfxEmissionOutput {
	return i.ToCollectorPolicyIpfxEmissionOutputWithContext(context.Background())
}

func (i CollectorPolicyIpfxEmissionArgs) ToCollectorPolicyIpfxEmissionOutputWithContext(ctx context.Context) CollectorPolicyIpfxEmissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyIpfxEmissionOutput)
}

func (i CollectorPolicyIpfxEmissionArgs) ToCollectorPolicyIpfxEmissionPtrOutput() CollectorPolicyIpfxEmissionPtrOutput {
	return i.ToCollectorPolicyIpfxEmissionPtrOutputWithContext(context.Background())
}

func (i CollectorPolicyIpfxEmissionArgs) ToCollectorPolicyIpfxEmissionPtrOutputWithContext(ctx context.Context) CollectorPolicyIpfxEmissionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyIpfxEmissionOutput).ToCollectorPolicyIpfxEmissionPtrOutputWithContext(ctx)
}

// CollectorPolicyIpfxEmissionPtrInput is an input type that accepts CollectorPolicyIpfxEmissionArgs, CollectorPolicyIpfxEmissionPtr and CollectorPolicyIpfxEmissionPtrOutput values.
// You can construct a concrete instance of `CollectorPolicyIpfxEmissionPtrInput` via:
//
//	        CollectorPolicyIpfxEmissionArgs{...}
//
//	or:
//
//	        nil
type CollectorPolicyIpfxEmissionPtrInput interface {
	pulumi.Input

	ToCollectorPolicyIpfxEmissionPtrOutput() CollectorPolicyIpfxEmissionPtrOutput
	ToCollectorPolicyIpfxEmissionPtrOutputWithContext(context.Context) CollectorPolicyIpfxEmissionPtrOutput
}

type collectorPolicyIpfxEmissionPtrType CollectorPolicyIpfxEmissionArgs

func CollectorPolicyIpfxEmissionPtr(v *CollectorPolicyIpfxEmissionArgs) CollectorPolicyIpfxEmissionPtrInput {
	return (*collectorPolicyIpfxEmissionPtrType)(v)
}

func (*collectorPolicyIpfxEmissionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectorPolicyIpfxEmission)(nil)).Elem()
}

func (i *collectorPolicyIpfxEmissionPtrType) ToCollectorPolicyIpfxEmissionPtrOutput() CollectorPolicyIpfxEmissionPtrOutput {
	return i.ToCollectorPolicyIpfxEmissionPtrOutputWithContext(context.Background())
}

func (i *collectorPolicyIpfxEmissionPtrType) ToCollectorPolicyIpfxEmissionPtrOutputWithContext(ctx context.Context) CollectorPolicyIpfxEmissionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyIpfxEmissionPtrOutput)
}

type CollectorPolicyIpfxEmissionOutput struct{ *pulumi.OutputState }

func (CollectorPolicyIpfxEmissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectorPolicyIpfxEmission)(nil)).Elem()
}

func (o CollectorPolicyIpfxEmissionOutput) ToCollectorPolicyIpfxEmissionOutput() CollectorPolicyIpfxEmissionOutput {
	return o
}

func (o CollectorPolicyIpfxEmissionOutput) ToCollectorPolicyIpfxEmissionOutputWithContext(ctx context.Context) CollectorPolicyIpfxEmissionOutput {
	return o
}

func (o CollectorPolicyIpfxEmissionOutput) ToCollectorPolicyIpfxEmissionPtrOutput() CollectorPolicyIpfxEmissionPtrOutput {
	return o.ToCollectorPolicyIpfxEmissionPtrOutputWithContext(context.Background())
}

func (o CollectorPolicyIpfxEmissionOutput) ToCollectorPolicyIpfxEmissionPtrOutputWithContext(ctx context.Context) CollectorPolicyIpfxEmissionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CollectorPolicyIpfxEmission) *CollectorPolicyIpfxEmission {
		return &v
	}).(CollectorPolicyIpfxEmissionPtrOutput)
}

// A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyIpfxEmissionOutput) DestinationTypes() pulumi.StringOutput {
	return o.ApplyT(func(v CollectorPolicyIpfxEmission) string { return v.DestinationTypes }).(pulumi.StringOutput)
}

type CollectorPolicyIpfxEmissionPtrOutput struct{ *pulumi.OutputState }

func (CollectorPolicyIpfxEmissionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectorPolicyIpfxEmission)(nil)).Elem()
}

func (o CollectorPolicyIpfxEmissionPtrOutput) ToCollectorPolicyIpfxEmissionPtrOutput() CollectorPolicyIpfxEmissionPtrOutput {
	return o
}

func (o CollectorPolicyIpfxEmissionPtrOutput) ToCollectorPolicyIpfxEmissionPtrOutputWithContext(ctx context.Context) CollectorPolicyIpfxEmissionPtrOutput {
	return o
}

func (o CollectorPolicyIpfxEmissionPtrOutput) Elem() CollectorPolicyIpfxEmissionOutput {
	return o.ApplyT(func(v *CollectorPolicyIpfxEmission) CollectorPolicyIpfxEmission {
		if v != nil {
			return *v
		}
		var ret CollectorPolicyIpfxEmission
		return ret
	}).(CollectorPolicyIpfxEmissionOutput)
}

// A list of emission destination types. The only possible value is `AzureMonitor`. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyIpfxEmissionPtrOutput) DestinationTypes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CollectorPolicyIpfxEmission) *string {
		if v == nil {
			return nil
		}
		return &v.DestinationTypes
	}).(pulumi.StringPtrOutput)
}

type CollectorPolicyIpfxIngestion struct {
	// A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
	SourceResourceIds []string `pulumi:"sourceResourceIds"`
}

// CollectorPolicyIpfxIngestionInput is an input type that accepts CollectorPolicyIpfxIngestionArgs and CollectorPolicyIpfxIngestionOutput values.
// You can construct a concrete instance of `CollectorPolicyIpfxIngestionInput` via:
//
//	CollectorPolicyIpfxIngestionArgs{...}
type CollectorPolicyIpfxIngestionInput interface {
	pulumi.Input

	ToCollectorPolicyIpfxIngestionOutput() CollectorPolicyIpfxIngestionOutput
	ToCollectorPolicyIpfxIngestionOutputWithContext(context.Context) CollectorPolicyIpfxIngestionOutput
}

type CollectorPolicyIpfxIngestionArgs struct {
	// A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
	SourceResourceIds pulumi.StringArrayInput `pulumi:"sourceResourceIds"`
}

func (CollectorPolicyIpfxIngestionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectorPolicyIpfxIngestion)(nil)).Elem()
}

func (i CollectorPolicyIpfxIngestionArgs) ToCollectorPolicyIpfxIngestionOutput() CollectorPolicyIpfxIngestionOutput {
	return i.ToCollectorPolicyIpfxIngestionOutputWithContext(context.Background())
}

func (i CollectorPolicyIpfxIngestionArgs) ToCollectorPolicyIpfxIngestionOutputWithContext(ctx context.Context) CollectorPolicyIpfxIngestionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyIpfxIngestionOutput)
}

func (i CollectorPolicyIpfxIngestionArgs) ToCollectorPolicyIpfxIngestionPtrOutput() CollectorPolicyIpfxIngestionPtrOutput {
	return i.ToCollectorPolicyIpfxIngestionPtrOutputWithContext(context.Background())
}

func (i CollectorPolicyIpfxIngestionArgs) ToCollectorPolicyIpfxIngestionPtrOutputWithContext(ctx context.Context) CollectorPolicyIpfxIngestionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyIpfxIngestionOutput).ToCollectorPolicyIpfxIngestionPtrOutputWithContext(ctx)
}

// CollectorPolicyIpfxIngestionPtrInput is an input type that accepts CollectorPolicyIpfxIngestionArgs, CollectorPolicyIpfxIngestionPtr and CollectorPolicyIpfxIngestionPtrOutput values.
// You can construct a concrete instance of `CollectorPolicyIpfxIngestionPtrInput` via:
//
//	        CollectorPolicyIpfxIngestionArgs{...}
//
//	or:
//
//	        nil
type CollectorPolicyIpfxIngestionPtrInput interface {
	pulumi.Input

	ToCollectorPolicyIpfxIngestionPtrOutput() CollectorPolicyIpfxIngestionPtrOutput
	ToCollectorPolicyIpfxIngestionPtrOutputWithContext(context.Context) CollectorPolicyIpfxIngestionPtrOutput
}

type collectorPolicyIpfxIngestionPtrType CollectorPolicyIpfxIngestionArgs

func CollectorPolicyIpfxIngestionPtr(v *CollectorPolicyIpfxIngestionArgs) CollectorPolicyIpfxIngestionPtrInput {
	return (*collectorPolicyIpfxIngestionPtrType)(v)
}

func (*collectorPolicyIpfxIngestionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectorPolicyIpfxIngestion)(nil)).Elem()
}

func (i *collectorPolicyIpfxIngestionPtrType) ToCollectorPolicyIpfxIngestionPtrOutput() CollectorPolicyIpfxIngestionPtrOutput {
	return i.ToCollectorPolicyIpfxIngestionPtrOutputWithContext(context.Background())
}

func (i *collectorPolicyIpfxIngestionPtrType) ToCollectorPolicyIpfxIngestionPtrOutputWithContext(ctx context.Context) CollectorPolicyIpfxIngestionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CollectorPolicyIpfxIngestionPtrOutput)
}

type CollectorPolicyIpfxIngestionOutput struct{ *pulumi.OutputState }

func (CollectorPolicyIpfxIngestionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CollectorPolicyIpfxIngestion)(nil)).Elem()
}

func (o CollectorPolicyIpfxIngestionOutput) ToCollectorPolicyIpfxIngestionOutput() CollectorPolicyIpfxIngestionOutput {
	return o
}

func (o CollectorPolicyIpfxIngestionOutput) ToCollectorPolicyIpfxIngestionOutputWithContext(ctx context.Context) CollectorPolicyIpfxIngestionOutput {
	return o
}

func (o CollectorPolicyIpfxIngestionOutput) ToCollectorPolicyIpfxIngestionPtrOutput() CollectorPolicyIpfxIngestionPtrOutput {
	return o.ToCollectorPolicyIpfxIngestionPtrOutputWithContext(context.Background())
}

func (o CollectorPolicyIpfxIngestionOutput) ToCollectorPolicyIpfxIngestionPtrOutputWithContext(ctx context.Context) CollectorPolicyIpfxIngestionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CollectorPolicyIpfxIngestion) *CollectorPolicyIpfxIngestion {
		return &v
	}).(CollectorPolicyIpfxIngestionPtrOutput)
}

// A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyIpfxIngestionOutput) SourceResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CollectorPolicyIpfxIngestion) []string { return v.SourceResourceIds }).(pulumi.StringArrayOutput)
}

type CollectorPolicyIpfxIngestionPtrOutput struct{ *pulumi.OutputState }

func (CollectorPolicyIpfxIngestionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CollectorPolicyIpfxIngestion)(nil)).Elem()
}

func (o CollectorPolicyIpfxIngestionPtrOutput) ToCollectorPolicyIpfxIngestionPtrOutput() CollectorPolicyIpfxIngestionPtrOutput {
	return o
}

func (o CollectorPolicyIpfxIngestionPtrOutput) ToCollectorPolicyIpfxIngestionPtrOutputWithContext(ctx context.Context) CollectorPolicyIpfxIngestionPtrOutput {
	return o
}

func (o CollectorPolicyIpfxIngestionPtrOutput) Elem() CollectorPolicyIpfxIngestionOutput {
	return o.ApplyT(func(v *CollectorPolicyIpfxIngestion) CollectorPolicyIpfxIngestion {
		if v != nil {
			return *v
		}
		var ret CollectorPolicyIpfxIngestion
		return ret
	}).(CollectorPolicyIpfxIngestionOutput)
}

// A list of ingestion source resource IDs. Changing this forces a new Network Function Collector Policy to be created.
func (o CollectorPolicyIpfxIngestionPtrOutput) SourceResourceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CollectorPolicyIpfxIngestion) []string {
		if v == nil {
			return nil
		}
		return v.SourceResourceIds
	}).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorPolicyIpfxEmissionInput)(nil)).Elem(), CollectorPolicyIpfxEmissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorPolicyIpfxEmissionPtrInput)(nil)).Elem(), CollectorPolicyIpfxEmissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorPolicyIpfxIngestionInput)(nil)).Elem(), CollectorPolicyIpfxIngestionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CollectorPolicyIpfxIngestionPtrInput)(nil)).Elem(), CollectorPolicyIpfxIngestionArgs{})
	pulumi.RegisterOutputType(CollectorPolicyIpfxEmissionOutput{})
	pulumi.RegisterOutputType(CollectorPolicyIpfxEmissionPtrOutput{})
	pulumi.RegisterOutputType(CollectorPolicyIpfxIngestionOutput{})
	pulumi.RegisterOutputType(CollectorPolicyIpfxIngestionPtrOutput{})
}
