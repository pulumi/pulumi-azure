// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package analysisservices

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Analysis Services Server.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/analysis_services_server.html.markdown.
type Server struct {
	s *pulumi.ResourceState
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOpt) (*Server, error) {
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sku == nil {
		return nil, errors.New("missing required argument 'Sku'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminUsers"] = nil
		inputs["backupBlobContainerUri"] = nil
		inputs["enablePowerBiService"] = nil
		inputs["ipv4FirewallRules"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["querypoolConnectionMode"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sku"] = nil
		inputs["tags"] = nil
	} else {
		inputs["adminUsers"] = args.AdminUsers
		inputs["backupBlobContainerUri"] = args.BackupBlobContainerUri
		inputs["enablePowerBiService"] = args.EnablePowerBiService
		inputs["ipv4FirewallRules"] = args.Ipv4FirewallRules
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["querypoolConnectionMode"] = args.QuerypoolConnectionMode
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sku"] = args.Sku
		inputs["tags"] = args.Tags
	}
	inputs["serverFullName"] = nil
	s, err := ctx.RegisterResource("azure:analysisservices/server:Server", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Server{s: s}, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerState, opts ...pulumi.ResourceOpt) (*Server, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminUsers"] = state.AdminUsers
		inputs["backupBlobContainerUri"] = state.BackupBlobContainerUri
		inputs["enablePowerBiService"] = state.EnablePowerBiService
		inputs["ipv4FirewallRules"] = state.Ipv4FirewallRules
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["querypoolConnectionMode"] = state.QuerypoolConnectionMode
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["serverFullName"] = state.ServerFullName
		inputs["sku"] = state.Sku
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:analysisservices/server:Server", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Server{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Server) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Server) ID() pulumi.IDOutput {
	return r.s.ID()
}

// List of email addresses of admin users.
func (r *Server) AdminUsers() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["adminUsers"])
}

// URI and SAS token for a blob container to store backups.
func (r *Server) BackupBlobContainerUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["backupBlobContainerUri"])
}

// Indicates if the Power BI service is allowed to access or not.
func (r *Server) EnablePowerBiService() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["enablePowerBiService"])
}

// One or more `ipv4FirewallRule` block(s) as defined below.
func (r *Server) Ipv4FirewallRules() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["ipv4FirewallRules"])
}

// The Azure location where the Analysis Services Server exists. Changing this forces a new resource to be created.
func (r *Server) Location() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["location"])
}

// Specifies the name of the firewall rule.
func (r *Server) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Controls how the read-write server is used in the query pool. If this values is set to `All` then read-write servers are also used for queries. Otherwise with `ReadOnly` these servers do not participate in query operations.
func (r *Server) QuerypoolConnectionMode() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["querypoolConnectionMode"])
}

// The name of the Resource Group in which the Analysis Services Server should be exist. Changing this forces a new resource to be created.
func (r *Server) ResourceGroupName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The full name of the Analysis Services Server.
func (r *Server) ServerFullName() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["serverFullName"])
}

// SKU for the Analysis Services Server. Possible values are: `D1`, `B1`, `B2`, `S0`, `S1`, `S2`, `S4`, `S8` and `S9`
func (r *Server) Sku() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["sku"])
}

func (r *Server) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Server resources.
type ServerState struct {
	// List of email addresses of admin users.
	AdminUsers interface{}
	// URI and SAS token for a blob container to store backups.
	BackupBlobContainerUri interface{}
	// Indicates if the Power BI service is allowed to access or not.
	EnablePowerBiService interface{}
	// One or more `ipv4FirewallRule` block(s) as defined below.
	Ipv4FirewallRules interface{}
	// The Azure location where the Analysis Services Server exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the firewall rule.
	Name interface{}
	// Controls how the read-write server is used in the query pool. If this values is set to `All` then read-write servers are also used for queries. Otherwise with `ReadOnly` these servers do not participate in query operations.
	QuerypoolConnectionMode interface{}
	// The name of the Resource Group in which the Analysis Services Server should be exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The full name of the Analysis Services Server.
	ServerFullName interface{}
	// SKU for the Analysis Services Server. Possible values are: `D1`, `B1`, `B2`, `S0`, `S1`, `S2`, `S4`, `S8` and `S9`
	Sku interface{}
	Tags interface{}
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	// List of email addresses of admin users.
	AdminUsers interface{}
	// URI and SAS token for a blob container to store backups.
	BackupBlobContainerUri interface{}
	// Indicates if the Power BI service is allowed to access or not.
	EnablePowerBiService interface{}
	// One or more `ipv4FirewallRule` block(s) as defined below.
	Ipv4FirewallRules interface{}
	// The Azure location where the Analysis Services Server exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the firewall rule.
	Name interface{}
	// Controls how the read-write server is used in the query pool. If this values is set to `All` then read-write servers are also used for queries. Otherwise with `ReadOnly` these servers do not participate in query operations.
	QuerypoolConnectionMode interface{}
	// The name of the Resource Group in which the Analysis Services Server should be exist. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// SKU for the Analysis Services Server. Possible values are: `D1`, `B1`, `B2`, `S0`, `S1`, `S2`, `S4`, `S8` and `S9`
	Sku interface{}
	Tags interface{}
}
