// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to retrieve a list of certificate names from an existing Key Vault.
func GetCertificates(ctx *pulumi.Context, args *GetCertificatesArgs, opts ...pulumi.InvokeOption) (*GetCertificatesResult, error) {
	var rv GetCertificatesResult
	err := ctx.Invoke("azure:keyvault/getCertificates:getCertificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCertificates.
type GetCertificatesArgs struct {
	// Specifies whether to include certificates which are not completely provisioned. Defaults to true.
	IncludePending *bool `pulumi:"includePending"`
	// Specifies the ID of the Key Vault instance to fetch certificate names from, available on the `keyvault.KeyVault` Data Source / Resource.
	KeyVaultId string `pulumi:"keyVaultId"`
}

// A collection of values returned by getCertificates.
type GetCertificatesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id             string `pulumi:"id"`
	IncludePending *bool  `pulumi:"includePending"`
	// The Key Vault ID.
	KeyVaultId string `pulumi:"keyVaultId"`
	// List containing names of certificates that exist in this Key Vault.
	Names []string `pulumi:"names"`
}

func GetCertificatesOutput(ctx *pulumi.Context, args GetCertificatesOutputArgs, opts ...pulumi.InvokeOption) GetCertificatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCertificatesResult, error) {
			args := v.(GetCertificatesArgs)
			r, err := GetCertificates(ctx, &args, opts...)
			var s GetCertificatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCertificatesResultOutput)
}

// A collection of arguments for invoking getCertificates.
type GetCertificatesOutputArgs struct {
	// Specifies whether to include certificates which are not completely provisioned. Defaults to true.
	IncludePending pulumi.BoolPtrInput `pulumi:"includePending"`
	// Specifies the ID of the Key Vault instance to fetch certificate names from, available on the `keyvault.KeyVault` Data Source / Resource.
	KeyVaultId pulumi.StringInput `pulumi:"keyVaultId"`
}

func (GetCertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesArgs)(nil)).Elem()
}

// A collection of values returned by getCertificates.
type GetCertificatesResultOutput struct{ *pulumi.OutputState }

func (GetCertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesResult)(nil)).Elem()
}

func (o GetCertificatesResultOutput) ToGetCertificatesResultOutput() GetCertificatesResultOutput {
	return o
}

func (o GetCertificatesResultOutput) ToGetCertificatesResultOutputWithContext(ctx context.Context) GetCertificatesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetCertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCertificatesResultOutput) IncludePending() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetCertificatesResult) *bool { return v.IncludePending }).(pulumi.BoolPtrOutput)
}

// The Key Vault ID.
func (o GetCertificatesResultOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesResult) string { return v.KeyVaultId }).(pulumi.StringOutput)
}

// List containing names of certificates that exist in this Key Vault.
func (o GetCertificatesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificatesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCertificatesResultOutput{})
}
