// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Key Vault Managed Hardware Security Module.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/keyvault"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := keyvault.LookupManagedHardwareSecurityModule(ctx, &keyvault.LookupManagedHardwareSecurityModuleArgs{
// 			Name:              "mykeyvaultHsm",
// 			ResourceGroupName: "some-resource-group",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("hsmUri", example.HsmUri)
// 		return nil
// 	})
// }
// ```
func LookupManagedHardwareSecurityModule(ctx *pulumi.Context, args *LookupManagedHardwareSecurityModuleArgs, opts ...pulumi.InvokeOption) (*LookupManagedHardwareSecurityModuleResult, error) {
	var rv LookupManagedHardwareSecurityModuleResult
	err := ctx.Invoke("azure:keyvault/getManagedHardwareSecurityModule:getManagedHardwareSecurityModule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getManagedHardwareSecurityModule.
type LookupManagedHardwareSecurityModuleArgs struct {
	// The name of the Key Vault Managed Hardware Security Module.
	Name string `pulumi:"name"`
	// The name of the Resource Group in which the Key Vault Managed Hardware Security Module exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getManagedHardwareSecurityModule.
type LookupManagedHardwareSecurityModuleResult struct {
	// Specifies a list of administrators object IDs for the key vault Managed Hardware Security Module.
	AdminObjectIds []string `pulumi:"adminObjectIds"`
	// The URI of the Hardware Security Module for performing operations on keys and secrets.
	HsmUri string `pulumi:"hsmUri"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region in which the Key Vault managed Hardware Security Module exists.
	Location string `pulumi:"location"`
	Name     string `pulumi:"name"`
	// Is purge protection enabled on this Key Vault Managed Hardware Security Module?
	PurgeProtectionEnabled bool   `pulumi:"purgeProtectionEnabled"`
	ResourceGroupName      string `pulumi:"resourceGroupName"`
	// The Name of the SKU used for this Key Vault Managed Hardware Security Module.
	SkuName string `pulumi:"skuName"`
	// The number of days that items should be retained for soft-deleted.
	SoftDeleteRetentionDays int `pulumi:"softDeleteRetentionDays"`
	// A mapping of tags assigned to the Key Vault Managed Hardware Security Module.
	Tags map[string]string `pulumi:"tags"`
	// The Azure Active Directory Tenant ID used for authenticating requests to the Key Vault Managed Hardware Security Module.
	TenantId string `pulumi:"tenantId"`
}

func LookupManagedHardwareSecurityModuleOutput(ctx *pulumi.Context, args LookupManagedHardwareSecurityModuleOutputArgs, opts ...pulumi.InvokeOption) LookupManagedHardwareSecurityModuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupManagedHardwareSecurityModuleResult, error) {
			args := v.(LookupManagedHardwareSecurityModuleArgs)
			r, err := LookupManagedHardwareSecurityModule(ctx, &args, opts...)
			return *r, err
		}).(LookupManagedHardwareSecurityModuleResultOutput)
}

// A collection of arguments for invoking getManagedHardwareSecurityModule.
type LookupManagedHardwareSecurityModuleOutputArgs struct {
	// The name of the Key Vault Managed Hardware Security Module.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group in which the Key Vault Managed Hardware Security Module exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupManagedHardwareSecurityModuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedHardwareSecurityModuleArgs)(nil)).Elem()
}

// A collection of values returned by getManagedHardwareSecurityModule.
type LookupManagedHardwareSecurityModuleResultOutput struct{ *pulumi.OutputState }

func (LookupManagedHardwareSecurityModuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupManagedHardwareSecurityModuleResult)(nil)).Elem()
}

func (o LookupManagedHardwareSecurityModuleResultOutput) ToLookupManagedHardwareSecurityModuleResultOutput() LookupManagedHardwareSecurityModuleResultOutput {
	return o
}

func (o LookupManagedHardwareSecurityModuleResultOutput) ToLookupManagedHardwareSecurityModuleResultOutputWithContext(ctx context.Context) LookupManagedHardwareSecurityModuleResultOutput {
	return o
}

// Specifies a list of administrators object IDs for the key vault Managed Hardware Security Module.
func (o LookupManagedHardwareSecurityModuleResultOutput) AdminObjectIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) []string { return v.AdminObjectIds }).(pulumi.StringArrayOutput)
}

// The URI of the Hardware Security Module for performing operations on keys and secrets.
func (o LookupManagedHardwareSecurityModuleResultOutput) HsmUri() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) string { return v.HsmUri }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupManagedHardwareSecurityModuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region in which the Key Vault managed Hardware Security Module exists.
func (o LookupManagedHardwareSecurityModuleResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupManagedHardwareSecurityModuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// Is purge protection enabled on this Key Vault Managed Hardware Security Module?
func (o LookupManagedHardwareSecurityModuleResultOutput) PurgeProtectionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) bool { return v.PurgeProtectionEnabled }).(pulumi.BoolOutput)
}

func (o LookupManagedHardwareSecurityModuleResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Name of the SKU used for this Key Vault Managed Hardware Security Module.
func (o LookupManagedHardwareSecurityModuleResultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) string { return v.SkuName }).(pulumi.StringOutput)
}

// The number of days that items should be retained for soft-deleted.
func (o LookupManagedHardwareSecurityModuleResultOutput) SoftDeleteRetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) int { return v.SoftDeleteRetentionDays }).(pulumi.IntOutput)
}

// A mapping of tags assigned to the Key Vault Managed Hardware Security Module.
func (o LookupManagedHardwareSecurityModuleResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure Active Directory Tenant ID used for authenticating requests to the Key Vault Managed Hardware Security Module.
func (o LookupManagedHardwareSecurityModuleResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupManagedHardwareSecurityModuleResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupManagedHardwareSecurityModuleResultOutput{})
}
