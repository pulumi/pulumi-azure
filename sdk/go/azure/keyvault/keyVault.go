// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Key Vault.
//
// ## Disclaimers
//
// > **Note:** It's possible to define Key Vault Access Policies both within the `keyvault.KeyVault` resource via the `accessPolicy` block and by using the `keyvault.AccessPolicy` resource. However it's not possible to use both methods to manage Access Policies within a KeyVault, since there'll be conflicts.
//
// > **Note:** It's possible to define Key Vault Certificate Contacts both within the `keyvault.KeyVault` resource via the `contact` block and by using the `keyvault.CertificateContacts` resource. However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:                 exampleResourceGroup.Location,
//				ResourceGroupName:        exampleResourceGroup.Name,
//				EnabledForDiskEncryption: pulumi.Bool(true),
//				TenantId:                 *pulumi.String(current.TenantId),
//				SoftDeleteRetentionDays:  pulumi.Int(7),
//				PurgeProtectionEnabled:   pulumi.Bool(false),
//				SkuName:                  pulumi.String("standard"),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(current.ObjectId),
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//						},
//						StoragePermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Key Vault's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:keyvault/keyVault:KeyVault example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.KeyVault/vaults/vault1
//
// ```
type KeyVault struct {
	pulumi.CustomResourceState

	// A list of up to 1024 objects describing access policies, as described below.
	//
	// > **NOTE** Since `accessPolicy` can be configured both inline and via the separate `keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	AccessPolicies KeyVaultAccessPolicyArrayOutput `pulumi:"accessPolicies"`
	// One or more `contact` block as defined below.
	//
	// > **Note:** This field can only be set once user has `managecontacts` certificate permission.
	Contacts KeyVaultContactArrayOutput `pulumi:"contacts"`
	// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
	EnableRbacAuthorization pulumi.BoolPtrOutput `pulumi:"enableRbacAuthorization"`
	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
	EnabledForDeployment pulumi.BoolPtrOutput `pulumi:"enabledForDeployment"`
	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption pulumi.BoolPtrOutput `pulumi:"enabledForDiskEncryption"`
	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	EnabledForTemplateDeployment pulumi.BoolPtrOutput `pulumi:"enabledForTemplateDeployment"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `networkAcls` block as defined below.
	NetworkAcls KeyVaultNetworkAclsOutput `pulumi:"networkAcls"`
	// Whether public network access is allowed for this Key Vault. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrOutput `pulumi:"publicNetworkAccessEnabled"`
	// Is Purge Protection enabled for this Key Vault?
	//
	// !> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).
	PurgeProtectionEnabled pulumi.BoolPtrOutput `pulumi:"purgeProtectionEnabled"`
	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
	//
	// > **Note:** This field can only be configured one time and cannot be updated.
	SoftDeleteRetentionDays pulumi.IntPtrOutput `pulumi:"softDeleteRetentionDays"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
	// The URI of the Key Vault, used for performing operations on keys and secrets.
	VaultUri pulumi.StringOutput `pulumi:"vaultUri"`
}

// NewKeyVault registers a new resource with the given unique name, arguments, and options.
func NewKeyVault(ctx *pulumi.Context,
	name string, args *KeyVaultArgs, opts ...pulumi.ResourceOption) (*KeyVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	if args.TenantId == nil {
		return nil, errors.New("invalid value for required argument 'TenantId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyVault
	err := ctx.RegisterResource("azure:keyvault/keyVault:KeyVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyVault gets an existing KeyVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyVaultState, opts ...pulumi.ResourceOption) (*KeyVault, error) {
	var resource KeyVault
	err := ctx.ReadResource("azure:keyvault/keyVault:KeyVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyVault resources.
type keyVaultState struct {
	// A list of up to 1024 objects describing access policies, as described below.
	//
	// > **NOTE** Since `accessPolicy` can be configured both inline and via the separate `keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	AccessPolicies []KeyVaultAccessPolicy `pulumi:"accessPolicies"`
	// One or more `contact` block as defined below.
	//
	// > **Note:** This field can only be set once user has `managecontacts` certificate permission.
	Contacts []KeyVaultContact `pulumi:"contacts"`
	// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
	EnableRbacAuthorization *bool `pulumi:"enableRbacAuthorization"`
	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
	EnabledForDeployment *bool `pulumi:"enabledForDeployment"`
	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption *bool `pulumi:"enabledForDiskEncryption"`
	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	EnabledForTemplateDeployment *bool `pulumi:"enabledForTemplateDeployment"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
	Name *string `pulumi:"name"`
	// A `networkAcls` block as defined below.
	NetworkAcls *KeyVaultNetworkAcls `pulumi:"networkAcls"`
	// Whether public network access is allowed for this Key Vault. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// Is Purge Protection enabled for this Key Vault?
	//
	// !> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).
	PurgeProtectionEnabled *bool `pulumi:"purgeProtectionEnabled"`
	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName *string `pulumi:"skuName"`
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
	//
	// > **Note:** This field can only be configured one time and cannot be updated.
	SoftDeleteRetentionDays *int `pulumi:"softDeleteRetentionDays"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId *string `pulumi:"tenantId"`
	// The URI of the Key Vault, used for performing operations on keys and secrets.
	VaultUri *string `pulumi:"vaultUri"`
}

type KeyVaultState struct {
	// A list of up to 1024 objects describing access policies, as described below.
	//
	// > **NOTE** Since `accessPolicy` can be configured both inline and via the separate `keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	AccessPolicies KeyVaultAccessPolicyArrayInput
	// One or more `contact` block as defined below.
	//
	// > **Note:** This field can only be set once user has `managecontacts` certificate permission.
	Contacts KeyVaultContactArrayInput
	// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
	EnableRbacAuthorization pulumi.BoolPtrInput
	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
	EnabledForDeployment pulumi.BoolPtrInput
	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption pulumi.BoolPtrInput
	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	EnabledForTemplateDeployment pulumi.BoolPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
	Name pulumi.StringPtrInput
	// A `networkAcls` block as defined below.
	NetworkAcls KeyVaultNetworkAclsPtrInput
	// Whether public network access is allowed for this Key Vault. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// Is Purge Protection enabled for this Key Vault?
	//
	// !> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).
	PurgeProtectionEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName pulumi.StringPtrInput
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
	//
	// > **Note:** This field can only be configured one time and cannot be updated.
	SoftDeleteRetentionDays pulumi.IntPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId pulumi.StringPtrInput
	// The URI of the Key Vault, used for performing operations on keys and secrets.
	VaultUri pulumi.StringPtrInput
}

func (KeyVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyVaultState)(nil)).Elem()
}

type keyVaultArgs struct {
	// A list of up to 1024 objects describing access policies, as described below.
	//
	// > **NOTE** Since `accessPolicy` can be configured both inline and via the separate `keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	AccessPolicies []KeyVaultAccessPolicy `pulumi:"accessPolicies"`
	// One or more `contact` block as defined below.
	//
	// > **Note:** This field can only be set once user has `managecontacts` certificate permission.
	Contacts []KeyVaultContact `pulumi:"contacts"`
	// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
	EnableRbacAuthorization *bool `pulumi:"enableRbacAuthorization"`
	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
	EnabledForDeployment *bool `pulumi:"enabledForDeployment"`
	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption *bool `pulumi:"enabledForDiskEncryption"`
	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	EnabledForTemplateDeployment *bool `pulumi:"enabledForTemplateDeployment"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
	Name *string `pulumi:"name"`
	// A `networkAcls` block as defined below.
	NetworkAcls *KeyVaultNetworkAcls `pulumi:"networkAcls"`
	// Whether public network access is allowed for this Key Vault. Defaults to `true`.
	PublicNetworkAccessEnabled *bool `pulumi:"publicNetworkAccessEnabled"`
	// Is Purge Protection enabled for this Key Vault?
	//
	// !> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).
	PurgeProtectionEnabled *bool `pulumi:"purgeProtectionEnabled"`
	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName string `pulumi:"skuName"`
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
	//
	// > **Note:** This field can only be configured one time and cannot be updated.
	SoftDeleteRetentionDays *int `pulumi:"softDeleteRetentionDays"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId string `pulumi:"tenantId"`
}

// The set of arguments for constructing a KeyVault resource.
type KeyVaultArgs struct {
	// A list of up to 1024 objects describing access policies, as described below.
	//
	// > **NOTE** Since `accessPolicy` can be configured both inline and via the separate `keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
	AccessPolicies KeyVaultAccessPolicyArrayInput
	// One or more `contact` block as defined below.
	//
	// > **Note:** This field can only be set once user has `managecontacts` certificate permission.
	Contacts KeyVaultContactArrayInput
	// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
	EnableRbacAuthorization pulumi.BoolPtrInput
	// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
	EnabledForDeployment pulumi.BoolPtrInput
	// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
	EnabledForDiskEncryption pulumi.BoolPtrInput
	// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
	EnabledForTemplateDeployment pulumi.BoolPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
	Name pulumi.StringPtrInput
	// A `networkAcls` block as defined below.
	NetworkAcls KeyVaultNetworkAclsPtrInput
	// Whether public network access is allowed for this Key Vault. Defaults to `true`.
	PublicNetworkAccessEnabled pulumi.BoolPtrInput
	// Is Purge Protection enabled for this Key Vault?
	//
	// !> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).
	PurgeProtectionEnabled pulumi.BoolPtrInput
	// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
	SkuName pulumi.StringInput
	// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
	//
	// > **Note:** This field can only be configured one time and cannot be updated.
	SoftDeleteRetentionDays pulumi.IntPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
	TenantId pulumi.StringInput
}

func (KeyVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyVaultArgs)(nil)).Elem()
}

type KeyVaultInput interface {
	pulumi.Input

	ToKeyVaultOutput() KeyVaultOutput
	ToKeyVaultOutputWithContext(ctx context.Context) KeyVaultOutput
}

func (*KeyVault) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVault)(nil)).Elem()
}

func (i *KeyVault) ToKeyVaultOutput() KeyVaultOutput {
	return i.ToKeyVaultOutputWithContext(context.Background())
}

func (i *KeyVault) ToKeyVaultOutputWithContext(ctx context.Context) KeyVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultOutput)
}

// KeyVaultArrayInput is an input type that accepts KeyVaultArray and KeyVaultArrayOutput values.
// You can construct a concrete instance of `KeyVaultArrayInput` via:
//
//	KeyVaultArray{ KeyVaultArgs{...} }
type KeyVaultArrayInput interface {
	pulumi.Input

	ToKeyVaultArrayOutput() KeyVaultArrayOutput
	ToKeyVaultArrayOutputWithContext(context.Context) KeyVaultArrayOutput
}

type KeyVaultArray []KeyVaultInput

func (KeyVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyVault)(nil)).Elem()
}

func (i KeyVaultArray) ToKeyVaultArrayOutput() KeyVaultArrayOutput {
	return i.ToKeyVaultArrayOutputWithContext(context.Background())
}

func (i KeyVaultArray) ToKeyVaultArrayOutputWithContext(ctx context.Context) KeyVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultArrayOutput)
}

// KeyVaultMapInput is an input type that accepts KeyVaultMap and KeyVaultMapOutput values.
// You can construct a concrete instance of `KeyVaultMapInput` via:
//
//	KeyVaultMap{ "key": KeyVaultArgs{...} }
type KeyVaultMapInput interface {
	pulumi.Input

	ToKeyVaultMapOutput() KeyVaultMapOutput
	ToKeyVaultMapOutputWithContext(context.Context) KeyVaultMapOutput
}

type KeyVaultMap map[string]KeyVaultInput

func (KeyVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyVault)(nil)).Elem()
}

func (i KeyVaultMap) ToKeyVaultMapOutput() KeyVaultMapOutput {
	return i.ToKeyVaultMapOutputWithContext(context.Background())
}

func (i KeyVaultMap) ToKeyVaultMapOutputWithContext(ctx context.Context) KeyVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultMapOutput)
}

type KeyVaultOutput struct{ *pulumi.OutputState }

func (KeyVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVault)(nil)).Elem()
}

func (o KeyVaultOutput) ToKeyVaultOutput() KeyVaultOutput {
	return o
}

func (o KeyVaultOutput) ToKeyVaultOutputWithContext(ctx context.Context) KeyVaultOutput {
	return o
}

// A list of up to 1024 objects describing access policies, as described below.
//
// > **NOTE** Since `accessPolicy` can be configured both inline and via the separate `keyvault.AccessPolicy` resource, we have to explicitly set it to empty slice (`[]`) to remove it.
func (o KeyVaultOutput) AccessPolicies() KeyVaultAccessPolicyArrayOutput {
	return o.ApplyT(func(v *KeyVault) KeyVaultAccessPolicyArrayOutput { return v.AccessPolicies }).(KeyVaultAccessPolicyArrayOutput)
}

// One or more `contact` block as defined below.
//
// > **Note:** This field can only be set once user has `managecontacts` certificate permission.
func (o KeyVaultOutput) Contacts() KeyVaultContactArrayOutput {
	return o.ApplyT(func(v *KeyVault) KeyVaultContactArrayOutput { return v.Contacts }).(KeyVaultContactArrayOutput)
}

// Boolean flag to specify whether Azure Key Vault uses Role Based Access Control (RBAC) for authorization of data actions.
func (o KeyVaultOutput) EnableRbacAuthorization() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.BoolPtrOutput { return v.EnableRbacAuthorization }).(pulumi.BoolPtrOutput)
}

// Boolean flag to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.
func (o KeyVaultOutput) EnabledForDeployment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.BoolPtrOutput { return v.EnabledForDeployment }).(pulumi.BoolPtrOutput)
}

// Boolean flag to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
func (o KeyVaultOutput) EnabledForDiskEncryption() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.BoolPtrOutput { return v.EnabledForDiskEncryption }).(pulumi.BoolPtrOutput)
}

// Boolean flag to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
func (o KeyVaultOutput) EnabledForTemplateDeployment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.BoolPtrOutput { return v.EnabledForTemplateDeployment }).(pulumi.BoolPtrOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o KeyVaultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Key Vault. Changing this forces a new resource to be created. The name must be globally unique. If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
func (o KeyVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `networkAcls` block as defined below.
func (o KeyVaultOutput) NetworkAcls() KeyVaultNetworkAclsOutput {
	return o.ApplyT(func(v *KeyVault) KeyVaultNetworkAclsOutput { return v.NetworkAcls }).(KeyVaultNetworkAclsOutput)
}

// Whether public network access is allowed for this Key Vault. Defaults to `true`.
func (o KeyVaultOutput) PublicNetworkAccessEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.BoolPtrOutput { return v.PublicNetworkAccessEnabled }).(pulumi.BoolPtrOutput)
}

// Is Purge Protection enabled for this Key Vault?
//
// !> **Note:** Once Purge Protection has been Enabled it's not possible to Disable it. Support for [disabling purge protection is being tracked in this Azure API issue](https://github.com/Azure/azure-rest-api-specs/issues/8075). Deleting the Key Vault with Purge Protection Enabled will schedule the Key Vault to be deleted (which will happen by Azure in the configured number of days, currently 90 days).
func (o KeyVaultOutput) PurgeProtectionEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.BoolPtrOutput { return v.PurgeProtectionEnabled }).(pulumi.BoolPtrOutput)
}

// The name of the resource group in which to create the Key Vault. Changing this forces a new resource to be created.
func (o KeyVaultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Name of the SKU used for this Key Vault. Possible values are `standard` and `premium`.
func (o KeyVaultOutput) SkuName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.StringOutput { return v.SkuName }).(pulumi.StringOutput)
}

// The number of days that items should be retained for once soft-deleted. This value can be between `7` and `90` (the default) days.
//
// > **Note:** This field can only be configured one time and cannot be updated.
func (o KeyVaultOutput) SoftDeleteRetentionDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.IntPtrOutput { return v.SoftDeleteRetentionDays }).(pulumi.IntPtrOutput)
}

// A mapping of tags to assign to the resource.
func (o KeyVaultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
func (o KeyVaultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

// The URI of the Key Vault, used for performing operations on keys and secrets.
func (o KeyVaultOutput) VaultUri() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyVault) pulumi.StringOutput { return v.VaultUri }).(pulumi.StringOutput)
}

type KeyVaultArrayOutput struct{ *pulumi.OutputState }

func (KeyVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyVault)(nil)).Elem()
}

func (o KeyVaultArrayOutput) ToKeyVaultArrayOutput() KeyVaultArrayOutput {
	return o
}

func (o KeyVaultArrayOutput) ToKeyVaultArrayOutputWithContext(ctx context.Context) KeyVaultArrayOutput {
	return o
}

func (o KeyVaultArrayOutput) Index(i pulumi.IntInput) KeyVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyVault {
		return vs[0].([]*KeyVault)[vs[1].(int)]
	}).(KeyVaultOutput)
}

type KeyVaultMapOutput struct{ *pulumi.OutputState }

func (KeyVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyVault)(nil)).Elem()
}

func (o KeyVaultMapOutput) ToKeyVaultMapOutput() KeyVaultMapOutput {
	return o
}

func (o KeyVaultMapOutput) ToKeyVaultMapOutputWithContext(ctx context.Context) KeyVaultMapOutput {
	return o
}

func (o KeyVaultMapOutput) MapIndex(k pulumi.StringInput) KeyVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyVault {
		return vs[0].(map[string]*KeyVault)[vs[1].(string)]
	}).(KeyVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultInput)(nil)).Elem(), &KeyVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultArrayInput)(nil)).Elem(), KeyVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultMapInput)(nil)).Elem(), KeyVaultMap{})
	pulumi.RegisterOutputType(KeyVaultOutput{})
	pulumi.RegisterOutputType(KeyVaultArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultMapOutput{})
}
