// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type CertifiateCertificate struct {
	// The base64-encoded certificate contents.
	Contents string `pulumi:"contents"`
	// The password associated with the certificate.
	//
	// > **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a privateKey in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
	//
	// To convert a private key to pkcs8 format with openssl use:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The PEM content should look something like:
	Password *string `pulumi:"password"`
}

// CertifiateCertificateInput is an input type that accepts CertifiateCertificateArgs and CertifiateCertificateOutput values.
// You can construct a concrete instance of `CertifiateCertificateInput` via:
//
//	CertifiateCertificateArgs{...}
type CertifiateCertificateInput interface {
	pulumi.Input

	ToCertifiateCertificateOutput() CertifiateCertificateOutput
	ToCertifiateCertificateOutputWithContext(context.Context) CertifiateCertificateOutput
}

type CertifiateCertificateArgs struct {
	// The base64-encoded certificate contents.
	Contents pulumi.StringInput `pulumi:"contents"`
	// The password associated with the certificate.
	//
	// > **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a privateKey in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
	//
	// To convert a private key to pkcs8 format with openssl use:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The PEM content should look something like:
	Password pulumi.StringPtrInput `pulumi:"password"`
}

func (CertifiateCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificate)(nil)).Elem()
}

func (i CertifiateCertificateArgs) ToCertifiateCertificateOutput() CertifiateCertificateOutput {
	return i.ToCertifiateCertificateOutputWithContext(context.Background())
}

func (i CertifiateCertificateArgs) ToCertifiateCertificateOutputWithContext(ctx context.Context) CertifiateCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificateOutput)
}

func (i CertifiateCertificateArgs) ToCertifiateCertificatePtrOutput() CertifiateCertificatePtrOutput {
	return i.ToCertifiateCertificatePtrOutputWithContext(context.Background())
}

func (i CertifiateCertificateArgs) ToCertifiateCertificatePtrOutputWithContext(ctx context.Context) CertifiateCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificateOutput).ToCertifiateCertificatePtrOutputWithContext(ctx)
}

// CertifiateCertificatePtrInput is an input type that accepts CertifiateCertificateArgs, CertifiateCertificatePtr and CertifiateCertificatePtrOutput values.
// You can construct a concrete instance of `CertifiateCertificatePtrInput` via:
//
//	        CertifiateCertificateArgs{...}
//
//	or:
//
//	        nil
type CertifiateCertificatePtrInput interface {
	pulumi.Input

	ToCertifiateCertificatePtrOutput() CertifiateCertificatePtrOutput
	ToCertifiateCertificatePtrOutputWithContext(context.Context) CertifiateCertificatePtrOutput
}

type certifiateCertificatePtrType CertifiateCertificateArgs

func CertifiateCertificatePtr(v *CertifiateCertificateArgs) CertifiateCertificatePtrInput {
	return (*certifiateCertificatePtrType)(v)
}

func (*certifiateCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificate)(nil)).Elem()
}

func (i *certifiateCertificatePtrType) ToCertifiateCertificatePtrOutput() CertifiateCertificatePtrOutput {
	return i.ToCertifiateCertificatePtrOutputWithContext(context.Background())
}

func (i *certifiateCertificatePtrType) ToCertifiateCertificatePtrOutputWithContext(ctx context.Context) CertifiateCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePtrOutput)
}

type CertifiateCertificateOutput struct{ *pulumi.OutputState }

func (CertifiateCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificate)(nil)).Elem()
}

func (o CertifiateCertificateOutput) ToCertifiateCertificateOutput() CertifiateCertificateOutput {
	return o
}

func (o CertifiateCertificateOutput) ToCertifiateCertificateOutputWithContext(ctx context.Context) CertifiateCertificateOutput {
	return o
}

func (o CertifiateCertificateOutput) ToCertifiateCertificatePtrOutput() CertifiateCertificatePtrOutput {
	return o.ToCertifiateCertificatePtrOutputWithContext(context.Background())
}

func (o CertifiateCertificateOutput) ToCertifiateCertificatePtrOutputWithContext(ctx context.Context) CertifiateCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertifiateCertificate) *CertifiateCertificate {
		return &v
	}).(CertifiateCertificatePtrOutput)
}

// The base64-encoded certificate contents.
func (o CertifiateCertificateOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v CertifiateCertificate) string { return v.Contents }).(pulumi.StringOutput)
}

// The password associated with the certificate.
//
// > **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a privateKey in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
//
// To convert a private key to pkcs8 format with openssl use:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// The PEM content should look something like:
func (o CertifiateCertificateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertifiateCertificate) *string { return v.Password }).(pulumi.StringPtrOutput)
}

type CertifiateCertificatePtrOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificate)(nil)).Elem()
}

func (o CertifiateCertificatePtrOutput) ToCertifiateCertificatePtrOutput() CertifiateCertificatePtrOutput {
	return o
}

func (o CertifiateCertificatePtrOutput) ToCertifiateCertificatePtrOutputWithContext(ctx context.Context) CertifiateCertificatePtrOutput {
	return o
}

func (o CertifiateCertificatePtrOutput) Elem() CertifiateCertificateOutput {
	return o.ApplyT(func(v *CertifiateCertificate) CertifiateCertificate {
		if v != nil {
			return *v
		}
		var ret CertifiateCertificate
		return ret
	}).(CertifiateCertificateOutput)
}

// The base64-encoded certificate contents.
func (o CertifiateCertificatePtrOutput) Contents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.Contents
	}).(pulumi.StringPtrOutput)
}

// The password associated with the certificate.
//
// > **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a privateKey in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
//
// To convert a private key to pkcs8 format with openssl use:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// The PEM content should look something like:
func (o CertifiateCertificatePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

type CertifiateCertificateAttribute struct {
	// The create time of the Key Vault Certificate.
	Created *string `pulumi:"created"`
	// whether the Key Vault Certificate is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The expires time of the Key Vault Certificate.
	Expires *string `pulumi:"expires"`
	// The not before valid time of the Key Vault Certificate.
	NotBefore *string `pulumi:"notBefore"`
	// The deletion recovery level of the Key Vault Certificate.
	RecoveryLevel *string `pulumi:"recoveryLevel"`
	// The recent update time of the Key Vault Certificate.
	Updated *string `pulumi:"updated"`
}

// CertifiateCertificateAttributeInput is an input type that accepts CertifiateCertificateAttributeArgs and CertifiateCertificateAttributeOutput values.
// You can construct a concrete instance of `CertifiateCertificateAttributeInput` via:
//
//	CertifiateCertificateAttributeArgs{...}
type CertifiateCertificateAttributeInput interface {
	pulumi.Input

	ToCertifiateCertificateAttributeOutput() CertifiateCertificateAttributeOutput
	ToCertifiateCertificateAttributeOutputWithContext(context.Context) CertifiateCertificateAttributeOutput
}

type CertifiateCertificateAttributeArgs struct {
	// The create time of the Key Vault Certificate.
	Created pulumi.StringPtrInput `pulumi:"created"`
	// whether the Key Vault Certificate is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The expires time of the Key Vault Certificate.
	Expires pulumi.StringPtrInput `pulumi:"expires"`
	// The not before valid time of the Key Vault Certificate.
	NotBefore pulumi.StringPtrInput `pulumi:"notBefore"`
	// The deletion recovery level of the Key Vault Certificate.
	RecoveryLevel pulumi.StringPtrInput `pulumi:"recoveryLevel"`
	// The recent update time of the Key Vault Certificate.
	Updated pulumi.StringPtrInput `pulumi:"updated"`
}

func (CertifiateCertificateAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificateAttribute)(nil)).Elem()
}

func (i CertifiateCertificateAttributeArgs) ToCertifiateCertificateAttributeOutput() CertifiateCertificateAttributeOutput {
	return i.ToCertifiateCertificateAttributeOutputWithContext(context.Background())
}

func (i CertifiateCertificateAttributeArgs) ToCertifiateCertificateAttributeOutputWithContext(ctx context.Context) CertifiateCertificateAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificateAttributeOutput)
}

// CertifiateCertificateAttributeArrayInput is an input type that accepts CertifiateCertificateAttributeArray and CertifiateCertificateAttributeArrayOutput values.
// You can construct a concrete instance of `CertifiateCertificateAttributeArrayInput` via:
//
//	CertifiateCertificateAttributeArray{ CertifiateCertificateAttributeArgs{...} }
type CertifiateCertificateAttributeArrayInput interface {
	pulumi.Input

	ToCertifiateCertificateAttributeArrayOutput() CertifiateCertificateAttributeArrayOutput
	ToCertifiateCertificateAttributeArrayOutputWithContext(context.Context) CertifiateCertificateAttributeArrayOutput
}

type CertifiateCertificateAttributeArray []CertifiateCertificateAttributeInput

func (CertifiateCertificateAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertifiateCertificateAttribute)(nil)).Elem()
}

func (i CertifiateCertificateAttributeArray) ToCertifiateCertificateAttributeArrayOutput() CertifiateCertificateAttributeArrayOutput {
	return i.ToCertifiateCertificateAttributeArrayOutputWithContext(context.Background())
}

func (i CertifiateCertificateAttributeArray) ToCertifiateCertificateAttributeArrayOutputWithContext(ctx context.Context) CertifiateCertificateAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificateAttributeArrayOutput)
}

type CertifiateCertificateAttributeOutput struct{ *pulumi.OutputState }

func (CertifiateCertificateAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificateAttribute)(nil)).Elem()
}

func (o CertifiateCertificateAttributeOutput) ToCertifiateCertificateAttributeOutput() CertifiateCertificateAttributeOutput {
	return o
}

func (o CertifiateCertificateAttributeOutput) ToCertifiateCertificateAttributeOutputWithContext(ctx context.Context) CertifiateCertificateAttributeOutput {
	return o
}

// The create time of the Key Vault Certificate.
func (o CertifiateCertificateAttributeOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertifiateCertificateAttribute) *string { return v.Created }).(pulumi.StringPtrOutput)
}

// whether the Key Vault Certificate is enabled.
func (o CertifiateCertificateAttributeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertifiateCertificateAttribute) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The expires time of the Key Vault Certificate.
func (o CertifiateCertificateAttributeOutput) Expires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertifiateCertificateAttribute) *string { return v.Expires }).(pulumi.StringPtrOutput)
}

// The not before valid time of the Key Vault Certificate.
func (o CertifiateCertificateAttributeOutput) NotBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertifiateCertificateAttribute) *string { return v.NotBefore }).(pulumi.StringPtrOutput)
}

// The deletion recovery level of the Key Vault Certificate.
func (o CertifiateCertificateAttributeOutput) RecoveryLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertifiateCertificateAttribute) *string { return v.RecoveryLevel }).(pulumi.StringPtrOutput)
}

// The recent update time of the Key Vault Certificate.
func (o CertifiateCertificateAttributeOutput) Updated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertifiateCertificateAttribute) *string { return v.Updated }).(pulumi.StringPtrOutput)
}

type CertifiateCertificateAttributeArrayOutput struct{ *pulumi.OutputState }

func (CertifiateCertificateAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertifiateCertificateAttribute)(nil)).Elem()
}

func (o CertifiateCertificateAttributeArrayOutput) ToCertifiateCertificateAttributeArrayOutput() CertifiateCertificateAttributeArrayOutput {
	return o
}

func (o CertifiateCertificateAttributeArrayOutput) ToCertifiateCertificateAttributeArrayOutputWithContext(ctx context.Context) CertifiateCertificateAttributeArrayOutput {
	return o
}

func (o CertifiateCertificateAttributeArrayOutput) Index(i pulumi.IntInput) CertifiateCertificateAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertifiateCertificateAttribute {
		return vs[0].([]CertifiateCertificateAttribute)[vs[1].(int)]
	}).(CertifiateCertificateAttributeOutput)
}

type CertifiateCertificatePolicy struct {
	// A `issuerParameters` block as defined below.
	IssuerParameters CertifiateCertificatePolicyIssuerParameters `pulumi:"issuerParameters"`
	// A `keyProperties` block as defined below.
	KeyProperties CertifiateCertificatePolicyKeyProperties `pulumi:"keyProperties"`
	// A `lifetimeAction` block as defined below.
	LifetimeActions []CertifiateCertificatePolicyLifetimeAction `pulumi:"lifetimeActions"`
	// A `secretProperties` block as defined below.
	SecretProperties CertifiateCertificatePolicySecretProperties `pulumi:"secretProperties"`
	// A `x509CertificateProperties` block as defined below. Required when `certificate` block is not specified.
	X509CertificateProperties *CertifiateCertificatePolicyX509CertificateProperties `pulumi:"x509CertificateProperties"`
}

// CertifiateCertificatePolicyInput is an input type that accepts CertifiateCertificatePolicyArgs and CertifiateCertificatePolicyOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyInput` via:
//
//	CertifiateCertificatePolicyArgs{...}
type CertifiateCertificatePolicyInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyOutput() CertifiateCertificatePolicyOutput
	ToCertifiateCertificatePolicyOutputWithContext(context.Context) CertifiateCertificatePolicyOutput
}

type CertifiateCertificatePolicyArgs struct {
	// A `issuerParameters` block as defined below.
	IssuerParameters CertifiateCertificatePolicyIssuerParametersInput `pulumi:"issuerParameters"`
	// A `keyProperties` block as defined below.
	KeyProperties CertifiateCertificatePolicyKeyPropertiesInput `pulumi:"keyProperties"`
	// A `lifetimeAction` block as defined below.
	LifetimeActions CertifiateCertificatePolicyLifetimeActionArrayInput `pulumi:"lifetimeActions"`
	// A `secretProperties` block as defined below.
	SecretProperties CertifiateCertificatePolicySecretPropertiesInput `pulumi:"secretProperties"`
	// A `x509CertificateProperties` block as defined below. Required when `certificate` block is not specified.
	X509CertificateProperties CertifiateCertificatePolicyX509CertificatePropertiesPtrInput `pulumi:"x509CertificateProperties"`
}

func (CertifiateCertificatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicy)(nil)).Elem()
}

func (i CertifiateCertificatePolicyArgs) ToCertifiateCertificatePolicyOutput() CertifiateCertificatePolicyOutput {
	return i.ToCertifiateCertificatePolicyOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyArgs) ToCertifiateCertificatePolicyOutputWithContext(ctx context.Context) CertifiateCertificatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyOutput)
}

func (i CertifiateCertificatePolicyArgs) ToCertifiateCertificatePolicyPtrOutput() CertifiateCertificatePolicyPtrOutput {
	return i.ToCertifiateCertificatePolicyPtrOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyArgs) ToCertifiateCertificatePolicyPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyOutput).ToCertifiateCertificatePolicyPtrOutputWithContext(ctx)
}

// CertifiateCertificatePolicyPtrInput is an input type that accepts CertifiateCertificatePolicyArgs, CertifiateCertificatePolicyPtr and CertifiateCertificatePolicyPtrOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyPtrInput` via:
//
//	        CertifiateCertificatePolicyArgs{...}
//
//	or:
//
//	        nil
type CertifiateCertificatePolicyPtrInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyPtrOutput() CertifiateCertificatePolicyPtrOutput
	ToCertifiateCertificatePolicyPtrOutputWithContext(context.Context) CertifiateCertificatePolicyPtrOutput
}

type certifiateCertificatePolicyPtrType CertifiateCertificatePolicyArgs

func CertifiateCertificatePolicyPtr(v *CertifiateCertificatePolicyArgs) CertifiateCertificatePolicyPtrInput {
	return (*certifiateCertificatePolicyPtrType)(v)
}

func (*certifiateCertificatePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicy)(nil)).Elem()
}

func (i *certifiateCertificatePolicyPtrType) ToCertifiateCertificatePolicyPtrOutput() CertifiateCertificatePolicyPtrOutput {
	return i.ToCertifiateCertificatePolicyPtrOutputWithContext(context.Background())
}

func (i *certifiateCertificatePolicyPtrType) ToCertifiateCertificatePolicyPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyPtrOutput)
}

type CertifiateCertificatePolicyOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicy)(nil)).Elem()
}

func (o CertifiateCertificatePolicyOutput) ToCertifiateCertificatePolicyOutput() CertifiateCertificatePolicyOutput {
	return o
}

func (o CertifiateCertificatePolicyOutput) ToCertifiateCertificatePolicyOutputWithContext(ctx context.Context) CertifiateCertificatePolicyOutput {
	return o
}

func (o CertifiateCertificatePolicyOutput) ToCertifiateCertificatePolicyPtrOutput() CertifiateCertificatePolicyPtrOutput {
	return o.ToCertifiateCertificatePolicyPtrOutputWithContext(context.Background())
}

func (o CertifiateCertificatePolicyOutput) ToCertifiateCertificatePolicyPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertifiateCertificatePolicy) *CertifiateCertificatePolicy {
		return &v
	}).(CertifiateCertificatePolicyPtrOutput)
}

// A `issuerParameters` block as defined below.
func (o CertifiateCertificatePolicyOutput) IssuerParameters() CertifiateCertificatePolicyIssuerParametersOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicy) CertifiateCertificatePolicyIssuerParameters {
		return v.IssuerParameters
	}).(CertifiateCertificatePolicyIssuerParametersOutput)
}

// A `keyProperties` block as defined below.
func (o CertifiateCertificatePolicyOutput) KeyProperties() CertifiateCertificatePolicyKeyPropertiesOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicy) CertifiateCertificatePolicyKeyProperties { return v.KeyProperties }).(CertifiateCertificatePolicyKeyPropertiesOutput)
}

// A `lifetimeAction` block as defined below.
func (o CertifiateCertificatePolicyOutput) LifetimeActions() CertifiateCertificatePolicyLifetimeActionArrayOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicy) []CertifiateCertificatePolicyLifetimeAction {
		return v.LifetimeActions
	}).(CertifiateCertificatePolicyLifetimeActionArrayOutput)
}

// A `secretProperties` block as defined below.
func (o CertifiateCertificatePolicyOutput) SecretProperties() CertifiateCertificatePolicySecretPropertiesOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicy) CertifiateCertificatePolicySecretProperties {
		return v.SecretProperties
	}).(CertifiateCertificatePolicySecretPropertiesOutput)
}

// A `x509CertificateProperties` block as defined below. Required when `certificate` block is not specified.
func (o CertifiateCertificatePolicyOutput) X509CertificateProperties() CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicy) *CertifiateCertificatePolicyX509CertificateProperties {
		return v.X509CertificateProperties
	}).(CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput)
}

type CertifiateCertificatePolicyPtrOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicy)(nil)).Elem()
}

func (o CertifiateCertificatePolicyPtrOutput) ToCertifiateCertificatePolicyPtrOutput() CertifiateCertificatePolicyPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyPtrOutput) ToCertifiateCertificatePolicyPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyPtrOutput) Elem() CertifiateCertificatePolicyOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicy) CertifiateCertificatePolicy {
		if v != nil {
			return *v
		}
		var ret CertifiateCertificatePolicy
		return ret
	}).(CertifiateCertificatePolicyOutput)
}

// A `issuerParameters` block as defined below.
func (o CertifiateCertificatePolicyPtrOutput) IssuerParameters() CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicy) *CertifiateCertificatePolicyIssuerParameters {
		if v == nil {
			return nil
		}
		return &v.IssuerParameters
	}).(CertifiateCertificatePolicyIssuerParametersPtrOutput)
}

// A `keyProperties` block as defined below.
func (o CertifiateCertificatePolicyPtrOutput) KeyProperties() CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicy) *CertifiateCertificatePolicyKeyProperties {
		if v == nil {
			return nil
		}
		return &v.KeyProperties
	}).(CertifiateCertificatePolicyKeyPropertiesPtrOutput)
}

// A `lifetimeAction` block as defined below.
func (o CertifiateCertificatePolicyPtrOutput) LifetimeActions() CertifiateCertificatePolicyLifetimeActionArrayOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicy) []CertifiateCertificatePolicyLifetimeAction {
		if v == nil {
			return nil
		}
		return v.LifetimeActions
	}).(CertifiateCertificatePolicyLifetimeActionArrayOutput)
}

// A `secretProperties` block as defined below.
func (o CertifiateCertificatePolicyPtrOutput) SecretProperties() CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicy) *CertifiateCertificatePolicySecretProperties {
		if v == nil {
			return nil
		}
		return &v.SecretProperties
	}).(CertifiateCertificatePolicySecretPropertiesPtrOutput)
}

// A `x509CertificateProperties` block as defined below. Required when `certificate` block is not specified.
func (o CertifiateCertificatePolicyPtrOutput) X509CertificateProperties() CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicy) *CertifiateCertificatePolicyX509CertificateProperties {
		if v == nil {
			return nil
		}
		return v.X509CertificateProperties
	}).(CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput)
}

type CertifiateCertificatePolicyIssuerParameters struct {
	// The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
	Name string `pulumi:"name"`
}

// CertifiateCertificatePolicyIssuerParametersInput is an input type that accepts CertifiateCertificatePolicyIssuerParametersArgs and CertifiateCertificatePolicyIssuerParametersOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyIssuerParametersInput` via:
//
//	CertifiateCertificatePolicyIssuerParametersArgs{...}
type CertifiateCertificatePolicyIssuerParametersInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyIssuerParametersOutput() CertifiateCertificatePolicyIssuerParametersOutput
	ToCertifiateCertificatePolicyIssuerParametersOutputWithContext(context.Context) CertifiateCertificatePolicyIssuerParametersOutput
}

type CertifiateCertificatePolicyIssuerParametersArgs struct {
	// The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
	Name pulumi.StringInput `pulumi:"name"`
}

func (CertifiateCertificatePolicyIssuerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyIssuerParameters)(nil)).Elem()
}

func (i CertifiateCertificatePolicyIssuerParametersArgs) ToCertifiateCertificatePolicyIssuerParametersOutput() CertifiateCertificatePolicyIssuerParametersOutput {
	return i.ToCertifiateCertificatePolicyIssuerParametersOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyIssuerParametersArgs) ToCertifiateCertificatePolicyIssuerParametersOutputWithContext(ctx context.Context) CertifiateCertificatePolicyIssuerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyIssuerParametersOutput)
}

func (i CertifiateCertificatePolicyIssuerParametersArgs) ToCertifiateCertificatePolicyIssuerParametersPtrOutput() CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return i.ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyIssuerParametersArgs) ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyIssuerParametersOutput).ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx)
}

// CertifiateCertificatePolicyIssuerParametersPtrInput is an input type that accepts CertifiateCertificatePolicyIssuerParametersArgs, CertifiateCertificatePolicyIssuerParametersPtr and CertifiateCertificatePolicyIssuerParametersPtrOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyIssuerParametersPtrInput` via:
//
//	        CertifiateCertificatePolicyIssuerParametersArgs{...}
//
//	or:
//
//	        nil
type CertifiateCertificatePolicyIssuerParametersPtrInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyIssuerParametersPtrOutput() CertifiateCertificatePolicyIssuerParametersPtrOutput
	ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(context.Context) CertifiateCertificatePolicyIssuerParametersPtrOutput
}

type certifiateCertificatePolicyIssuerParametersPtrType CertifiateCertificatePolicyIssuerParametersArgs

func CertifiateCertificatePolicyIssuerParametersPtr(v *CertifiateCertificatePolicyIssuerParametersArgs) CertifiateCertificatePolicyIssuerParametersPtrInput {
	return (*certifiateCertificatePolicyIssuerParametersPtrType)(v)
}

func (*certifiateCertificatePolicyIssuerParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicyIssuerParameters)(nil)).Elem()
}

func (i *certifiateCertificatePolicyIssuerParametersPtrType) ToCertifiateCertificatePolicyIssuerParametersPtrOutput() CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return i.ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(context.Background())
}

func (i *certifiateCertificatePolicyIssuerParametersPtrType) ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyIssuerParametersPtrOutput)
}

type CertifiateCertificatePolicyIssuerParametersOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyIssuerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyIssuerParameters)(nil)).Elem()
}

func (o CertifiateCertificatePolicyIssuerParametersOutput) ToCertifiateCertificatePolicyIssuerParametersOutput() CertifiateCertificatePolicyIssuerParametersOutput {
	return o
}

func (o CertifiateCertificatePolicyIssuerParametersOutput) ToCertifiateCertificatePolicyIssuerParametersOutputWithContext(ctx context.Context) CertifiateCertificatePolicyIssuerParametersOutput {
	return o
}

func (o CertifiateCertificatePolicyIssuerParametersOutput) ToCertifiateCertificatePolicyIssuerParametersPtrOutput() CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return o.ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(context.Background())
}

func (o CertifiateCertificatePolicyIssuerParametersOutput) ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertifiateCertificatePolicyIssuerParameters) *CertifiateCertificatePolicyIssuerParameters {
		return &v
	}).(CertifiateCertificatePolicyIssuerParametersPtrOutput)
}

// The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
func (o CertifiateCertificatePolicyIssuerParametersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyIssuerParameters) string { return v.Name }).(pulumi.StringOutput)
}

type CertifiateCertificatePolicyIssuerParametersPtrOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyIssuerParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicyIssuerParameters)(nil)).Elem()
}

func (o CertifiateCertificatePolicyIssuerParametersPtrOutput) ToCertifiateCertificatePolicyIssuerParametersPtrOutput() CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyIssuerParametersPtrOutput) ToCertifiateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyIssuerParametersPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyIssuerParametersPtrOutput) Elem() CertifiateCertificatePolicyIssuerParametersOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyIssuerParameters) CertifiateCertificatePolicyIssuerParameters {
		if v != nil {
			return *v
		}
		var ret CertifiateCertificatePolicyIssuerParameters
		return ret
	}).(CertifiateCertificatePolicyIssuerParametersOutput)
}

// The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
func (o CertifiateCertificatePolicyIssuerParametersPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyIssuerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type CertifiateCertificatePolicyKeyProperties struct {
	// Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `keyType` is `EC` or `EC-HSM`.
	Curve *string `pulumi:"curve"`
	// Is this certificate exportable?
	Exportable bool `pulumi:"exportable"`
	// The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
	KeySize *int `pulumi:"keySize"`
	// Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
	KeyType string `pulumi:"keyType"`
	// Is the key reusable?
	ReuseKey bool `pulumi:"reuseKey"`
}

// CertifiateCertificatePolicyKeyPropertiesInput is an input type that accepts CertifiateCertificatePolicyKeyPropertiesArgs and CertifiateCertificatePolicyKeyPropertiesOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyKeyPropertiesInput` via:
//
//	CertifiateCertificatePolicyKeyPropertiesArgs{...}
type CertifiateCertificatePolicyKeyPropertiesInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyKeyPropertiesOutput() CertifiateCertificatePolicyKeyPropertiesOutput
	ToCertifiateCertificatePolicyKeyPropertiesOutputWithContext(context.Context) CertifiateCertificatePolicyKeyPropertiesOutput
}

type CertifiateCertificatePolicyKeyPropertiesArgs struct {
	// Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `keyType` is `EC` or `EC-HSM`.
	Curve pulumi.StringPtrInput `pulumi:"curve"`
	// Is this certificate exportable?
	Exportable pulumi.BoolInput `pulumi:"exportable"`
	// The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
	KeySize pulumi.IntPtrInput `pulumi:"keySize"`
	// Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
	KeyType pulumi.StringInput `pulumi:"keyType"`
	// Is the key reusable?
	ReuseKey pulumi.BoolInput `pulumi:"reuseKey"`
}

func (CertifiateCertificatePolicyKeyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyKeyProperties)(nil)).Elem()
}

func (i CertifiateCertificatePolicyKeyPropertiesArgs) ToCertifiateCertificatePolicyKeyPropertiesOutput() CertifiateCertificatePolicyKeyPropertiesOutput {
	return i.ToCertifiateCertificatePolicyKeyPropertiesOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyKeyPropertiesArgs) ToCertifiateCertificatePolicyKeyPropertiesOutputWithContext(ctx context.Context) CertifiateCertificatePolicyKeyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyKeyPropertiesOutput)
}

func (i CertifiateCertificatePolicyKeyPropertiesArgs) ToCertifiateCertificatePolicyKeyPropertiesPtrOutput() CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return i.ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyKeyPropertiesArgs) ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyKeyPropertiesOutput).ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx)
}

// CertifiateCertificatePolicyKeyPropertiesPtrInput is an input type that accepts CertifiateCertificatePolicyKeyPropertiesArgs, CertifiateCertificatePolicyKeyPropertiesPtr and CertifiateCertificatePolicyKeyPropertiesPtrOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyKeyPropertiesPtrInput` via:
//
//	        CertifiateCertificatePolicyKeyPropertiesArgs{...}
//
//	or:
//
//	        nil
type CertifiateCertificatePolicyKeyPropertiesPtrInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyKeyPropertiesPtrOutput() CertifiateCertificatePolicyKeyPropertiesPtrOutput
	ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(context.Context) CertifiateCertificatePolicyKeyPropertiesPtrOutput
}

type certifiateCertificatePolicyKeyPropertiesPtrType CertifiateCertificatePolicyKeyPropertiesArgs

func CertifiateCertificatePolicyKeyPropertiesPtr(v *CertifiateCertificatePolicyKeyPropertiesArgs) CertifiateCertificatePolicyKeyPropertiesPtrInput {
	return (*certifiateCertificatePolicyKeyPropertiesPtrType)(v)
}

func (*certifiateCertificatePolicyKeyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicyKeyProperties)(nil)).Elem()
}

func (i *certifiateCertificatePolicyKeyPropertiesPtrType) ToCertifiateCertificatePolicyKeyPropertiesPtrOutput() CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return i.ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i *certifiateCertificatePolicyKeyPropertiesPtrType) ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyKeyPropertiesPtrOutput)
}

type CertifiateCertificatePolicyKeyPropertiesOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyKeyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyKeyProperties)(nil)).Elem()
}

func (o CertifiateCertificatePolicyKeyPropertiesOutput) ToCertifiateCertificatePolicyKeyPropertiesOutput() CertifiateCertificatePolicyKeyPropertiesOutput {
	return o
}

func (o CertifiateCertificatePolicyKeyPropertiesOutput) ToCertifiateCertificatePolicyKeyPropertiesOutputWithContext(ctx context.Context) CertifiateCertificatePolicyKeyPropertiesOutput {
	return o
}

func (o CertifiateCertificatePolicyKeyPropertiesOutput) ToCertifiateCertificatePolicyKeyPropertiesPtrOutput() CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return o.ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(context.Background())
}

func (o CertifiateCertificatePolicyKeyPropertiesOutput) ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertifiateCertificatePolicyKeyProperties) *CertifiateCertificatePolicyKeyProperties {
		return &v
	}).(CertifiateCertificatePolicyKeyPropertiesPtrOutput)
}

// Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `keyType` is `EC` or `EC-HSM`.
func (o CertifiateCertificatePolicyKeyPropertiesOutput) Curve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyKeyProperties) *string { return v.Curve }).(pulumi.StringPtrOutput)
}

// Is this certificate exportable?
func (o CertifiateCertificatePolicyKeyPropertiesOutput) Exportable() pulumi.BoolOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyKeyProperties) bool { return v.Exportable }).(pulumi.BoolOutput)
}

// The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
func (o CertifiateCertificatePolicyKeyPropertiesOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyKeyProperties) *int { return v.KeySize }).(pulumi.IntPtrOutput)
}

// Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
func (o CertifiateCertificatePolicyKeyPropertiesOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyKeyProperties) string { return v.KeyType }).(pulumi.StringOutput)
}

// Is the key reusable?
func (o CertifiateCertificatePolicyKeyPropertiesOutput) ReuseKey() pulumi.BoolOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyKeyProperties) bool { return v.ReuseKey }).(pulumi.BoolOutput)
}

type CertifiateCertificatePolicyKeyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyKeyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicyKeyProperties)(nil)).Elem()
}

func (o CertifiateCertificatePolicyKeyPropertiesPtrOutput) ToCertifiateCertificatePolicyKeyPropertiesPtrOutput() CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyKeyPropertiesPtrOutput) ToCertifiateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyKeyPropertiesPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyKeyPropertiesPtrOutput) Elem() CertifiateCertificatePolicyKeyPropertiesOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyKeyProperties) CertifiateCertificatePolicyKeyProperties {
		if v != nil {
			return *v
		}
		var ret CertifiateCertificatePolicyKeyProperties
		return ret
	}).(CertifiateCertificatePolicyKeyPropertiesOutput)
}

// Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `keyType` is `EC` or `EC-HSM`.
func (o CertifiateCertificatePolicyKeyPropertiesPtrOutput) Curve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyKeyProperties) *string {
		if v == nil {
			return nil
		}
		return v.Curve
	}).(pulumi.StringPtrOutput)
}

// Is this certificate exportable?
func (o CertifiateCertificatePolicyKeyPropertiesPtrOutput) Exportable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyKeyProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.Exportable
	}).(pulumi.BoolPtrOutput)
}

// The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
func (o CertifiateCertificatePolicyKeyPropertiesPtrOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyKeyProperties) *int {
		if v == nil {
			return nil
		}
		return v.KeySize
	}).(pulumi.IntPtrOutput)
}

// Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
func (o CertifiateCertificatePolicyKeyPropertiesPtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyKeyProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyType
	}).(pulumi.StringPtrOutput)
}

// Is the key reusable?
func (o CertifiateCertificatePolicyKeyPropertiesPtrOutput) ReuseKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyKeyProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.ReuseKey
	}).(pulumi.BoolPtrOutput)
}

type CertifiateCertificatePolicyLifetimeAction struct {
	// A `action` block as defined below.
	Action CertifiateCertificatePolicyLifetimeActionAction `pulumi:"action"`
	// A `trigger` block as defined below.
	Trigger CertifiateCertificatePolicyLifetimeActionTrigger `pulumi:"trigger"`
}

// CertifiateCertificatePolicyLifetimeActionInput is an input type that accepts CertifiateCertificatePolicyLifetimeActionArgs and CertifiateCertificatePolicyLifetimeActionOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyLifetimeActionInput` via:
//
//	CertifiateCertificatePolicyLifetimeActionArgs{...}
type CertifiateCertificatePolicyLifetimeActionInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyLifetimeActionOutput() CertifiateCertificatePolicyLifetimeActionOutput
	ToCertifiateCertificatePolicyLifetimeActionOutputWithContext(context.Context) CertifiateCertificatePolicyLifetimeActionOutput
}

type CertifiateCertificatePolicyLifetimeActionArgs struct {
	// A `action` block as defined below.
	Action CertifiateCertificatePolicyLifetimeActionActionInput `pulumi:"action"`
	// A `trigger` block as defined below.
	Trigger CertifiateCertificatePolicyLifetimeActionTriggerInput `pulumi:"trigger"`
}

func (CertifiateCertificatePolicyLifetimeActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (i CertifiateCertificatePolicyLifetimeActionArgs) ToCertifiateCertificatePolicyLifetimeActionOutput() CertifiateCertificatePolicyLifetimeActionOutput {
	return i.ToCertifiateCertificatePolicyLifetimeActionOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyLifetimeActionArgs) ToCertifiateCertificatePolicyLifetimeActionOutputWithContext(ctx context.Context) CertifiateCertificatePolicyLifetimeActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyLifetimeActionOutput)
}

// CertifiateCertificatePolicyLifetimeActionArrayInput is an input type that accepts CertifiateCertificatePolicyLifetimeActionArray and CertifiateCertificatePolicyLifetimeActionArrayOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyLifetimeActionArrayInput` via:
//
//	CertifiateCertificatePolicyLifetimeActionArray{ CertifiateCertificatePolicyLifetimeActionArgs{...} }
type CertifiateCertificatePolicyLifetimeActionArrayInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyLifetimeActionArrayOutput() CertifiateCertificatePolicyLifetimeActionArrayOutput
	ToCertifiateCertificatePolicyLifetimeActionArrayOutputWithContext(context.Context) CertifiateCertificatePolicyLifetimeActionArrayOutput
}

type CertifiateCertificatePolicyLifetimeActionArray []CertifiateCertificatePolicyLifetimeActionInput

func (CertifiateCertificatePolicyLifetimeActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertifiateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (i CertifiateCertificatePolicyLifetimeActionArray) ToCertifiateCertificatePolicyLifetimeActionArrayOutput() CertifiateCertificatePolicyLifetimeActionArrayOutput {
	return i.ToCertifiateCertificatePolicyLifetimeActionArrayOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyLifetimeActionArray) ToCertifiateCertificatePolicyLifetimeActionArrayOutputWithContext(ctx context.Context) CertifiateCertificatePolicyLifetimeActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyLifetimeActionArrayOutput)
}

type CertifiateCertificatePolicyLifetimeActionOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyLifetimeActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (o CertifiateCertificatePolicyLifetimeActionOutput) ToCertifiateCertificatePolicyLifetimeActionOutput() CertifiateCertificatePolicyLifetimeActionOutput {
	return o
}

func (o CertifiateCertificatePolicyLifetimeActionOutput) ToCertifiateCertificatePolicyLifetimeActionOutputWithContext(ctx context.Context) CertifiateCertificatePolicyLifetimeActionOutput {
	return o
}

// A `action` block as defined below.
func (o CertifiateCertificatePolicyLifetimeActionOutput) Action() CertifiateCertificatePolicyLifetimeActionActionOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyLifetimeAction) CertifiateCertificatePolicyLifetimeActionAction {
		return v.Action
	}).(CertifiateCertificatePolicyLifetimeActionActionOutput)
}

// A `trigger` block as defined below.
func (o CertifiateCertificatePolicyLifetimeActionOutput) Trigger() CertifiateCertificatePolicyLifetimeActionTriggerOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyLifetimeAction) CertifiateCertificatePolicyLifetimeActionTrigger {
		return v.Trigger
	}).(CertifiateCertificatePolicyLifetimeActionTriggerOutput)
}

type CertifiateCertificatePolicyLifetimeActionArrayOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyLifetimeActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertifiateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (o CertifiateCertificatePolicyLifetimeActionArrayOutput) ToCertifiateCertificatePolicyLifetimeActionArrayOutput() CertifiateCertificatePolicyLifetimeActionArrayOutput {
	return o
}

func (o CertifiateCertificatePolicyLifetimeActionArrayOutput) ToCertifiateCertificatePolicyLifetimeActionArrayOutputWithContext(ctx context.Context) CertifiateCertificatePolicyLifetimeActionArrayOutput {
	return o
}

func (o CertifiateCertificatePolicyLifetimeActionArrayOutput) Index(i pulumi.IntInput) CertifiateCertificatePolicyLifetimeActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertifiateCertificatePolicyLifetimeAction {
		return vs[0].([]CertifiateCertificatePolicyLifetimeAction)[vs[1].(int)]
	}).(CertifiateCertificatePolicyLifetimeActionOutput)
}

type CertifiateCertificatePolicyLifetimeActionAction struct {
	// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`.
	ActionType string `pulumi:"actionType"`
}

// CertifiateCertificatePolicyLifetimeActionActionInput is an input type that accepts CertifiateCertificatePolicyLifetimeActionActionArgs and CertifiateCertificatePolicyLifetimeActionActionOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyLifetimeActionActionInput` via:
//
//	CertifiateCertificatePolicyLifetimeActionActionArgs{...}
type CertifiateCertificatePolicyLifetimeActionActionInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyLifetimeActionActionOutput() CertifiateCertificatePolicyLifetimeActionActionOutput
	ToCertifiateCertificatePolicyLifetimeActionActionOutputWithContext(context.Context) CertifiateCertificatePolicyLifetimeActionActionOutput
}

type CertifiateCertificatePolicyLifetimeActionActionArgs struct {
	// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`.
	ActionType pulumi.StringInput `pulumi:"actionType"`
}

func (CertifiateCertificatePolicyLifetimeActionActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyLifetimeActionAction)(nil)).Elem()
}

func (i CertifiateCertificatePolicyLifetimeActionActionArgs) ToCertifiateCertificatePolicyLifetimeActionActionOutput() CertifiateCertificatePolicyLifetimeActionActionOutput {
	return i.ToCertifiateCertificatePolicyLifetimeActionActionOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyLifetimeActionActionArgs) ToCertifiateCertificatePolicyLifetimeActionActionOutputWithContext(ctx context.Context) CertifiateCertificatePolicyLifetimeActionActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyLifetimeActionActionOutput)
}

type CertifiateCertificatePolicyLifetimeActionActionOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyLifetimeActionActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyLifetimeActionAction)(nil)).Elem()
}

func (o CertifiateCertificatePolicyLifetimeActionActionOutput) ToCertifiateCertificatePolicyLifetimeActionActionOutput() CertifiateCertificatePolicyLifetimeActionActionOutput {
	return o
}

func (o CertifiateCertificatePolicyLifetimeActionActionOutput) ToCertifiateCertificatePolicyLifetimeActionActionOutputWithContext(ctx context.Context) CertifiateCertificatePolicyLifetimeActionActionOutput {
	return o
}

// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`.
func (o CertifiateCertificatePolicyLifetimeActionActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyLifetimeActionAction) string { return v.ActionType }).(pulumi.StringOutput)
}

type CertifiateCertificatePolicyLifetimeActionTrigger struct {
	// The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
	DaysBeforeExpiry *int `pulumi:"daysBeforeExpiry"`
	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
	LifetimePercentage *int `pulumi:"lifetimePercentage"`
}

// CertifiateCertificatePolicyLifetimeActionTriggerInput is an input type that accepts CertifiateCertificatePolicyLifetimeActionTriggerArgs and CertifiateCertificatePolicyLifetimeActionTriggerOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyLifetimeActionTriggerInput` via:
//
//	CertifiateCertificatePolicyLifetimeActionTriggerArgs{...}
type CertifiateCertificatePolicyLifetimeActionTriggerInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyLifetimeActionTriggerOutput() CertifiateCertificatePolicyLifetimeActionTriggerOutput
	ToCertifiateCertificatePolicyLifetimeActionTriggerOutputWithContext(context.Context) CertifiateCertificatePolicyLifetimeActionTriggerOutput
}

type CertifiateCertificatePolicyLifetimeActionTriggerArgs struct {
	// The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
	DaysBeforeExpiry pulumi.IntPtrInput `pulumi:"daysBeforeExpiry"`
	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
	LifetimePercentage pulumi.IntPtrInput `pulumi:"lifetimePercentage"`
}

func (CertifiateCertificatePolicyLifetimeActionTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyLifetimeActionTrigger)(nil)).Elem()
}

func (i CertifiateCertificatePolicyLifetimeActionTriggerArgs) ToCertifiateCertificatePolicyLifetimeActionTriggerOutput() CertifiateCertificatePolicyLifetimeActionTriggerOutput {
	return i.ToCertifiateCertificatePolicyLifetimeActionTriggerOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyLifetimeActionTriggerArgs) ToCertifiateCertificatePolicyLifetimeActionTriggerOutputWithContext(ctx context.Context) CertifiateCertificatePolicyLifetimeActionTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyLifetimeActionTriggerOutput)
}

type CertifiateCertificatePolicyLifetimeActionTriggerOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyLifetimeActionTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyLifetimeActionTrigger)(nil)).Elem()
}

func (o CertifiateCertificatePolicyLifetimeActionTriggerOutput) ToCertifiateCertificatePolicyLifetimeActionTriggerOutput() CertifiateCertificatePolicyLifetimeActionTriggerOutput {
	return o
}

func (o CertifiateCertificatePolicyLifetimeActionTriggerOutput) ToCertifiateCertificatePolicyLifetimeActionTriggerOutputWithContext(ctx context.Context) CertifiateCertificatePolicyLifetimeActionTriggerOutput {
	return o
}

// The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
func (o CertifiateCertificatePolicyLifetimeActionTriggerOutput) DaysBeforeExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyLifetimeActionTrigger) *int { return v.DaysBeforeExpiry }).(pulumi.IntPtrOutput)
}

// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
func (o CertifiateCertificatePolicyLifetimeActionTriggerOutput) LifetimePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyLifetimeActionTrigger) *int { return v.LifetimePercentage }).(pulumi.IntPtrOutput)
}

type CertifiateCertificatePolicySecretProperties struct {
	// The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
	ContentType string `pulumi:"contentType"`
}

// CertifiateCertificatePolicySecretPropertiesInput is an input type that accepts CertifiateCertificatePolicySecretPropertiesArgs and CertifiateCertificatePolicySecretPropertiesOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicySecretPropertiesInput` via:
//
//	CertifiateCertificatePolicySecretPropertiesArgs{...}
type CertifiateCertificatePolicySecretPropertiesInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicySecretPropertiesOutput() CertifiateCertificatePolicySecretPropertiesOutput
	ToCertifiateCertificatePolicySecretPropertiesOutputWithContext(context.Context) CertifiateCertificatePolicySecretPropertiesOutput
}

type CertifiateCertificatePolicySecretPropertiesArgs struct {
	// The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
	ContentType pulumi.StringInput `pulumi:"contentType"`
}

func (CertifiateCertificatePolicySecretPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicySecretProperties)(nil)).Elem()
}

func (i CertifiateCertificatePolicySecretPropertiesArgs) ToCertifiateCertificatePolicySecretPropertiesOutput() CertifiateCertificatePolicySecretPropertiesOutput {
	return i.ToCertifiateCertificatePolicySecretPropertiesOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicySecretPropertiesArgs) ToCertifiateCertificatePolicySecretPropertiesOutputWithContext(ctx context.Context) CertifiateCertificatePolicySecretPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicySecretPropertiesOutput)
}

func (i CertifiateCertificatePolicySecretPropertiesArgs) ToCertifiateCertificatePolicySecretPropertiesPtrOutput() CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return i.ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicySecretPropertiesArgs) ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicySecretPropertiesOutput).ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx)
}

// CertifiateCertificatePolicySecretPropertiesPtrInput is an input type that accepts CertifiateCertificatePolicySecretPropertiesArgs, CertifiateCertificatePolicySecretPropertiesPtr and CertifiateCertificatePolicySecretPropertiesPtrOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicySecretPropertiesPtrInput` via:
//
//	        CertifiateCertificatePolicySecretPropertiesArgs{...}
//
//	or:
//
//	        nil
type CertifiateCertificatePolicySecretPropertiesPtrInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicySecretPropertiesPtrOutput() CertifiateCertificatePolicySecretPropertiesPtrOutput
	ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(context.Context) CertifiateCertificatePolicySecretPropertiesPtrOutput
}

type certifiateCertificatePolicySecretPropertiesPtrType CertifiateCertificatePolicySecretPropertiesArgs

func CertifiateCertificatePolicySecretPropertiesPtr(v *CertifiateCertificatePolicySecretPropertiesArgs) CertifiateCertificatePolicySecretPropertiesPtrInput {
	return (*certifiateCertificatePolicySecretPropertiesPtrType)(v)
}

func (*certifiateCertificatePolicySecretPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicySecretProperties)(nil)).Elem()
}

func (i *certifiateCertificatePolicySecretPropertiesPtrType) ToCertifiateCertificatePolicySecretPropertiesPtrOutput() CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return i.ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(context.Background())
}

func (i *certifiateCertificatePolicySecretPropertiesPtrType) ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicySecretPropertiesPtrOutput)
}

type CertifiateCertificatePolicySecretPropertiesOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicySecretPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicySecretProperties)(nil)).Elem()
}

func (o CertifiateCertificatePolicySecretPropertiesOutput) ToCertifiateCertificatePolicySecretPropertiesOutput() CertifiateCertificatePolicySecretPropertiesOutput {
	return o
}

func (o CertifiateCertificatePolicySecretPropertiesOutput) ToCertifiateCertificatePolicySecretPropertiesOutputWithContext(ctx context.Context) CertifiateCertificatePolicySecretPropertiesOutput {
	return o
}

func (o CertifiateCertificatePolicySecretPropertiesOutput) ToCertifiateCertificatePolicySecretPropertiesPtrOutput() CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return o.ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(context.Background())
}

func (o CertifiateCertificatePolicySecretPropertiesOutput) ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertifiateCertificatePolicySecretProperties) *CertifiateCertificatePolicySecretProperties {
		return &v
	}).(CertifiateCertificatePolicySecretPropertiesPtrOutput)
}

// The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
func (o CertifiateCertificatePolicySecretPropertiesOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicySecretProperties) string { return v.ContentType }).(pulumi.StringOutput)
}

type CertifiateCertificatePolicySecretPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicySecretPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicySecretProperties)(nil)).Elem()
}

func (o CertifiateCertificatePolicySecretPropertiesPtrOutput) ToCertifiateCertificatePolicySecretPropertiesPtrOutput() CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return o
}

func (o CertifiateCertificatePolicySecretPropertiesPtrOutput) ToCertifiateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicySecretPropertiesPtrOutput {
	return o
}

func (o CertifiateCertificatePolicySecretPropertiesPtrOutput) Elem() CertifiateCertificatePolicySecretPropertiesOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicySecretProperties) CertifiateCertificatePolicySecretProperties {
		if v != nil {
			return *v
		}
		var ret CertifiateCertificatePolicySecretProperties
		return ret
	}).(CertifiateCertificatePolicySecretPropertiesOutput)
}

// The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
func (o CertifiateCertificatePolicySecretPropertiesPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicySecretProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ContentType
	}).(pulumi.StringPtrOutput)
}

type CertifiateCertificatePolicyX509CertificateProperties struct {
	// A list of Extended/Enhanced Key Usages.
	ExtendedKeyUsages []string `pulumi:"extendedKeyUsages"`
	// A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
	KeyUsages []string `pulumi:"keyUsages"`
	// The Certificate's Subject.
	Subject string `pulumi:"subject"`
	// A `subjectAlternativeNames` block as defined below.
	SubjectAlternativeNames *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames `pulumi:"subjectAlternativeNames"`
	// The Certificates Validity Period in Months.
	ValidityInMonths int `pulumi:"validityInMonths"`
}

// CertifiateCertificatePolicyX509CertificatePropertiesInput is an input type that accepts CertifiateCertificatePolicyX509CertificatePropertiesArgs and CertifiateCertificatePolicyX509CertificatePropertiesOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyX509CertificatePropertiesInput` via:
//
//	CertifiateCertificatePolicyX509CertificatePropertiesArgs{...}
type CertifiateCertificatePolicyX509CertificatePropertiesInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyX509CertificatePropertiesOutput() CertifiateCertificatePolicyX509CertificatePropertiesOutput
	ToCertifiateCertificatePolicyX509CertificatePropertiesOutputWithContext(context.Context) CertifiateCertificatePolicyX509CertificatePropertiesOutput
}

type CertifiateCertificatePolicyX509CertificatePropertiesArgs struct {
	// A list of Extended/Enhanced Key Usages.
	ExtendedKeyUsages pulumi.StringArrayInput `pulumi:"extendedKeyUsages"`
	// A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
	KeyUsages pulumi.StringArrayInput `pulumi:"keyUsages"`
	// The Certificate's Subject.
	Subject pulumi.StringInput `pulumi:"subject"`
	// A `subjectAlternativeNames` block as defined below.
	SubjectAlternativeNames CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput `pulumi:"subjectAlternativeNames"`
	// The Certificates Validity Period in Months.
	ValidityInMonths pulumi.IntInput `pulumi:"validityInMonths"`
}

func (CertifiateCertificatePolicyX509CertificatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyX509CertificateProperties)(nil)).Elem()
}

func (i CertifiateCertificatePolicyX509CertificatePropertiesArgs) ToCertifiateCertificatePolicyX509CertificatePropertiesOutput() CertifiateCertificatePolicyX509CertificatePropertiesOutput {
	return i.ToCertifiateCertificatePolicyX509CertificatePropertiesOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyX509CertificatePropertiesArgs) ToCertifiateCertificatePolicyX509CertificatePropertiesOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyX509CertificatePropertiesOutput)
}

func (i CertifiateCertificatePolicyX509CertificatePropertiesArgs) ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return i.ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyX509CertificatePropertiesArgs) ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyX509CertificatePropertiesOutput).ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx)
}

// CertifiateCertificatePolicyX509CertificatePropertiesPtrInput is an input type that accepts CertifiateCertificatePolicyX509CertificatePropertiesArgs, CertifiateCertificatePolicyX509CertificatePropertiesPtr and CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyX509CertificatePropertiesPtrInput` via:
//
//	        CertifiateCertificatePolicyX509CertificatePropertiesArgs{...}
//
//	or:
//
//	        nil
type CertifiateCertificatePolicyX509CertificatePropertiesPtrInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput
	ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(context.Context) CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput
}

type certifiateCertificatePolicyX509CertificatePropertiesPtrType CertifiateCertificatePolicyX509CertificatePropertiesArgs

func CertifiateCertificatePolicyX509CertificatePropertiesPtr(v *CertifiateCertificatePolicyX509CertificatePropertiesArgs) CertifiateCertificatePolicyX509CertificatePropertiesPtrInput {
	return (*certifiateCertificatePolicyX509CertificatePropertiesPtrType)(v)
}

func (*certifiateCertificatePolicyX509CertificatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicyX509CertificateProperties)(nil)).Elem()
}

func (i *certifiateCertificatePolicyX509CertificatePropertiesPtrType) ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return i.ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i *certifiateCertificatePolicyX509CertificatePropertiesPtrType) ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput)
}

type CertifiateCertificatePolicyX509CertificatePropertiesOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyX509CertificatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyX509CertificateProperties)(nil)).Elem()
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesOutput() CertifiateCertificatePolicyX509CertificatePropertiesOutput {
	return o
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesOutput {
	return o
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o.ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(context.Background())
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertifiateCertificatePolicyX509CertificateProperties) *CertifiateCertificatePolicyX509CertificateProperties {
		return &v
	}).(CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput)
}

// A list of Extended/Enhanced Key Usages.
func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) ExtendedKeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyX509CertificateProperties) []string { return v.ExtendedKeyUsages }).(pulumi.StringArrayOutput)
}

// A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) KeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyX509CertificateProperties) []string { return v.KeyUsages }).(pulumi.StringArrayOutput)
}

// The Certificate's Subject.
func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyX509CertificateProperties) string { return v.Subject }).(pulumi.StringOutput)
}

// A `subjectAlternativeNames` block as defined below.
func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) SubjectAlternativeNames() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyX509CertificateProperties) *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames {
		return v.SubjectAlternativeNames
	}).(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput)
}

// The Certificates Validity Period in Months.
func (o CertifiateCertificatePolicyX509CertificatePropertiesOutput) ValidityInMonths() pulumi.IntOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyX509CertificateProperties) int { return v.ValidityInMonths }).(pulumi.IntOutput)
}

type CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicyX509CertificateProperties)(nil)).Elem()
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) Elem() CertifiateCertificatePolicyX509CertificatePropertiesOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificateProperties) CertifiateCertificatePolicyX509CertificateProperties {
		if v != nil {
			return *v
		}
		var ret CertifiateCertificatePolicyX509CertificateProperties
		return ret
	}).(CertifiateCertificatePolicyX509CertificatePropertiesOutput)
}

// A list of Extended/Enhanced Key Usages.
func (o CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) ExtendedKeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificateProperties) []string {
		if v == nil {
			return nil
		}
		return v.ExtendedKeyUsages
	}).(pulumi.StringArrayOutput)
}

// A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
func (o CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) KeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificateProperties) []string {
		if v == nil {
			return nil
		}
		return v.KeyUsages
	}).(pulumi.StringArrayOutput)
}

// The Certificate's Subject.
func (o CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificateProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(pulumi.StringPtrOutput)
}

// A `subjectAlternativeNames` block as defined below.
func (o CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) SubjectAlternativeNames() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificateProperties) *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames {
		if v == nil {
			return nil
		}
		return v.SubjectAlternativeNames
	}).(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput)
}

// The Certificates Validity Period in Months.
func (o CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput) ValidityInMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificateProperties) *int {
		if v == nil {
			return nil
		}
		return &v.ValidityInMonths
	}).(pulumi.IntPtrOutput)
}

type CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames struct {
	// A list of alternative DNS names (FQDNs) identified by the Certificate.
	DnsNames []string `pulumi:"dnsNames"`
	// A list of email addresses identified by this Certificate.
	Emails []string `pulumi:"emails"`
	// A list of User Principal Names identified by the Certificate.
	Upns []string `pulumi:"upns"`
}

// CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesInput is an input type that accepts CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs and CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesInput` via:
//
//	CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{...}
type CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput
	ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutputWithContext(context.Context) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput
}

type CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs struct {
	// A list of alternative DNS names (FQDNs) identified by the Certificate.
	DnsNames pulumi.StringArrayInput `pulumi:"dnsNames"`
	// A list of email addresses identified by this Certificate.
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// A list of User Principal Names identified by the Certificate.
	Upns pulumi.StringArrayInput `pulumi:"upns"`
}

func (CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames)(nil)).Elem()
}

func (i CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return i.ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput)
}

func (i CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return i.ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(context.Background())
}

func (i CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput).ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx)
}

// CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput is an input type that accepts CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs, CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtr and CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput values.
// You can construct a concrete instance of `CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput` via:
//
//	        CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{...}
//
//	or:
//
//	        nil
type CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput interface {
	pulumi.Input

	ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput
	ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(context.Context) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput
}

type certifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs

func CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtr(v *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput {
	return (*certifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType)(v)
}

func (*certifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames)(nil)).Elem()
}

func (i *certifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return i.ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(context.Background())
}

func (i *certifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput)
}

type CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames)(nil)).Elem()
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return o
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return o
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o.ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(context.Background())
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames {
		return &v
	}).(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput)
}

// A list of alternative DNS names (FQDNs) identified by the Certificate.
func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// A list of email addresses identified by this Certificate.
func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// A list of User Principal Names identified by the Certificate.
func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) Upns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		return v.Upns
	}).(pulumi.StringArrayOutput)
}

type CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput struct{ *pulumi.OutputState }

func (CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames)(nil)).Elem()
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) ToCertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx context.Context) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o
}

func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) Elem() CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames {
		if v != nil {
			return *v
		}
		var ret CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames
		return ret
	}).(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput)
}

// A list of alternative DNS names (FQDNs) identified by the Certificate.
func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		if v == nil {
			return nil
		}
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// A list of email addresses identified by this Certificate.
func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// A list of User Principal Names identified by the Certificate.
func (o CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) Upns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		if v == nil {
			return nil
		}
		return v.Upns
	}).(pulumi.StringArrayOutput)
}

type CertificateCertificate struct {
	// The base64-encoded certificate contents.
	Contents string `pulumi:"contents"`
	// The password associated with the certificate.
	//
	// > **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a privateKey in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
	//
	// To convert a private key to pkcs8 format with openssl use:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The PEM content should look something like:
	Password *string `pulumi:"password"`
}

// CertificateCertificateInput is an input type that accepts CertificateCertificateArgs and CertificateCertificateOutput values.
// You can construct a concrete instance of `CertificateCertificateInput` via:
//
//	CertificateCertificateArgs{...}
type CertificateCertificateInput interface {
	pulumi.Input

	ToCertificateCertificateOutput() CertificateCertificateOutput
	ToCertificateCertificateOutputWithContext(context.Context) CertificateCertificateOutput
}

type CertificateCertificateArgs struct {
	// The base64-encoded certificate contents.
	Contents pulumi.StringInput `pulumi:"contents"`
	// The password associated with the certificate.
	//
	// > **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a privateKey in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
	//
	// To convert a private key to pkcs8 format with openssl use:
	// ```go
	// package main
	//
	// import (
	// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	// )
	//
	// func main() {
	// 	pulumi.Run(func(ctx *pulumi.Context) error {
	// 		return nil
	// 	})
	// }
	// ```
	//
	// The PEM content should look something like:
	Password pulumi.StringPtrInput `pulumi:"password"`
}

func (CertificateCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificate)(nil)).Elem()
}

func (i CertificateCertificateArgs) ToCertificateCertificateOutput() CertificateCertificateOutput {
	return i.ToCertificateCertificateOutputWithContext(context.Background())
}

func (i CertificateCertificateArgs) ToCertificateCertificateOutputWithContext(ctx context.Context) CertificateCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificateOutput)
}

func (i CertificateCertificateArgs) ToCertificateCertificatePtrOutput() CertificateCertificatePtrOutput {
	return i.ToCertificateCertificatePtrOutputWithContext(context.Background())
}

func (i CertificateCertificateArgs) ToCertificateCertificatePtrOutputWithContext(ctx context.Context) CertificateCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificateOutput).ToCertificateCertificatePtrOutputWithContext(ctx)
}

// CertificateCertificatePtrInput is an input type that accepts CertificateCertificateArgs, CertificateCertificatePtr and CertificateCertificatePtrOutput values.
// You can construct a concrete instance of `CertificateCertificatePtrInput` via:
//
//	        CertificateCertificateArgs{...}
//
//	or:
//
//	        nil
type CertificateCertificatePtrInput interface {
	pulumi.Input

	ToCertificateCertificatePtrOutput() CertificateCertificatePtrOutput
	ToCertificateCertificatePtrOutputWithContext(context.Context) CertificateCertificatePtrOutput
}

type certificateCertificatePtrType CertificateCertificateArgs

func CertificateCertificatePtr(v *CertificateCertificateArgs) CertificateCertificatePtrInput {
	return (*certificateCertificatePtrType)(v)
}

func (*certificateCertificatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificate)(nil)).Elem()
}

func (i *certificateCertificatePtrType) ToCertificateCertificatePtrOutput() CertificateCertificatePtrOutput {
	return i.ToCertificateCertificatePtrOutputWithContext(context.Background())
}

func (i *certificateCertificatePtrType) ToCertificateCertificatePtrOutputWithContext(ctx context.Context) CertificateCertificatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePtrOutput)
}

type CertificateCertificateOutput struct{ *pulumi.OutputState }

func (CertificateCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificate)(nil)).Elem()
}

func (o CertificateCertificateOutput) ToCertificateCertificateOutput() CertificateCertificateOutput {
	return o
}

func (o CertificateCertificateOutput) ToCertificateCertificateOutputWithContext(ctx context.Context) CertificateCertificateOutput {
	return o
}

func (o CertificateCertificateOutput) ToCertificateCertificatePtrOutput() CertificateCertificatePtrOutput {
	return o.ToCertificateCertificatePtrOutputWithContext(context.Background())
}

func (o CertificateCertificateOutput) ToCertificateCertificatePtrOutputWithContext(ctx context.Context) CertificateCertificatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateCertificate) *CertificateCertificate {
		return &v
	}).(CertificateCertificatePtrOutput)
}

// The base64-encoded certificate contents.
func (o CertificateCertificateOutput) Contents() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateCertificate) string { return v.Contents }).(pulumi.StringOutput)
}

// The password associated with the certificate.
//
// > **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a privateKey in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
//
// To convert a private key to pkcs8 format with openssl use:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// The PEM content should look something like:
func (o CertificateCertificateOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateCertificate) *string { return v.Password }).(pulumi.StringPtrOutput)
}

type CertificateCertificatePtrOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificate)(nil)).Elem()
}

func (o CertificateCertificatePtrOutput) ToCertificateCertificatePtrOutput() CertificateCertificatePtrOutput {
	return o
}

func (o CertificateCertificatePtrOutput) ToCertificateCertificatePtrOutputWithContext(ctx context.Context) CertificateCertificatePtrOutput {
	return o
}

func (o CertificateCertificatePtrOutput) Elem() CertificateCertificateOutput {
	return o.ApplyT(func(v *CertificateCertificate) CertificateCertificate {
		if v != nil {
			return *v
		}
		var ret CertificateCertificate
		return ret
	}).(CertificateCertificateOutput)
}

// The base64-encoded certificate contents.
func (o CertificateCertificatePtrOutput) Contents() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCertificate) *string {
		if v == nil {
			return nil
		}
		return &v.Contents
	}).(pulumi.StringPtrOutput)
}

// The password associated with the certificate.
//
// > **NOTE:** A PEM certificate is already base64 encoded. To successfully import, the `contents` property should include a PEM encoded X509 certificate and a privateKey in pkcs8 format. There should only be linux style `\n` line endings and the whole block should have the PEM begin/end blocks around the certificate data and the private key data.
//
// To convert a private key to pkcs8 format with openssl use:
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			return nil
//		})
//	}
//
// ```
//
// The PEM content should look something like:
func (o CertificateCertificatePtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCertificate) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

type CertificateCertificateAttribute struct {
	// The create time of the Key Vault Certificate.
	Created *string `pulumi:"created"`
	// whether the Key Vault Certificate is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The expires time of the Key Vault Certificate.
	Expires *string `pulumi:"expires"`
	// The not before valid time of the Key Vault Certificate.
	NotBefore *string `pulumi:"notBefore"`
	// The deletion recovery level of the Key Vault Certificate.
	RecoveryLevel *string `pulumi:"recoveryLevel"`
	// The recent update time of the Key Vault Certificate.
	Updated *string `pulumi:"updated"`
}

// CertificateCertificateAttributeInput is an input type that accepts CertificateCertificateAttributeArgs and CertificateCertificateAttributeOutput values.
// You can construct a concrete instance of `CertificateCertificateAttributeInput` via:
//
//	CertificateCertificateAttributeArgs{...}
type CertificateCertificateAttributeInput interface {
	pulumi.Input

	ToCertificateCertificateAttributeOutput() CertificateCertificateAttributeOutput
	ToCertificateCertificateAttributeOutputWithContext(context.Context) CertificateCertificateAttributeOutput
}

type CertificateCertificateAttributeArgs struct {
	// The create time of the Key Vault Certificate.
	Created pulumi.StringPtrInput `pulumi:"created"`
	// whether the Key Vault Certificate is enabled.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// The expires time of the Key Vault Certificate.
	Expires pulumi.StringPtrInput `pulumi:"expires"`
	// The not before valid time of the Key Vault Certificate.
	NotBefore pulumi.StringPtrInput `pulumi:"notBefore"`
	// The deletion recovery level of the Key Vault Certificate.
	RecoveryLevel pulumi.StringPtrInput `pulumi:"recoveryLevel"`
	// The recent update time of the Key Vault Certificate.
	Updated pulumi.StringPtrInput `pulumi:"updated"`
}

func (CertificateCertificateAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificateAttribute)(nil)).Elem()
}

func (i CertificateCertificateAttributeArgs) ToCertificateCertificateAttributeOutput() CertificateCertificateAttributeOutput {
	return i.ToCertificateCertificateAttributeOutputWithContext(context.Background())
}

func (i CertificateCertificateAttributeArgs) ToCertificateCertificateAttributeOutputWithContext(ctx context.Context) CertificateCertificateAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificateAttributeOutput)
}

// CertificateCertificateAttributeArrayInput is an input type that accepts CertificateCertificateAttributeArray and CertificateCertificateAttributeArrayOutput values.
// You can construct a concrete instance of `CertificateCertificateAttributeArrayInput` via:
//
//	CertificateCertificateAttributeArray{ CertificateCertificateAttributeArgs{...} }
type CertificateCertificateAttributeArrayInput interface {
	pulumi.Input

	ToCertificateCertificateAttributeArrayOutput() CertificateCertificateAttributeArrayOutput
	ToCertificateCertificateAttributeArrayOutputWithContext(context.Context) CertificateCertificateAttributeArrayOutput
}

type CertificateCertificateAttributeArray []CertificateCertificateAttributeInput

func (CertificateCertificateAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateCertificateAttribute)(nil)).Elem()
}

func (i CertificateCertificateAttributeArray) ToCertificateCertificateAttributeArrayOutput() CertificateCertificateAttributeArrayOutput {
	return i.ToCertificateCertificateAttributeArrayOutputWithContext(context.Background())
}

func (i CertificateCertificateAttributeArray) ToCertificateCertificateAttributeArrayOutputWithContext(ctx context.Context) CertificateCertificateAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificateAttributeArrayOutput)
}

type CertificateCertificateAttributeOutput struct{ *pulumi.OutputState }

func (CertificateCertificateAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificateAttribute)(nil)).Elem()
}

func (o CertificateCertificateAttributeOutput) ToCertificateCertificateAttributeOutput() CertificateCertificateAttributeOutput {
	return o
}

func (o CertificateCertificateAttributeOutput) ToCertificateCertificateAttributeOutputWithContext(ctx context.Context) CertificateCertificateAttributeOutput {
	return o
}

// The create time of the Key Vault Certificate.
func (o CertificateCertificateAttributeOutput) Created() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateCertificateAttribute) *string { return v.Created }).(pulumi.StringPtrOutput)
}

// whether the Key Vault Certificate is enabled.
func (o CertificateCertificateAttributeOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CertificateCertificateAttribute) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The expires time of the Key Vault Certificate.
func (o CertificateCertificateAttributeOutput) Expires() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateCertificateAttribute) *string { return v.Expires }).(pulumi.StringPtrOutput)
}

// The not before valid time of the Key Vault Certificate.
func (o CertificateCertificateAttributeOutput) NotBefore() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateCertificateAttribute) *string { return v.NotBefore }).(pulumi.StringPtrOutput)
}

// The deletion recovery level of the Key Vault Certificate.
func (o CertificateCertificateAttributeOutput) RecoveryLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateCertificateAttribute) *string { return v.RecoveryLevel }).(pulumi.StringPtrOutput)
}

// The recent update time of the Key Vault Certificate.
func (o CertificateCertificateAttributeOutput) Updated() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateCertificateAttribute) *string { return v.Updated }).(pulumi.StringPtrOutput)
}

type CertificateCertificateAttributeArrayOutput struct{ *pulumi.OutputState }

func (CertificateCertificateAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateCertificateAttribute)(nil)).Elem()
}

func (o CertificateCertificateAttributeArrayOutput) ToCertificateCertificateAttributeArrayOutput() CertificateCertificateAttributeArrayOutput {
	return o
}

func (o CertificateCertificateAttributeArrayOutput) ToCertificateCertificateAttributeArrayOutputWithContext(ctx context.Context) CertificateCertificateAttributeArrayOutput {
	return o
}

func (o CertificateCertificateAttributeArrayOutput) Index(i pulumi.IntInput) CertificateCertificateAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateCertificateAttribute {
		return vs[0].([]CertificateCertificateAttribute)[vs[1].(int)]
	}).(CertificateCertificateAttributeOutput)
}

type CertificateCertificatePolicy struct {
	// A `issuerParameters` block as defined below.
	IssuerParameters CertificateCertificatePolicyIssuerParameters `pulumi:"issuerParameters"`
	// A `keyProperties` block as defined below.
	KeyProperties CertificateCertificatePolicyKeyProperties `pulumi:"keyProperties"`
	// A `lifetimeAction` block as defined below.
	LifetimeActions []CertificateCertificatePolicyLifetimeAction `pulumi:"lifetimeActions"`
	// A `secretProperties` block as defined below.
	SecretProperties CertificateCertificatePolicySecretProperties `pulumi:"secretProperties"`
	// A `x509CertificateProperties` block as defined below. Required when `certificate` block is not specified.
	X509CertificateProperties *CertificateCertificatePolicyX509CertificateProperties `pulumi:"x509CertificateProperties"`
}

// CertificateCertificatePolicyInput is an input type that accepts CertificateCertificatePolicyArgs and CertificateCertificatePolicyOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyInput` via:
//
//	CertificateCertificatePolicyArgs{...}
type CertificateCertificatePolicyInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyOutput() CertificateCertificatePolicyOutput
	ToCertificateCertificatePolicyOutputWithContext(context.Context) CertificateCertificatePolicyOutput
}

type CertificateCertificatePolicyArgs struct {
	// A `issuerParameters` block as defined below.
	IssuerParameters CertificateCertificatePolicyIssuerParametersInput `pulumi:"issuerParameters"`
	// A `keyProperties` block as defined below.
	KeyProperties CertificateCertificatePolicyKeyPropertiesInput `pulumi:"keyProperties"`
	// A `lifetimeAction` block as defined below.
	LifetimeActions CertificateCertificatePolicyLifetimeActionArrayInput `pulumi:"lifetimeActions"`
	// A `secretProperties` block as defined below.
	SecretProperties CertificateCertificatePolicySecretPropertiesInput `pulumi:"secretProperties"`
	// A `x509CertificateProperties` block as defined below. Required when `certificate` block is not specified.
	X509CertificateProperties CertificateCertificatePolicyX509CertificatePropertiesPtrInput `pulumi:"x509CertificateProperties"`
}

func (CertificateCertificatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicy)(nil)).Elem()
}

func (i CertificateCertificatePolicyArgs) ToCertificateCertificatePolicyOutput() CertificateCertificatePolicyOutput {
	return i.ToCertificateCertificatePolicyOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyArgs) ToCertificateCertificatePolicyOutputWithContext(ctx context.Context) CertificateCertificatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyOutput)
}

func (i CertificateCertificatePolicyArgs) ToCertificateCertificatePolicyPtrOutput() CertificateCertificatePolicyPtrOutput {
	return i.ToCertificateCertificatePolicyPtrOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyArgs) ToCertificateCertificatePolicyPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyOutput).ToCertificateCertificatePolicyPtrOutputWithContext(ctx)
}

// CertificateCertificatePolicyPtrInput is an input type that accepts CertificateCertificatePolicyArgs, CertificateCertificatePolicyPtr and CertificateCertificatePolicyPtrOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyPtrInput` via:
//
//	        CertificateCertificatePolicyArgs{...}
//
//	or:
//
//	        nil
type CertificateCertificatePolicyPtrInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyPtrOutput() CertificateCertificatePolicyPtrOutput
	ToCertificateCertificatePolicyPtrOutputWithContext(context.Context) CertificateCertificatePolicyPtrOutput
}

type certificateCertificatePolicyPtrType CertificateCertificatePolicyArgs

func CertificateCertificatePolicyPtr(v *CertificateCertificatePolicyArgs) CertificateCertificatePolicyPtrInput {
	return (*certificateCertificatePolicyPtrType)(v)
}

func (*certificateCertificatePolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicy)(nil)).Elem()
}

func (i *certificateCertificatePolicyPtrType) ToCertificateCertificatePolicyPtrOutput() CertificateCertificatePolicyPtrOutput {
	return i.ToCertificateCertificatePolicyPtrOutputWithContext(context.Background())
}

func (i *certificateCertificatePolicyPtrType) ToCertificateCertificatePolicyPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyPtrOutput)
}

type CertificateCertificatePolicyOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicy)(nil)).Elem()
}

func (o CertificateCertificatePolicyOutput) ToCertificateCertificatePolicyOutput() CertificateCertificatePolicyOutput {
	return o
}

func (o CertificateCertificatePolicyOutput) ToCertificateCertificatePolicyOutputWithContext(ctx context.Context) CertificateCertificatePolicyOutput {
	return o
}

func (o CertificateCertificatePolicyOutput) ToCertificateCertificatePolicyPtrOutput() CertificateCertificatePolicyPtrOutput {
	return o.ToCertificateCertificatePolicyPtrOutputWithContext(context.Background())
}

func (o CertificateCertificatePolicyOutput) ToCertificateCertificatePolicyPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateCertificatePolicy) *CertificateCertificatePolicy {
		return &v
	}).(CertificateCertificatePolicyPtrOutput)
}

// A `issuerParameters` block as defined below.
func (o CertificateCertificatePolicyOutput) IssuerParameters() CertificateCertificatePolicyIssuerParametersOutput {
	return o.ApplyT(func(v CertificateCertificatePolicy) CertificateCertificatePolicyIssuerParameters {
		return v.IssuerParameters
	}).(CertificateCertificatePolicyIssuerParametersOutput)
}

// A `keyProperties` block as defined below.
func (o CertificateCertificatePolicyOutput) KeyProperties() CertificateCertificatePolicyKeyPropertiesOutput {
	return o.ApplyT(func(v CertificateCertificatePolicy) CertificateCertificatePolicyKeyProperties { return v.KeyProperties }).(CertificateCertificatePolicyKeyPropertiesOutput)
}

// A `lifetimeAction` block as defined below.
func (o CertificateCertificatePolicyOutput) LifetimeActions() CertificateCertificatePolicyLifetimeActionArrayOutput {
	return o.ApplyT(func(v CertificateCertificatePolicy) []CertificateCertificatePolicyLifetimeAction {
		return v.LifetimeActions
	}).(CertificateCertificatePolicyLifetimeActionArrayOutput)
}

// A `secretProperties` block as defined below.
func (o CertificateCertificatePolicyOutput) SecretProperties() CertificateCertificatePolicySecretPropertiesOutput {
	return o.ApplyT(func(v CertificateCertificatePolicy) CertificateCertificatePolicySecretProperties {
		return v.SecretProperties
	}).(CertificateCertificatePolicySecretPropertiesOutput)
}

// A `x509CertificateProperties` block as defined below. Required when `certificate` block is not specified.
func (o CertificateCertificatePolicyOutput) X509CertificateProperties() CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o.ApplyT(func(v CertificateCertificatePolicy) *CertificateCertificatePolicyX509CertificateProperties {
		return v.X509CertificateProperties
	}).(CertificateCertificatePolicyX509CertificatePropertiesPtrOutput)
}

type CertificateCertificatePolicyPtrOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicy)(nil)).Elem()
}

func (o CertificateCertificatePolicyPtrOutput) ToCertificateCertificatePolicyPtrOutput() CertificateCertificatePolicyPtrOutput {
	return o
}

func (o CertificateCertificatePolicyPtrOutput) ToCertificateCertificatePolicyPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyPtrOutput {
	return o
}

func (o CertificateCertificatePolicyPtrOutput) Elem() CertificateCertificatePolicyOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicy) CertificateCertificatePolicy {
		if v != nil {
			return *v
		}
		var ret CertificateCertificatePolicy
		return ret
	}).(CertificateCertificatePolicyOutput)
}

// A `issuerParameters` block as defined below.
func (o CertificateCertificatePolicyPtrOutput) IssuerParameters() CertificateCertificatePolicyIssuerParametersPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicy) *CertificateCertificatePolicyIssuerParameters {
		if v == nil {
			return nil
		}
		return &v.IssuerParameters
	}).(CertificateCertificatePolicyIssuerParametersPtrOutput)
}

// A `keyProperties` block as defined below.
func (o CertificateCertificatePolicyPtrOutput) KeyProperties() CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicy) *CertificateCertificatePolicyKeyProperties {
		if v == nil {
			return nil
		}
		return &v.KeyProperties
	}).(CertificateCertificatePolicyKeyPropertiesPtrOutput)
}

// A `lifetimeAction` block as defined below.
func (o CertificateCertificatePolicyPtrOutput) LifetimeActions() CertificateCertificatePolicyLifetimeActionArrayOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicy) []CertificateCertificatePolicyLifetimeAction {
		if v == nil {
			return nil
		}
		return v.LifetimeActions
	}).(CertificateCertificatePolicyLifetimeActionArrayOutput)
}

// A `secretProperties` block as defined below.
func (o CertificateCertificatePolicyPtrOutput) SecretProperties() CertificateCertificatePolicySecretPropertiesPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicy) *CertificateCertificatePolicySecretProperties {
		if v == nil {
			return nil
		}
		return &v.SecretProperties
	}).(CertificateCertificatePolicySecretPropertiesPtrOutput)
}

// A `x509CertificateProperties` block as defined below. Required when `certificate` block is not specified.
func (o CertificateCertificatePolicyPtrOutput) X509CertificateProperties() CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicy) *CertificateCertificatePolicyX509CertificateProperties {
		if v == nil {
			return nil
		}
		return v.X509CertificateProperties
	}).(CertificateCertificatePolicyX509CertificatePropertiesPtrOutput)
}

type CertificateCertificatePolicyIssuerParameters struct {
	// The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
	Name string `pulumi:"name"`
}

// CertificateCertificatePolicyIssuerParametersInput is an input type that accepts CertificateCertificatePolicyIssuerParametersArgs and CertificateCertificatePolicyIssuerParametersOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyIssuerParametersInput` via:
//
//	CertificateCertificatePolicyIssuerParametersArgs{...}
type CertificateCertificatePolicyIssuerParametersInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyIssuerParametersOutput() CertificateCertificatePolicyIssuerParametersOutput
	ToCertificateCertificatePolicyIssuerParametersOutputWithContext(context.Context) CertificateCertificatePolicyIssuerParametersOutput
}

type CertificateCertificatePolicyIssuerParametersArgs struct {
	// The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
	Name pulumi.StringInput `pulumi:"name"`
}

func (CertificateCertificatePolicyIssuerParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyIssuerParameters)(nil)).Elem()
}

func (i CertificateCertificatePolicyIssuerParametersArgs) ToCertificateCertificatePolicyIssuerParametersOutput() CertificateCertificatePolicyIssuerParametersOutput {
	return i.ToCertificateCertificatePolicyIssuerParametersOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyIssuerParametersArgs) ToCertificateCertificatePolicyIssuerParametersOutputWithContext(ctx context.Context) CertificateCertificatePolicyIssuerParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyIssuerParametersOutput)
}

func (i CertificateCertificatePolicyIssuerParametersArgs) ToCertificateCertificatePolicyIssuerParametersPtrOutput() CertificateCertificatePolicyIssuerParametersPtrOutput {
	return i.ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyIssuerParametersArgs) ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyIssuerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyIssuerParametersOutput).ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx)
}

// CertificateCertificatePolicyIssuerParametersPtrInput is an input type that accepts CertificateCertificatePolicyIssuerParametersArgs, CertificateCertificatePolicyIssuerParametersPtr and CertificateCertificatePolicyIssuerParametersPtrOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyIssuerParametersPtrInput` via:
//
//	        CertificateCertificatePolicyIssuerParametersArgs{...}
//
//	or:
//
//	        nil
type CertificateCertificatePolicyIssuerParametersPtrInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyIssuerParametersPtrOutput() CertificateCertificatePolicyIssuerParametersPtrOutput
	ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(context.Context) CertificateCertificatePolicyIssuerParametersPtrOutput
}

type certificateCertificatePolicyIssuerParametersPtrType CertificateCertificatePolicyIssuerParametersArgs

func CertificateCertificatePolicyIssuerParametersPtr(v *CertificateCertificatePolicyIssuerParametersArgs) CertificateCertificatePolicyIssuerParametersPtrInput {
	return (*certificateCertificatePolicyIssuerParametersPtrType)(v)
}

func (*certificateCertificatePolicyIssuerParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicyIssuerParameters)(nil)).Elem()
}

func (i *certificateCertificatePolicyIssuerParametersPtrType) ToCertificateCertificatePolicyIssuerParametersPtrOutput() CertificateCertificatePolicyIssuerParametersPtrOutput {
	return i.ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(context.Background())
}

func (i *certificateCertificatePolicyIssuerParametersPtrType) ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyIssuerParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyIssuerParametersPtrOutput)
}

type CertificateCertificatePolicyIssuerParametersOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyIssuerParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyIssuerParameters)(nil)).Elem()
}

func (o CertificateCertificatePolicyIssuerParametersOutput) ToCertificateCertificatePolicyIssuerParametersOutput() CertificateCertificatePolicyIssuerParametersOutput {
	return o
}

func (o CertificateCertificatePolicyIssuerParametersOutput) ToCertificateCertificatePolicyIssuerParametersOutputWithContext(ctx context.Context) CertificateCertificatePolicyIssuerParametersOutput {
	return o
}

func (o CertificateCertificatePolicyIssuerParametersOutput) ToCertificateCertificatePolicyIssuerParametersPtrOutput() CertificateCertificatePolicyIssuerParametersPtrOutput {
	return o.ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(context.Background())
}

func (o CertificateCertificatePolicyIssuerParametersOutput) ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyIssuerParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateCertificatePolicyIssuerParameters) *CertificateCertificatePolicyIssuerParameters {
		return &v
	}).(CertificateCertificatePolicyIssuerParametersPtrOutput)
}

// The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
func (o CertificateCertificatePolicyIssuerParametersOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyIssuerParameters) string { return v.Name }).(pulumi.StringOutput)
}

type CertificateCertificatePolicyIssuerParametersPtrOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyIssuerParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicyIssuerParameters)(nil)).Elem()
}

func (o CertificateCertificatePolicyIssuerParametersPtrOutput) ToCertificateCertificatePolicyIssuerParametersPtrOutput() CertificateCertificatePolicyIssuerParametersPtrOutput {
	return o
}

func (o CertificateCertificatePolicyIssuerParametersPtrOutput) ToCertificateCertificatePolicyIssuerParametersPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyIssuerParametersPtrOutput {
	return o
}

func (o CertificateCertificatePolicyIssuerParametersPtrOutput) Elem() CertificateCertificatePolicyIssuerParametersOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyIssuerParameters) CertificateCertificatePolicyIssuerParameters {
		if v != nil {
			return *v
		}
		var ret CertificateCertificatePolicyIssuerParameters
		return ret
	}).(CertificateCertificatePolicyIssuerParametersOutput)
}

// The name of the Certificate Issuer. Possible values include `Self` (for self-signed certificate), or `Unknown` (for a certificate issuing authority like `Let's Encrypt` and Azure direct supported ones).
func (o CertificateCertificatePolicyIssuerParametersPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyIssuerParameters) *string {
		if v == nil {
			return nil
		}
		return &v.Name
	}).(pulumi.StringPtrOutput)
}

type CertificateCertificatePolicyKeyProperties struct {
	// Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `keyType` is `EC` or `EC-HSM`.
	Curve *string `pulumi:"curve"`
	// Is this certificate exportable?
	Exportable bool `pulumi:"exportable"`
	// The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
	KeySize *int `pulumi:"keySize"`
	// Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
	KeyType string `pulumi:"keyType"`
	// Is the key reusable?
	ReuseKey bool `pulumi:"reuseKey"`
}

// CertificateCertificatePolicyKeyPropertiesInput is an input type that accepts CertificateCertificatePolicyKeyPropertiesArgs and CertificateCertificatePolicyKeyPropertiesOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyKeyPropertiesInput` via:
//
//	CertificateCertificatePolicyKeyPropertiesArgs{...}
type CertificateCertificatePolicyKeyPropertiesInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyKeyPropertiesOutput() CertificateCertificatePolicyKeyPropertiesOutput
	ToCertificateCertificatePolicyKeyPropertiesOutputWithContext(context.Context) CertificateCertificatePolicyKeyPropertiesOutput
}

type CertificateCertificatePolicyKeyPropertiesArgs struct {
	// Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `keyType` is `EC` or `EC-HSM`.
	Curve pulumi.StringPtrInput `pulumi:"curve"`
	// Is this certificate exportable?
	Exportable pulumi.BoolInput `pulumi:"exportable"`
	// The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
	KeySize pulumi.IntPtrInput `pulumi:"keySize"`
	// Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
	KeyType pulumi.StringInput `pulumi:"keyType"`
	// Is the key reusable?
	ReuseKey pulumi.BoolInput `pulumi:"reuseKey"`
}

func (CertificateCertificatePolicyKeyPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyKeyProperties)(nil)).Elem()
}

func (i CertificateCertificatePolicyKeyPropertiesArgs) ToCertificateCertificatePolicyKeyPropertiesOutput() CertificateCertificatePolicyKeyPropertiesOutput {
	return i.ToCertificateCertificatePolicyKeyPropertiesOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyKeyPropertiesArgs) ToCertificateCertificatePolicyKeyPropertiesOutputWithContext(ctx context.Context) CertificateCertificatePolicyKeyPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyKeyPropertiesOutput)
}

func (i CertificateCertificatePolicyKeyPropertiesArgs) ToCertificateCertificatePolicyKeyPropertiesPtrOutput() CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return i.ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyKeyPropertiesArgs) ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyKeyPropertiesOutput).ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx)
}

// CertificateCertificatePolicyKeyPropertiesPtrInput is an input type that accepts CertificateCertificatePolicyKeyPropertiesArgs, CertificateCertificatePolicyKeyPropertiesPtr and CertificateCertificatePolicyKeyPropertiesPtrOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyKeyPropertiesPtrInput` via:
//
//	        CertificateCertificatePolicyKeyPropertiesArgs{...}
//
//	or:
//
//	        nil
type CertificateCertificatePolicyKeyPropertiesPtrInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyKeyPropertiesPtrOutput() CertificateCertificatePolicyKeyPropertiesPtrOutput
	ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(context.Context) CertificateCertificatePolicyKeyPropertiesPtrOutput
}

type certificateCertificatePolicyKeyPropertiesPtrType CertificateCertificatePolicyKeyPropertiesArgs

func CertificateCertificatePolicyKeyPropertiesPtr(v *CertificateCertificatePolicyKeyPropertiesArgs) CertificateCertificatePolicyKeyPropertiesPtrInput {
	return (*certificateCertificatePolicyKeyPropertiesPtrType)(v)
}

func (*certificateCertificatePolicyKeyPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicyKeyProperties)(nil)).Elem()
}

func (i *certificateCertificatePolicyKeyPropertiesPtrType) ToCertificateCertificatePolicyKeyPropertiesPtrOutput() CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return i.ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(context.Background())
}

func (i *certificateCertificatePolicyKeyPropertiesPtrType) ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyKeyPropertiesPtrOutput)
}

type CertificateCertificatePolicyKeyPropertiesOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyKeyPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyKeyProperties)(nil)).Elem()
}

func (o CertificateCertificatePolicyKeyPropertiesOutput) ToCertificateCertificatePolicyKeyPropertiesOutput() CertificateCertificatePolicyKeyPropertiesOutput {
	return o
}

func (o CertificateCertificatePolicyKeyPropertiesOutput) ToCertificateCertificatePolicyKeyPropertiesOutputWithContext(ctx context.Context) CertificateCertificatePolicyKeyPropertiesOutput {
	return o
}

func (o CertificateCertificatePolicyKeyPropertiesOutput) ToCertificateCertificatePolicyKeyPropertiesPtrOutput() CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return o.ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(context.Background())
}

func (o CertificateCertificatePolicyKeyPropertiesOutput) ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateCertificatePolicyKeyProperties) *CertificateCertificatePolicyKeyProperties {
		return &v
	}).(CertificateCertificatePolicyKeyPropertiesPtrOutput)
}

// Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `keyType` is `EC` or `EC-HSM`.
func (o CertificateCertificatePolicyKeyPropertiesOutput) Curve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyKeyProperties) *string { return v.Curve }).(pulumi.StringPtrOutput)
}

// Is this certificate exportable?
func (o CertificateCertificatePolicyKeyPropertiesOutput) Exportable() pulumi.BoolOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyKeyProperties) bool { return v.Exportable }).(pulumi.BoolOutput)
}

// The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
func (o CertificateCertificatePolicyKeyPropertiesOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyKeyProperties) *int { return v.KeySize }).(pulumi.IntPtrOutput)
}

// Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
func (o CertificateCertificatePolicyKeyPropertiesOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyKeyProperties) string { return v.KeyType }).(pulumi.StringOutput)
}

// Is the key reusable?
func (o CertificateCertificatePolicyKeyPropertiesOutput) ReuseKey() pulumi.BoolOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyKeyProperties) bool { return v.ReuseKey }).(pulumi.BoolOutput)
}

type CertificateCertificatePolicyKeyPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyKeyPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicyKeyProperties)(nil)).Elem()
}

func (o CertificateCertificatePolicyKeyPropertiesPtrOutput) ToCertificateCertificatePolicyKeyPropertiesPtrOutput() CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return o
}

func (o CertificateCertificatePolicyKeyPropertiesPtrOutput) ToCertificateCertificatePolicyKeyPropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyKeyPropertiesPtrOutput {
	return o
}

func (o CertificateCertificatePolicyKeyPropertiesPtrOutput) Elem() CertificateCertificatePolicyKeyPropertiesOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyKeyProperties) CertificateCertificatePolicyKeyProperties {
		if v != nil {
			return *v
		}
		var ret CertificateCertificatePolicyKeyProperties
		return ret
	}).(CertificateCertificatePolicyKeyPropertiesOutput)
}

// Specifies the curve to use when creating an `EC` key. Possible values are `P-256`, `P-256K`, `P-384`, and `P-521`. This field will be required in a future release if `keyType` is `EC` or `EC-HSM`.
func (o CertificateCertificatePolicyKeyPropertiesPtrOutput) Curve() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyKeyProperties) *string {
		if v == nil {
			return nil
		}
		return v.Curve
	}).(pulumi.StringPtrOutput)
}

// Is this certificate exportable?
func (o CertificateCertificatePolicyKeyPropertiesPtrOutput) Exportable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyKeyProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.Exportable
	}).(pulumi.BoolPtrOutput)
}

// The size of the key used in the certificate. Possible values include `2048`, `3072`, and `4096` for `RSA` keys, or `256`, `384`, and `521` for `EC` keys. This property is required when using RSA keys.
func (o CertificateCertificatePolicyKeyPropertiesPtrOutput) KeySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyKeyProperties) *int {
		if v == nil {
			return nil
		}
		return v.KeySize
	}).(pulumi.IntPtrOutput)
}

// Specifies the type of key. Possible values are `EC`, `EC-HSM`, `RSA`, `RSA-HSM` and `oct`.
func (o CertificateCertificatePolicyKeyPropertiesPtrOutput) KeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyKeyProperties) *string {
		if v == nil {
			return nil
		}
		return &v.KeyType
	}).(pulumi.StringPtrOutput)
}

// Is the key reusable?
func (o CertificateCertificatePolicyKeyPropertiesPtrOutput) ReuseKey() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyKeyProperties) *bool {
		if v == nil {
			return nil
		}
		return &v.ReuseKey
	}).(pulumi.BoolPtrOutput)
}

type CertificateCertificatePolicyLifetimeAction struct {
	// A `action` block as defined below.
	Action CertificateCertificatePolicyLifetimeActionAction `pulumi:"action"`
	// A `trigger` block as defined below.
	Trigger CertificateCertificatePolicyLifetimeActionTrigger `pulumi:"trigger"`
}

// CertificateCertificatePolicyLifetimeActionInput is an input type that accepts CertificateCertificatePolicyLifetimeActionArgs and CertificateCertificatePolicyLifetimeActionOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyLifetimeActionInput` via:
//
//	CertificateCertificatePolicyLifetimeActionArgs{...}
type CertificateCertificatePolicyLifetimeActionInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyLifetimeActionOutput() CertificateCertificatePolicyLifetimeActionOutput
	ToCertificateCertificatePolicyLifetimeActionOutputWithContext(context.Context) CertificateCertificatePolicyLifetimeActionOutput
}

type CertificateCertificatePolicyLifetimeActionArgs struct {
	// A `action` block as defined below.
	Action CertificateCertificatePolicyLifetimeActionActionInput `pulumi:"action"`
	// A `trigger` block as defined below.
	Trigger CertificateCertificatePolicyLifetimeActionTriggerInput `pulumi:"trigger"`
}

func (CertificateCertificatePolicyLifetimeActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (i CertificateCertificatePolicyLifetimeActionArgs) ToCertificateCertificatePolicyLifetimeActionOutput() CertificateCertificatePolicyLifetimeActionOutput {
	return i.ToCertificateCertificatePolicyLifetimeActionOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyLifetimeActionArgs) ToCertificateCertificatePolicyLifetimeActionOutputWithContext(ctx context.Context) CertificateCertificatePolicyLifetimeActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyLifetimeActionOutput)
}

// CertificateCertificatePolicyLifetimeActionArrayInput is an input type that accepts CertificateCertificatePolicyLifetimeActionArray and CertificateCertificatePolicyLifetimeActionArrayOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyLifetimeActionArrayInput` via:
//
//	CertificateCertificatePolicyLifetimeActionArray{ CertificateCertificatePolicyLifetimeActionArgs{...} }
type CertificateCertificatePolicyLifetimeActionArrayInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyLifetimeActionArrayOutput() CertificateCertificatePolicyLifetimeActionArrayOutput
	ToCertificateCertificatePolicyLifetimeActionArrayOutputWithContext(context.Context) CertificateCertificatePolicyLifetimeActionArrayOutput
}

type CertificateCertificatePolicyLifetimeActionArray []CertificateCertificatePolicyLifetimeActionInput

func (CertificateCertificatePolicyLifetimeActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (i CertificateCertificatePolicyLifetimeActionArray) ToCertificateCertificatePolicyLifetimeActionArrayOutput() CertificateCertificatePolicyLifetimeActionArrayOutput {
	return i.ToCertificateCertificatePolicyLifetimeActionArrayOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyLifetimeActionArray) ToCertificateCertificatePolicyLifetimeActionArrayOutputWithContext(ctx context.Context) CertificateCertificatePolicyLifetimeActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyLifetimeActionArrayOutput)
}

type CertificateCertificatePolicyLifetimeActionOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyLifetimeActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (o CertificateCertificatePolicyLifetimeActionOutput) ToCertificateCertificatePolicyLifetimeActionOutput() CertificateCertificatePolicyLifetimeActionOutput {
	return o
}

func (o CertificateCertificatePolicyLifetimeActionOutput) ToCertificateCertificatePolicyLifetimeActionOutputWithContext(ctx context.Context) CertificateCertificatePolicyLifetimeActionOutput {
	return o
}

// A `action` block as defined below.
func (o CertificateCertificatePolicyLifetimeActionOutput) Action() CertificateCertificatePolicyLifetimeActionActionOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyLifetimeAction) CertificateCertificatePolicyLifetimeActionAction {
		return v.Action
	}).(CertificateCertificatePolicyLifetimeActionActionOutput)
}

// A `trigger` block as defined below.
func (o CertificateCertificatePolicyLifetimeActionOutput) Trigger() CertificateCertificatePolicyLifetimeActionTriggerOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyLifetimeAction) CertificateCertificatePolicyLifetimeActionTrigger {
		return v.Trigger
	}).(CertificateCertificatePolicyLifetimeActionTriggerOutput)
}

type CertificateCertificatePolicyLifetimeActionArrayOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyLifetimeActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (o CertificateCertificatePolicyLifetimeActionArrayOutput) ToCertificateCertificatePolicyLifetimeActionArrayOutput() CertificateCertificatePolicyLifetimeActionArrayOutput {
	return o
}

func (o CertificateCertificatePolicyLifetimeActionArrayOutput) ToCertificateCertificatePolicyLifetimeActionArrayOutputWithContext(ctx context.Context) CertificateCertificatePolicyLifetimeActionArrayOutput {
	return o
}

func (o CertificateCertificatePolicyLifetimeActionArrayOutput) Index(i pulumi.IntInput) CertificateCertificatePolicyLifetimeActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateCertificatePolicyLifetimeAction {
		return vs[0].([]CertificateCertificatePolicyLifetimeAction)[vs[1].(int)]
	}).(CertificateCertificatePolicyLifetimeActionOutput)
}

type CertificateCertificatePolicyLifetimeActionAction struct {
	// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`.
	ActionType string `pulumi:"actionType"`
}

// CertificateCertificatePolicyLifetimeActionActionInput is an input type that accepts CertificateCertificatePolicyLifetimeActionActionArgs and CertificateCertificatePolicyLifetimeActionActionOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyLifetimeActionActionInput` via:
//
//	CertificateCertificatePolicyLifetimeActionActionArgs{...}
type CertificateCertificatePolicyLifetimeActionActionInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyLifetimeActionActionOutput() CertificateCertificatePolicyLifetimeActionActionOutput
	ToCertificateCertificatePolicyLifetimeActionActionOutputWithContext(context.Context) CertificateCertificatePolicyLifetimeActionActionOutput
}

type CertificateCertificatePolicyLifetimeActionActionArgs struct {
	// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`.
	ActionType pulumi.StringInput `pulumi:"actionType"`
}

func (CertificateCertificatePolicyLifetimeActionActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyLifetimeActionAction)(nil)).Elem()
}

func (i CertificateCertificatePolicyLifetimeActionActionArgs) ToCertificateCertificatePolicyLifetimeActionActionOutput() CertificateCertificatePolicyLifetimeActionActionOutput {
	return i.ToCertificateCertificatePolicyLifetimeActionActionOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyLifetimeActionActionArgs) ToCertificateCertificatePolicyLifetimeActionActionOutputWithContext(ctx context.Context) CertificateCertificatePolicyLifetimeActionActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyLifetimeActionActionOutput)
}

type CertificateCertificatePolicyLifetimeActionActionOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyLifetimeActionActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyLifetimeActionAction)(nil)).Elem()
}

func (o CertificateCertificatePolicyLifetimeActionActionOutput) ToCertificateCertificatePolicyLifetimeActionActionOutput() CertificateCertificatePolicyLifetimeActionActionOutput {
	return o
}

func (o CertificateCertificatePolicyLifetimeActionActionOutput) ToCertificateCertificatePolicyLifetimeActionActionOutputWithContext(ctx context.Context) CertificateCertificatePolicyLifetimeActionActionOutput {
	return o
}

// The Type of action to be performed when the lifetime trigger is triggerec. Possible values include `AutoRenew` and `EmailContacts`.
func (o CertificateCertificatePolicyLifetimeActionActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyLifetimeActionAction) string { return v.ActionType }).(pulumi.StringOutput)
}

type CertificateCertificatePolicyLifetimeActionTrigger struct {
	// The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
	DaysBeforeExpiry *int `pulumi:"daysBeforeExpiry"`
	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
	LifetimePercentage *int `pulumi:"lifetimePercentage"`
}

// CertificateCertificatePolicyLifetimeActionTriggerInput is an input type that accepts CertificateCertificatePolicyLifetimeActionTriggerArgs and CertificateCertificatePolicyLifetimeActionTriggerOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyLifetimeActionTriggerInput` via:
//
//	CertificateCertificatePolicyLifetimeActionTriggerArgs{...}
type CertificateCertificatePolicyLifetimeActionTriggerInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyLifetimeActionTriggerOutput() CertificateCertificatePolicyLifetimeActionTriggerOutput
	ToCertificateCertificatePolicyLifetimeActionTriggerOutputWithContext(context.Context) CertificateCertificatePolicyLifetimeActionTriggerOutput
}

type CertificateCertificatePolicyLifetimeActionTriggerArgs struct {
	// The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
	DaysBeforeExpiry pulumi.IntPtrInput `pulumi:"daysBeforeExpiry"`
	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
	LifetimePercentage pulumi.IntPtrInput `pulumi:"lifetimePercentage"`
}

func (CertificateCertificatePolicyLifetimeActionTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyLifetimeActionTrigger)(nil)).Elem()
}

func (i CertificateCertificatePolicyLifetimeActionTriggerArgs) ToCertificateCertificatePolicyLifetimeActionTriggerOutput() CertificateCertificatePolicyLifetimeActionTriggerOutput {
	return i.ToCertificateCertificatePolicyLifetimeActionTriggerOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyLifetimeActionTriggerArgs) ToCertificateCertificatePolicyLifetimeActionTriggerOutputWithContext(ctx context.Context) CertificateCertificatePolicyLifetimeActionTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyLifetimeActionTriggerOutput)
}

type CertificateCertificatePolicyLifetimeActionTriggerOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyLifetimeActionTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyLifetimeActionTrigger)(nil)).Elem()
}

func (o CertificateCertificatePolicyLifetimeActionTriggerOutput) ToCertificateCertificatePolicyLifetimeActionTriggerOutput() CertificateCertificatePolicyLifetimeActionTriggerOutput {
	return o
}

func (o CertificateCertificatePolicyLifetimeActionTriggerOutput) ToCertificateCertificatePolicyLifetimeActionTriggerOutputWithContext(ctx context.Context) CertificateCertificatePolicyLifetimeActionTriggerOutput {
	return o
}

// The number of days before the Certificate expires that the action associated with this Trigger should run. Conflicts with `lifetimePercentage`.
func (o CertificateCertificatePolicyLifetimeActionTriggerOutput) DaysBeforeExpiry() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyLifetimeActionTrigger) *int { return v.DaysBeforeExpiry }).(pulumi.IntPtrOutput)
}

// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run. Conflicts with `daysBeforeExpiry`.
func (o CertificateCertificatePolicyLifetimeActionTriggerOutput) LifetimePercentage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyLifetimeActionTrigger) *int { return v.LifetimePercentage }).(pulumi.IntPtrOutput)
}

type CertificateCertificatePolicySecretProperties struct {
	// The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
	ContentType string `pulumi:"contentType"`
}

// CertificateCertificatePolicySecretPropertiesInput is an input type that accepts CertificateCertificatePolicySecretPropertiesArgs and CertificateCertificatePolicySecretPropertiesOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicySecretPropertiesInput` via:
//
//	CertificateCertificatePolicySecretPropertiesArgs{...}
type CertificateCertificatePolicySecretPropertiesInput interface {
	pulumi.Input

	ToCertificateCertificatePolicySecretPropertiesOutput() CertificateCertificatePolicySecretPropertiesOutput
	ToCertificateCertificatePolicySecretPropertiesOutputWithContext(context.Context) CertificateCertificatePolicySecretPropertiesOutput
}

type CertificateCertificatePolicySecretPropertiesArgs struct {
	// The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
	ContentType pulumi.StringInput `pulumi:"contentType"`
}

func (CertificateCertificatePolicySecretPropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicySecretProperties)(nil)).Elem()
}

func (i CertificateCertificatePolicySecretPropertiesArgs) ToCertificateCertificatePolicySecretPropertiesOutput() CertificateCertificatePolicySecretPropertiesOutput {
	return i.ToCertificateCertificatePolicySecretPropertiesOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicySecretPropertiesArgs) ToCertificateCertificatePolicySecretPropertiesOutputWithContext(ctx context.Context) CertificateCertificatePolicySecretPropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicySecretPropertiesOutput)
}

func (i CertificateCertificatePolicySecretPropertiesArgs) ToCertificateCertificatePolicySecretPropertiesPtrOutput() CertificateCertificatePolicySecretPropertiesPtrOutput {
	return i.ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicySecretPropertiesArgs) ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicySecretPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicySecretPropertiesOutput).ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx)
}

// CertificateCertificatePolicySecretPropertiesPtrInput is an input type that accepts CertificateCertificatePolicySecretPropertiesArgs, CertificateCertificatePolicySecretPropertiesPtr and CertificateCertificatePolicySecretPropertiesPtrOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicySecretPropertiesPtrInput` via:
//
//	        CertificateCertificatePolicySecretPropertiesArgs{...}
//
//	or:
//
//	        nil
type CertificateCertificatePolicySecretPropertiesPtrInput interface {
	pulumi.Input

	ToCertificateCertificatePolicySecretPropertiesPtrOutput() CertificateCertificatePolicySecretPropertiesPtrOutput
	ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(context.Context) CertificateCertificatePolicySecretPropertiesPtrOutput
}

type certificateCertificatePolicySecretPropertiesPtrType CertificateCertificatePolicySecretPropertiesArgs

func CertificateCertificatePolicySecretPropertiesPtr(v *CertificateCertificatePolicySecretPropertiesArgs) CertificateCertificatePolicySecretPropertiesPtrInput {
	return (*certificateCertificatePolicySecretPropertiesPtrType)(v)
}

func (*certificateCertificatePolicySecretPropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicySecretProperties)(nil)).Elem()
}

func (i *certificateCertificatePolicySecretPropertiesPtrType) ToCertificateCertificatePolicySecretPropertiesPtrOutput() CertificateCertificatePolicySecretPropertiesPtrOutput {
	return i.ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(context.Background())
}

func (i *certificateCertificatePolicySecretPropertiesPtrType) ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicySecretPropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicySecretPropertiesPtrOutput)
}

type CertificateCertificatePolicySecretPropertiesOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicySecretPropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicySecretProperties)(nil)).Elem()
}

func (o CertificateCertificatePolicySecretPropertiesOutput) ToCertificateCertificatePolicySecretPropertiesOutput() CertificateCertificatePolicySecretPropertiesOutput {
	return o
}

func (o CertificateCertificatePolicySecretPropertiesOutput) ToCertificateCertificatePolicySecretPropertiesOutputWithContext(ctx context.Context) CertificateCertificatePolicySecretPropertiesOutput {
	return o
}

func (o CertificateCertificatePolicySecretPropertiesOutput) ToCertificateCertificatePolicySecretPropertiesPtrOutput() CertificateCertificatePolicySecretPropertiesPtrOutput {
	return o.ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(context.Background())
}

func (o CertificateCertificatePolicySecretPropertiesOutput) ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicySecretPropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateCertificatePolicySecretProperties) *CertificateCertificatePolicySecretProperties {
		return &v
	}).(CertificateCertificatePolicySecretPropertiesPtrOutput)
}

// The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
func (o CertificateCertificatePolicySecretPropertiesOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateCertificatePolicySecretProperties) string { return v.ContentType }).(pulumi.StringOutput)
}

type CertificateCertificatePolicySecretPropertiesPtrOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicySecretPropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicySecretProperties)(nil)).Elem()
}

func (o CertificateCertificatePolicySecretPropertiesPtrOutput) ToCertificateCertificatePolicySecretPropertiesPtrOutput() CertificateCertificatePolicySecretPropertiesPtrOutput {
	return o
}

func (o CertificateCertificatePolicySecretPropertiesPtrOutput) ToCertificateCertificatePolicySecretPropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicySecretPropertiesPtrOutput {
	return o
}

func (o CertificateCertificatePolicySecretPropertiesPtrOutput) Elem() CertificateCertificatePolicySecretPropertiesOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicySecretProperties) CertificateCertificatePolicySecretProperties {
		if v != nil {
			return *v
		}
		var ret CertificateCertificatePolicySecretProperties
		return ret
	}).(CertificateCertificatePolicySecretPropertiesOutput)
}

// The Content-Type of the Certificate, such as `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
func (o CertificateCertificatePolicySecretPropertiesPtrOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicySecretProperties) *string {
		if v == nil {
			return nil
		}
		return &v.ContentType
	}).(pulumi.StringPtrOutput)
}

type CertificateCertificatePolicyX509CertificateProperties struct {
	// A list of Extended/Enhanced Key Usages.
	ExtendedKeyUsages []string `pulumi:"extendedKeyUsages"`
	// A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
	KeyUsages []string `pulumi:"keyUsages"`
	// The Certificate's Subject.
	Subject string `pulumi:"subject"`
	// A `subjectAlternativeNames` block as defined below.
	SubjectAlternativeNames *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames `pulumi:"subjectAlternativeNames"`
	// The Certificates Validity Period in Months.
	ValidityInMonths int `pulumi:"validityInMonths"`
}

// CertificateCertificatePolicyX509CertificatePropertiesInput is an input type that accepts CertificateCertificatePolicyX509CertificatePropertiesArgs and CertificateCertificatePolicyX509CertificatePropertiesOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyX509CertificatePropertiesInput` via:
//
//	CertificateCertificatePolicyX509CertificatePropertiesArgs{...}
type CertificateCertificatePolicyX509CertificatePropertiesInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyX509CertificatePropertiesOutput() CertificateCertificatePolicyX509CertificatePropertiesOutput
	ToCertificateCertificatePolicyX509CertificatePropertiesOutputWithContext(context.Context) CertificateCertificatePolicyX509CertificatePropertiesOutput
}

type CertificateCertificatePolicyX509CertificatePropertiesArgs struct {
	// A list of Extended/Enhanced Key Usages.
	ExtendedKeyUsages pulumi.StringArrayInput `pulumi:"extendedKeyUsages"`
	// A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
	KeyUsages pulumi.StringArrayInput `pulumi:"keyUsages"`
	// The Certificate's Subject.
	Subject pulumi.StringInput `pulumi:"subject"`
	// A `subjectAlternativeNames` block as defined below.
	SubjectAlternativeNames CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput `pulumi:"subjectAlternativeNames"`
	// The Certificates Validity Period in Months.
	ValidityInMonths pulumi.IntInput `pulumi:"validityInMonths"`
}

func (CertificateCertificatePolicyX509CertificatePropertiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyX509CertificateProperties)(nil)).Elem()
}

func (i CertificateCertificatePolicyX509CertificatePropertiesArgs) ToCertificateCertificatePolicyX509CertificatePropertiesOutput() CertificateCertificatePolicyX509CertificatePropertiesOutput {
	return i.ToCertificateCertificatePolicyX509CertificatePropertiesOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyX509CertificatePropertiesArgs) ToCertificateCertificatePolicyX509CertificatePropertiesOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyX509CertificatePropertiesOutput)
}

func (i CertificateCertificatePolicyX509CertificatePropertiesArgs) ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return i.ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyX509CertificatePropertiesArgs) ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyX509CertificatePropertiesOutput).ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx)
}

// CertificateCertificatePolicyX509CertificatePropertiesPtrInput is an input type that accepts CertificateCertificatePolicyX509CertificatePropertiesArgs, CertificateCertificatePolicyX509CertificatePropertiesPtr and CertificateCertificatePolicyX509CertificatePropertiesPtrOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyX509CertificatePropertiesPtrInput` via:
//
//	        CertificateCertificatePolicyX509CertificatePropertiesArgs{...}
//
//	or:
//
//	        nil
type CertificateCertificatePolicyX509CertificatePropertiesPtrInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesPtrOutput
	ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(context.Context) CertificateCertificatePolicyX509CertificatePropertiesPtrOutput
}

type certificateCertificatePolicyX509CertificatePropertiesPtrType CertificateCertificatePolicyX509CertificatePropertiesArgs

func CertificateCertificatePolicyX509CertificatePropertiesPtr(v *CertificateCertificatePolicyX509CertificatePropertiesArgs) CertificateCertificatePolicyX509CertificatePropertiesPtrInput {
	return (*certificateCertificatePolicyX509CertificatePropertiesPtrType)(v)
}

func (*certificateCertificatePolicyX509CertificatePropertiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicyX509CertificateProperties)(nil)).Elem()
}

func (i *certificateCertificatePolicyX509CertificatePropertiesPtrType) ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return i.ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(context.Background())
}

func (i *certificateCertificatePolicyX509CertificatePropertiesPtrType) ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyX509CertificatePropertiesPtrOutput)
}

type CertificateCertificatePolicyX509CertificatePropertiesOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyX509CertificatePropertiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyX509CertificateProperties)(nil)).Elem()
}

func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) ToCertificateCertificatePolicyX509CertificatePropertiesOutput() CertificateCertificatePolicyX509CertificatePropertiesOutput {
	return o
}

func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) ToCertificateCertificatePolicyX509CertificatePropertiesOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesOutput {
	return o
}

func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o.ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(context.Background())
}

func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateCertificatePolicyX509CertificateProperties) *CertificateCertificatePolicyX509CertificateProperties {
		return &v
	}).(CertificateCertificatePolicyX509CertificatePropertiesPtrOutput)
}

// A list of Extended/Enhanced Key Usages.
func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) ExtendedKeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyX509CertificateProperties) []string { return v.ExtendedKeyUsages }).(pulumi.StringArrayOutput)
}

// A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) KeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyX509CertificateProperties) []string { return v.KeyUsages }).(pulumi.StringArrayOutput)
}

// The Certificate's Subject.
func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyX509CertificateProperties) string { return v.Subject }).(pulumi.StringOutput)
}

// A `subjectAlternativeNames` block as defined below.
func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) SubjectAlternativeNames() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyX509CertificateProperties) *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames {
		return v.SubjectAlternativeNames
	}).(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput)
}

// The Certificates Validity Period in Months.
func (o CertificateCertificatePolicyX509CertificatePropertiesOutput) ValidityInMonths() pulumi.IntOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyX509CertificateProperties) int { return v.ValidityInMonths }).(pulumi.IntOutput)
}

type CertificateCertificatePolicyX509CertificatePropertiesPtrOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicyX509CertificateProperties)(nil)).Elem()
}

func (o CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o
}

func (o CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) ToCertificateCertificatePolicyX509CertificatePropertiesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesPtrOutput {
	return o
}

func (o CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) Elem() CertificateCertificatePolicyX509CertificatePropertiesOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificateProperties) CertificateCertificatePolicyX509CertificateProperties {
		if v != nil {
			return *v
		}
		var ret CertificateCertificatePolicyX509CertificateProperties
		return ret
	}).(CertificateCertificatePolicyX509CertificatePropertiesOutput)
}

// A list of Extended/Enhanced Key Usages.
func (o CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) ExtendedKeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificateProperties) []string {
		if v == nil {
			return nil
		}
		return v.ExtendedKeyUsages
	}).(pulumi.StringArrayOutput)
}

// A list of uses associated with this Key. Possible values include `cRLSign`, `dataEncipherment`, `decipherOnly`, `digitalSignature`, `encipherOnly`, `keyAgreement`, `keyCertSign`, `keyEncipherment` and `nonRepudiation` and are case-sensitive.
func (o CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) KeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificateProperties) []string {
		if v == nil {
			return nil
		}
		return v.KeyUsages
	}).(pulumi.StringArrayOutput)
}

// The Certificate's Subject.
func (o CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) Subject() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificateProperties) *string {
		if v == nil {
			return nil
		}
		return &v.Subject
	}).(pulumi.StringPtrOutput)
}

// A `subjectAlternativeNames` block as defined below.
func (o CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) SubjectAlternativeNames() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificateProperties) *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames {
		if v == nil {
			return nil
		}
		return v.SubjectAlternativeNames
	}).(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput)
}

// The Certificates Validity Period in Months.
func (o CertificateCertificatePolicyX509CertificatePropertiesPtrOutput) ValidityInMonths() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificateProperties) *int {
		if v == nil {
			return nil
		}
		return &v.ValidityInMonths
	}).(pulumi.IntPtrOutput)
}

type CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames struct {
	// A list of alternative DNS names (FQDNs) identified by the Certificate.
	DnsNames []string `pulumi:"dnsNames"`
	// A list of email addresses identified by this Certificate.
	Emails []string `pulumi:"emails"`
	// A list of User Principal Names identified by the Certificate.
	Upns []string `pulumi:"upns"`
}

// CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesInput is an input type that accepts CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs and CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesInput` via:
//
//	CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{...}
type CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput
	ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutputWithContext(context.Context) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput
}

type CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs struct {
	// A list of alternative DNS names (FQDNs) identified by the Certificate.
	DnsNames pulumi.StringArrayInput `pulumi:"dnsNames"`
	// A list of email addresses identified by this Certificate.
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// A list of User Principal Names identified by the Certificate.
	Upns pulumi.StringArrayInput `pulumi:"upns"`
}

func (CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames)(nil)).Elem()
}

func (i CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return i.ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput)
}

func (i CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return i.ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(context.Background())
}

func (i CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput).ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx)
}

// CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput is an input type that accepts CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs, CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtr and CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput values.
// You can construct a concrete instance of `CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput` via:
//
//	        CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{...}
//
//	or:
//
//	        nil
type CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput interface {
	pulumi.Input

	ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput
	ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(context.Context) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput
}

type certificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs

func CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtr(v *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput {
	return (*certificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType)(v)
}

func (*certificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames)(nil)).Elem()
}

func (i *certificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return i.ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(context.Background())
}

func (i *certificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrType) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput)
}

type CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames)(nil)).Elem()
}

func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return o
}

func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return o
}

func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o.ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(context.Background())
}

func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames {
		return &v
	}).(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput)
}

// A list of alternative DNS names (FQDNs) identified by the Certificate.
func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// A list of email addresses identified by this Certificate.
func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// A list of User Principal Names identified by the Certificate.
func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput) Upns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		return v.Upns
	}).(pulumi.StringArrayOutput)
}

type CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput struct{ *pulumi.OutputState }

func (CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames)(nil)).Elem()
}

func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o
}

func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) ToCertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutputWithContext(ctx context.Context) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput {
	return o
}

func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) Elem() CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames {
		if v != nil {
			return *v
		}
		var ret CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames
		return ret
	}).(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput)
}

// A list of alternative DNS names (FQDNs) identified by the Certificate.
func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		if v == nil {
			return nil
		}
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// A list of email addresses identified by this Certificate.
func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		if v == nil {
			return nil
		}
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// A list of User Principal Names identified by the Certificate.
func (o CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput) Upns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNames) []string {
		if v == nil {
			return nil
		}
		return v.Upns
	}).(pulumi.StringArrayOutput)
}

type CertificateContactsContact struct {
	// E-mail address of the contact.
	Email string `pulumi:"email"`
	// Name of the contact.
	Name *string `pulumi:"name"`
	// Phone number of the contact.
	Phone *string `pulumi:"phone"`
}

// CertificateContactsContactInput is an input type that accepts CertificateContactsContactArgs and CertificateContactsContactOutput values.
// You can construct a concrete instance of `CertificateContactsContactInput` via:
//
//	CertificateContactsContactArgs{...}
type CertificateContactsContactInput interface {
	pulumi.Input

	ToCertificateContactsContactOutput() CertificateContactsContactOutput
	ToCertificateContactsContactOutputWithContext(context.Context) CertificateContactsContactOutput
}

type CertificateContactsContactArgs struct {
	// E-mail address of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// Name of the contact.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Phone number of the contact.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
}

func (CertificateContactsContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateContactsContact)(nil)).Elem()
}

func (i CertificateContactsContactArgs) ToCertificateContactsContactOutput() CertificateContactsContactOutput {
	return i.ToCertificateContactsContactOutputWithContext(context.Background())
}

func (i CertificateContactsContactArgs) ToCertificateContactsContactOutputWithContext(ctx context.Context) CertificateContactsContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateContactsContactOutput)
}

// CertificateContactsContactArrayInput is an input type that accepts CertificateContactsContactArray and CertificateContactsContactArrayOutput values.
// You can construct a concrete instance of `CertificateContactsContactArrayInput` via:
//
//	CertificateContactsContactArray{ CertificateContactsContactArgs{...} }
type CertificateContactsContactArrayInput interface {
	pulumi.Input

	ToCertificateContactsContactArrayOutput() CertificateContactsContactArrayOutput
	ToCertificateContactsContactArrayOutputWithContext(context.Context) CertificateContactsContactArrayOutput
}

type CertificateContactsContactArray []CertificateContactsContactInput

func (CertificateContactsContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateContactsContact)(nil)).Elem()
}

func (i CertificateContactsContactArray) ToCertificateContactsContactArrayOutput() CertificateContactsContactArrayOutput {
	return i.ToCertificateContactsContactArrayOutputWithContext(context.Background())
}

func (i CertificateContactsContactArray) ToCertificateContactsContactArrayOutputWithContext(ctx context.Context) CertificateContactsContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateContactsContactArrayOutput)
}

type CertificateContactsContactOutput struct{ *pulumi.OutputState }

func (CertificateContactsContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateContactsContact)(nil)).Elem()
}

func (o CertificateContactsContactOutput) ToCertificateContactsContactOutput() CertificateContactsContactOutput {
	return o
}

func (o CertificateContactsContactOutput) ToCertificateContactsContactOutputWithContext(ctx context.Context) CertificateContactsContactOutput {
	return o
}

// E-mail address of the contact.
func (o CertificateContactsContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateContactsContact) string { return v.Email }).(pulumi.StringOutput)
}

// Name of the contact.
func (o CertificateContactsContactOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateContactsContact) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Phone number of the contact.
func (o CertificateContactsContactOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateContactsContact) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

type CertificateContactsContactArrayOutput struct{ *pulumi.OutputState }

func (CertificateContactsContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateContactsContact)(nil)).Elem()
}

func (o CertificateContactsContactArrayOutput) ToCertificateContactsContactArrayOutput() CertificateContactsContactArrayOutput {
	return o
}

func (o CertificateContactsContactArrayOutput) ToCertificateContactsContactArrayOutputWithContext(ctx context.Context) CertificateContactsContactArrayOutput {
	return o
}

func (o CertificateContactsContactArrayOutput) Index(i pulumi.IntInput) CertificateContactsContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateContactsContact {
		return vs[0].([]CertificateContactsContact)[vs[1].(int)]
	}).(CertificateContactsContactOutput)
}

type CertificateIssuerAdmin struct {
	// E-mail address of the admin.
	EmailAddress string `pulumi:"emailAddress"`
	// First name of the admin.
	FirstName *string `pulumi:"firstName"`
	// Last name of the admin.
	LastName *string `pulumi:"lastName"`
	// Phone number of the admin.
	Phone *string `pulumi:"phone"`
}

// CertificateIssuerAdminInput is an input type that accepts CertificateIssuerAdminArgs and CertificateIssuerAdminOutput values.
// You can construct a concrete instance of `CertificateIssuerAdminInput` via:
//
//	CertificateIssuerAdminArgs{...}
type CertificateIssuerAdminInput interface {
	pulumi.Input

	ToCertificateIssuerAdminOutput() CertificateIssuerAdminOutput
	ToCertificateIssuerAdminOutputWithContext(context.Context) CertificateIssuerAdminOutput
}

type CertificateIssuerAdminArgs struct {
	// E-mail address of the admin.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// First name of the admin.
	FirstName pulumi.StringPtrInput `pulumi:"firstName"`
	// Last name of the admin.
	LastName pulumi.StringPtrInput `pulumi:"lastName"`
	// Phone number of the admin.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
}

func (CertificateIssuerAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuerAdmin)(nil)).Elem()
}

func (i CertificateIssuerAdminArgs) ToCertificateIssuerAdminOutput() CertificateIssuerAdminOutput {
	return i.ToCertificateIssuerAdminOutputWithContext(context.Background())
}

func (i CertificateIssuerAdminArgs) ToCertificateIssuerAdminOutputWithContext(ctx context.Context) CertificateIssuerAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuerAdminOutput)
}

// CertificateIssuerAdminArrayInput is an input type that accepts CertificateIssuerAdminArray and CertificateIssuerAdminArrayOutput values.
// You can construct a concrete instance of `CertificateIssuerAdminArrayInput` via:
//
//	CertificateIssuerAdminArray{ CertificateIssuerAdminArgs{...} }
type CertificateIssuerAdminArrayInput interface {
	pulumi.Input

	ToCertificateIssuerAdminArrayOutput() CertificateIssuerAdminArrayOutput
	ToCertificateIssuerAdminArrayOutputWithContext(context.Context) CertificateIssuerAdminArrayOutput
}

type CertificateIssuerAdminArray []CertificateIssuerAdminInput

func (CertificateIssuerAdminArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateIssuerAdmin)(nil)).Elem()
}

func (i CertificateIssuerAdminArray) ToCertificateIssuerAdminArrayOutput() CertificateIssuerAdminArrayOutput {
	return i.ToCertificateIssuerAdminArrayOutputWithContext(context.Background())
}

func (i CertificateIssuerAdminArray) ToCertificateIssuerAdminArrayOutputWithContext(ctx context.Context) CertificateIssuerAdminArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuerAdminArrayOutput)
}

type CertificateIssuerAdminOutput struct{ *pulumi.OutputState }

func (CertificateIssuerAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuerAdmin)(nil)).Elem()
}

func (o CertificateIssuerAdminOutput) ToCertificateIssuerAdminOutput() CertificateIssuerAdminOutput {
	return o
}

func (o CertificateIssuerAdminOutput) ToCertificateIssuerAdminOutputWithContext(ctx context.Context) CertificateIssuerAdminOutput {
	return o
}

// E-mail address of the admin.
func (o CertificateIssuerAdminOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateIssuerAdmin) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// First name of the admin.
func (o CertificateIssuerAdminOutput) FirstName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateIssuerAdmin) *string { return v.FirstName }).(pulumi.StringPtrOutput)
}

// Last name of the admin.
func (o CertificateIssuerAdminOutput) LastName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateIssuerAdmin) *string { return v.LastName }).(pulumi.StringPtrOutput)
}

// Phone number of the admin.
func (o CertificateIssuerAdminOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificateIssuerAdmin) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

type CertificateIssuerAdminArrayOutput struct{ *pulumi.OutputState }

func (CertificateIssuerAdminArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateIssuerAdmin)(nil)).Elem()
}

func (o CertificateIssuerAdminArrayOutput) ToCertificateIssuerAdminArrayOutput() CertificateIssuerAdminArrayOutput {
	return o
}

func (o CertificateIssuerAdminArrayOutput) ToCertificateIssuerAdminArrayOutputWithContext(ctx context.Context) CertificateIssuerAdminArrayOutput {
	return o
}

func (o CertificateIssuerAdminArrayOutput) Index(i pulumi.IntInput) CertificateIssuerAdminOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateIssuerAdmin {
		return vs[0].([]CertificateIssuerAdmin)[vs[1].(int)]
	}).(CertificateIssuerAdminOutput)
}

type KeyRotationPolicy struct {
	// An `automatic` block as defined below.
	Automatic *KeyRotationPolicyAutomatic `pulumi:"automatic"`
	// Expire a Key Vault Key after given duration as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
	ExpireAfter *string `pulumi:"expireAfter"`
	// Notify at a given duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
	NotifyBeforeExpiry *string `pulumi:"notifyBeforeExpiry"`
}

// KeyRotationPolicyInput is an input type that accepts KeyRotationPolicyArgs and KeyRotationPolicyOutput values.
// You can construct a concrete instance of `KeyRotationPolicyInput` via:
//
//	KeyRotationPolicyArgs{...}
type KeyRotationPolicyInput interface {
	pulumi.Input

	ToKeyRotationPolicyOutput() KeyRotationPolicyOutput
	ToKeyRotationPolicyOutputWithContext(context.Context) KeyRotationPolicyOutput
}

type KeyRotationPolicyArgs struct {
	// An `automatic` block as defined below.
	Automatic KeyRotationPolicyAutomaticPtrInput `pulumi:"automatic"`
	// Expire a Key Vault Key after given duration as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
	ExpireAfter pulumi.StringPtrInput `pulumi:"expireAfter"`
	// Notify at a given duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
	NotifyBeforeExpiry pulumi.StringPtrInput `pulumi:"notifyBeforeExpiry"`
}

func (KeyRotationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRotationPolicy)(nil)).Elem()
}

func (i KeyRotationPolicyArgs) ToKeyRotationPolicyOutput() KeyRotationPolicyOutput {
	return i.ToKeyRotationPolicyOutputWithContext(context.Background())
}

func (i KeyRotationPolicyArgs) ToKeyRotationPolicyOutputWithContext(ctx context.Context) KeyRotationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRotationPolicyOutput)
}

func (i KeyRotationPolicyArgs) ToKeyRotationPolicyPtrOutput() KeyRotationPolicyPtrOutput {
	return i.ToKeyRotationPolicyPtrOutputWithContext(context.Background())
}

func (i KeyRotationPolicyArgs) ToKeyRotationPolicyPtrOutputWithContext(ctx context.Context) KeyRotationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRotationPolicyOutput).ToKeyRotationPolicyPtrOutputWithContext(ctx)
}

// KeyRotationPolicyPtrInput is an input type that accepts KeyRotationPolicyArgs, KeyRotationPolicyPtr and KeyRotationPolicyPtrOutput values.
// You can construct a concrete instance of `KeyRotationPolicyPtrInput` via:
//
//	        KeyRotationPolicyArgs{...}
//
//	or:
//
//	        nil
type KeyRotationPolicyPtrInput interface {
	pulumi.Input

	ToKeyRotationPolicyPtrOutput() KeyRotationPolicyPtrOutput
	ToKeyRotationPolicyPtrOutputWithContext(context.Context) KeyRotationPolicyPtrOutput
}

type keyRotationPolicyPtrType KeyRotationPolicyArgs

func KeyRotationPolicyPtr(v *KeyRotationPolicyArgs) KeyRotationPolicyPtrInput {
	return (*keyRotationPolicyPtrType)(v)
}

func (*keyRotationPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRotationPolicy)(nil)).Elem()
}

func (i *keyRotationPolicyPtrType) ToKeyRotationPolicyPtrOutput() KeyRotationPolicyPtrOutput {
	return i.ToKeyRotationPolicyPtrOutputWithContext(context.Background())
}

func (i *keyRotationPolicyPtrType) ToKeyRotationPolicyPtrOutputWithContext(ctx context.Context) KeyRotationPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRotationPolicyPtrOutput)
}

type KeyRotationPolicyOutput struct{ *pulumi.OutputState }

func (KeyRotationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRotationPolicy)(nil)).Elem()
}

func (o KeyRotationPolicyOutput) ToKeyRotationPolicyOutput() KeyRotationPolicyOutput {
	return o
}

func (o KeyRotationPolicyOutput) ToKeyRotationPolicyOutputWithContext(ctx context.Context) KeyRotationPolicyOutput {
	return o
}

func (o KeyRotationPolicyOutput) ToKeyRotationPolicyPtrOutput() KeyRotationPolicyPtrOutput {
	return o.ToKeyRotationPolicyPtrOutputWithContext(context.Background())
}

func (o KeyRotationPolicyOutput) ToKeyRotationPolicyPtrOutputWithContext(ctx context.Context) KeyRotationPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyRotationPolicy) *KeyRotationPolicy {
		return &v
	}).(KeyRotationPolicyPtrOutput)
}

// An `automatic` block as defined below.
func (o KeyRotationPolicyOutput) Automatic() KeyRotationPolicyAutomaticPtrOutput {
	return o.ApplyT(func(v KeyRotationPolicy) *KeyRotationPolicyAutomatic { return v.Automatic }).(KeyRotationPolicyAutomaticPtrOutput)
}

// Expire a Key Vault Key after given duration as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
func (o KeyRotationPolicyOutput) ExpireAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRotationPolicy) *string { return v.ExpireAfter }).(pulumi.StringPtrOutput)
}

// Notify at a given duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
func (o KeyRotationPolicyOutput) NotifyBeforeExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRotationPolicy) *string { return v.NotifyBeforeExpiry }).(pulumi.StringPtrOutput)
}

type KeyRotationPolicyPtrOutput struct{ *pulumi.OutputState }

func (KeyRotationPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRotationPolicy)(nil)).Elem()
}

func (o KeyRotationPolicyPtrOutput) ToKeyRotationPolicyPtrOutput() KeyRotationPolicyPtrOutput {
	return o
}

func (o KeyRotationPolicyPtrOutput) ToKeyRotationPolicyPtrOutputWithContext(ctx context.Context) KeyRotationPolicyPtrOutput {
	return o
}

func (o KeyRotationPolicyPtrOutput) Elem() KeyRotationPolicyOutput {
	return o.ApplyT(func(v *KeyRotationPolicy) KeyRotationPolicy {
		if v != nil {
			return *v
		}
		var ret KeyRotationPolicy
		return ret
	}).(KeyRotationPolicyOutput)
}

// An `automatic` block as defined below.
func (o KeyRotationPolicyPtrOutput) Automatic() KeyRotationPolicyAutomaticPtrOutput {
	return o.ApplyT(func(v *KeyRotationPolicy) *KeyRotationPolicyAutomatic {
		if v == nil {
			return nil
		}
		return v.Automatic
	}).(KeyRotationPolicyAutomaticPtrOutput)
}

// Expire a Key Vault Key after given duration as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
func (o KeyRotationPolicyPtrOutput) ExpireAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRotationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.ExpireAfter
	}).(pulumi.StringPtrOutput)
}

// Notify at a given duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
func (o KeyRotationPolicyPtrOutput) NotifyBeforeExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRotationPolicy) *string {
		if v == nil {
			return nil
		}
		return v.NotifyBeforeExpiry
	}).(pulumi.StringPtrOutput)
}

type KeyRotationPolicyAutomatic struct {
	// Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
	TimeAfterCreation *string `pulumi:"timeAfterCreation"`
	// Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
	TimeBeforeExpiry *string `pulumi:"timeBeforeExpiry"`
}

// KeyRotationPolicyAutomaticInput is an input type that accepts KeyRotationPolicyAutomaticArgs and KeyRotationPolicyAutomaticOutput values.
// You can construct a concrete instance of `KeyRotationPolicyAutomaticInput` via:
//
//	KeyRotationPolicyAutomaticArgs{...}
type KeyRotationPolicyAutomaticInput interface {
	pulumi.Input

	ToKeyRotationPolicyAutomaticOutput() KeyRotationPolicyAutomaticOutput
	ToKeyRotationPolicyAutomaticOutputWithContext(context.Context) KeyRotationPolicyAutomaticOutput
}

type KeyRotationPolicyAutomaticArgs struct {
	// Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
	TimeAfterCreation pulumi.StringPtrInput `pulumi:"timeAfterCreation"`
	// Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
	TimeBeforeExpiry pulumi.StringPtrInput `pulumi:"timeBeforeExpiry"`
}

func (KeyRotationPolicyAutomaticArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRotationPolicyAutomatic)(nil)).Elem()
}

func (i KeyRotationPolicyAutomaticArgs) ToKeyRotationPolicyAutomaticOutput() KeyRotationPolicyAutomaticOutput {
	return i.ToKeyRotationPolicyAutomaticOutputWithContext(context.Background())
}

func (i KeyRotationPolicyAutomaticArgs) ToKeyRotationPolicyAutomaticOutputWithContext(ctx context.Context) KeyRotationPolicyAutomaticOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRotationPolicyAutomaticOutput)
}

func (i KeyRotationPolicyAutomaticArgs) ToKeyRotationPolicyAutomaticPtrOutput() KeyRotationPolicyAutomaticPtrOutput {
	return i.ToKeyRotationPolicyAutomaticPtrOutputWithContext(context.Background())
}

func (i KeyRotationPolicyAutomaticArgs) ToKeyRotationPolicyAutomaticPtrOutputWithContext(ctx context.Context) KeyRotationPolicyAutomaticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRotationPolicyAutomaticOutput).ToKeyRotationPolicyAutomaticPtrOutputWithContext(ctx)
}

// KeyRotationPolicyAutomaticPtrInput is an input type that accepts KeyRotationPolicyAutomaticArgs, KeyRotationPolicyAutomaticPtr and KeyRotationPolicyAutomaticPtrOutput values.
// You can construct a concrete instance of `KeyRotationPolicyAutomaticPtrInput` via:
//
//	        KeyRotationPolicyAutomaticArgs{...}
//
//	or:
//
//	        nil
type KeyRotationPolicyAutomaticPtrInput interface {
	pulumi.Input

	ToKeyRotationPolicyAutomaticPtrOutput() KeyRotationPolicyAutomaticPtrOutput
	ToKeyRotationPolicyAutomaticPtrOutputWithContext(context.Context) KeyRotationPolicyAutomaticPtrOutput
}

type keyRotationPolicyAutomaticPtrType KeyRotationPolicyAutomaticArgs

func KeyRotationPolicyAutomaticPtr(v *KeyRotationPolicyAutomaticArgs) KeyRotationPolicyAutomaticPtrInput {
	return (*keyRotationPolicyAutomaticPtrType)(v)
}

func (*keyRotationPolicyAutomaticPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRotationPolicyAutomatic)(nil)).Elem()
}

func (i *keyRotationPolicyAutomaticPtrType) ToKeyRotationPolicyAutomaticPtrOutput() KeyRotationPolicyAutomaticPtrOutput {
	return i.ToKeyRotationPolicyAutomaticPtrOutputWithContext(context.Background())
}

func (i *keyRotationPolicyAutomaticPtrType) ToKeyRotationPolicyAutomaticPtrOutputWithContext(ctx context.Context) KeyRotationPolicyAutomaticPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyRotationPolicyAutomaticPtrOutput)
}

type KeyRotationPolicyAutomaticOutput struct{ *pulumi.OutputState }

func (KeyRotationPolicyAutomaticOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyRotationPolicyAutomatic)(nil)).Elem()
}

func (o KeyRotationPolicyAutomaticOutput) ToKeyRotationPolicyAutomaticOutput() KeyRotationPolicyAutomaticOutput {
	return o
}

func (o KeyRotationPolicyAutomaticOutput) ToKeyRotationPolicyAutomaticOutputWithContext(ctx context.Context) KeyRotationPolicyAutomaticOutput {
	return o
}

func (o KeyRotationPolicyAutomaticOutput) ToKeyRotationPolicyAutomaticPtrOutput() KeyRotationPolicyAutomaticPtrOutput {
	return o.ToKeyRotationPolicyAutomaticPtrOutputWithContext(context.Background())
}

func (o KeyRotationPolicyAutomaticOutput) ToKeyRotationPolicyAutomaticPtrOutputWithContext(ctx context.Context) KeyRotationPolicyAutomaticPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyRotationPolicyAutomatic) *KeyRotationPolicyAutomatic {
		return &v
	}).(KeyRotationPolicyAutomaticPtrOutput)
}

// Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
func (o KeyRotationPolicyAutomaticOutput) TimeAfterCreation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRotationPolicyAutomatic) *string { return v.TimeAfterCreation }).(pulumi.StringPtrOutput)
}

// Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
func (o KeyRotationPolicyAutomaticOutput) TimeBeforeExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyRotationPolicyAutomatic) *string { return v.TimeBeforeExpiry }).(pulumi.StringPtrOutput)
}

type KeyRotationPolicyAutomaticPtrOutput struct{ *pulumi.OutputState }

func (KeyRotationPolicyAutomaticPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyRotationPolicyAutomatic)(nil)).Elem()
}

func (o KeyRotationPolicyAutomaticPtrOutput) ToKeyRotationPolicyAutomaticPtrOutput() KeyRotationPolicyAutomaticPtrOutput {
	return o
}

func (o KeyRotationPolicyAutomaticPtrOutput) ToKeyRotationPolicyAutomaticPtrOutputWithContext(ctx context.Context) KeyRotationPolicyAutomaticPtrOutput {
	return o
}

func (o KeyRotationPolicyAutomaticPtrOutput) Elem() KeyRotationPolicyAutomaticOutput {
	return o.ApplyT(func(v *KeyRotationPolicyAutomatic) KeyRotationPolicyAutomatic {
		if v != nil {
			return *v
		}
		var ret KeyRotationPolicyAutomatic
		return ret
	}).(KeyRotationPolicyAutomaticOutput)
}

// Rotate automatically at a duration after create as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
func (o KeyRotationPolicyAutomaticPtrOutput) TimeAfterCreation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRotationPolicyAutomatic) *string {
		if v == nil {
			return nil
		}
		return v.TimeAfterCreation
	}).(pulumi.StringPtrOutput)
}

// Rotate automatically at a duration before expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations).
func (o KeyRotationPolicyAutomaticPtrOutput) TimeBeforeExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyRotationPolicyAutomatic) *string {
		if v == nil {
			return nil
		}
		return v.TimeBeforeExpiry
	}).(pulumi.StringPtrOutput)
}

type KeyVaultAccessPolicy struct {
	// The object ID of an Application in Azure Active Directory.
	ApplicationId *string `pulumi:"applicationId"`
	// List of certificate permissions, must be one or more from the following: `Backup`, `Create`, `Delete`, `DeleteIssuers`, `Get`, `GetIssuers`, `Import`, `List`, `ListIssuers`, `ManageContacts`, `ManageIssuers`, `Purge`, `Recover`, `Restore`, `SetIssuers` and `Update`.
	CertificatePermissions []string `pulumi:"certificatePermissions"`
	// List of key permissions. Possible values are `Backup`, `Create`, `Decrypt`, `Delete`, `Encrypt`, `Get`, `Import`, `List`, `Purge`, `Recover`, `Restore`, `Sign`, `UnwrapKey`, `Update`, `Verify`, `WrapKey`, `Release`, `Rotate`, `GetRotationPolicy` and `SetRotationPolicy`.
	KeyPermissions []string `pulumi:"keyPermissions"`
	// The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
	ObjectId string `pulumi:"objectId"`
	// List of secret permissions, must be one or more from the following: `Backup`, `Delete`, `Get`, `List`, `Purge`, `Recover`, `Restore` and `Set`.
	SecretPermissions []string `pulumi:"secretPermissions"`
	// List of storage permissions, must be one or more from the following: `Backup`, `Delete`, `DeleteSAS`, `Get`, `GetSAS`, `List`, `ListSAS`, `Purge`, `Recover`, `RegenerateKey`, `Restore`, `Set`, `SetSAS` and `Update`.
	StoragePermissions []string `pulumi:"storagePermissions"`
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the `tenantId` used above.
	TenantId string `pulumi:"tenantId"`
}

// KeyVaultAccessPolicyInput is an input type that accepts KeyVaultAccessPolicyArgs and KeyVaultAccessPolicyOutput values.
// You can construct a concrete instance of `KeyVaultAccessPolicyInput` via:
//
//	KeyVaultAccessPolicyArgs{...}
type KeyVaultAccessPolicyInput interface {
	pulumi.Input

	ToKeyVaultAccessPolicyOutput() KeyVaultAccessPolicyOutput
	ToKeyVaultAccessPolicyOutputWithContext(context.Context) KeyVaultAccessPolicyOutput
}

type KeyVaultAccessPolicyArgs struct {
	// The object ID of an Application in Azure Active Directory.
	ApplicationId pulumi.StringPtrInput `pulumi:"applicationId"`
	// List of certificate permissions, must be one or more from the following: `Backup`, `Create`, `Delete`, `DeleteIssuers`, `Get`, `GetIssuers`, `Import`, `List`, `ListIssuers`, `ManageContacts`, `ManageIssuers`, `Purge`, `Recover`, `Restore`, `SetIssuers` and `Update`.
	CertificatePermissions pulumi.StringArrayInput `pulumi:"certificatePermissions"`
	// List of key permissions. Possible values are `Backup`, `Create`, `Decrypt`, `Delete`, `Encrypt`, `Get`, `Import`, `List`, `Purge`, `Recover`, `Restore`, `Sign`, `UnwrapKey`, `Update`, `Verify`, `WrapKey`, `Release`, `Rotate`, `GetRotationPolicy` and `SetRotationPolicy`.
	KeyPermissions pulumi.StringArrayInput `pulumi:"keyPermissions"`
	// The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// List of secret permissions, must be one or more from the following: `Backup`, `Delete`, `Get`, `List`, `Purge`, `Recover`, `Restore` and `Set`.
	SecretPermissions pulumi.StringArrayInput `pulumi:"secretPermissions"`
	// List of storage permissions, must be one or more from the following: `Backup`, `Delete`, `DeleteSAS`, `Get`, `GetSAS`, `List`, `ListSAS`, `Purge`, `Recover`, `RegenerateKey`, `Restore`, `Set`, `SetSAS` and `Update`.
	StoragePermissions pulumi.StringArrayInput `pulumi:"storagePermissions"`
	// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the `tenantId` used above.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (KeyVaultAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAccessPolicy)(nil)).Elem()
}

func (i KeyVaultAccessPolicyArgs) ToKeyVaultAccessPolicyOutput() KeyVaultAccessPolicyOutput {
	return i.ToKeyVaultAccessPolicyOutputWithContext(context.Background())
}

func (i KeyVaultAccessPolicyArgs) ToKeyVaultAccessPolicyOutputWithContext(ctx context.Context) KeyVaultAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAccessPolicyOutput)
}

// KeyVaultAccessPolicyArrayInput is an input type that accepts KeyVaultAccessPolicyArray and KeyVaultAccessPolicyArrayOutput values.
// You can construct a concrete instance of `KeyVaultAccessPolicyArrayInput` via:
//
//	KeyVaultAccessPolicyArray{ KeyVaultAccessPolicyArgs{...} }
type KeyVaultAccessPolicyArrayInput interface {
	pulumi.Input

	ToKeyVaultAccessPolicyArrayOutput() KeyVaultAccessPolicyArrayOutput
	ToKeyVaultAccessPolicyArrayOutputWithContext(context.Context) KeyVaultAccessPolicyArrayOutput
}

type KeyVaultAccessPolicyArray []KeyVaultAccessPolicyInput

func (KeyVaultAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultAccessPolicy)(nil)).Elem()
}

func (i KeyVaultAccessPolicyArray) ToKeyVaultAccessPolicyArrayOutput() KeyVaultAccessPolicyArrayOutput {
	return i.ToKeyVaultAccessPolicyArrayOutputWithContext(context.Background())
}

func (i KeyVaultAccessPolicyArray) ToKeyVaultAccessPolicyArrayOutputWithContext(ctx context.Context) KeyVaultAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultAccessPolicyArrayOutput)
}

type KeyVaultAccessPolicyOutput struct{ *pulumi.OutputState }

func (KeyVaultAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultAccessPolicy)(nil)).Elem()
}

func (o KeyVaultAccessPolicyOutput) ToKeyVaultAccessPolicyOutput() KeyVaultAccessPolicyOutput {
	return o
}

func (o KeyVaultAccessPolicyOutput) ToKeyVaultAccessPolicyOutputWithContext(ctx context.Context) KeyVaultAccessPolicyOutput {
	return o
}

// The object ID of an Application in Azure Active Directory.
func (o KeyVaultAccessPolicyOutput) ApplicationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultAccessPolicy) *string { return v.ApplicationId }).(pulumi.StringPtrOutput)
}

// List of certificate permissions, must be one or more from the following: `Backup`, `Create`, `Delete`, `DeleteIssuers`, `Get`, `GetIssuers`, `Import`, `List`, `ListIssuers`, `ManageContacts`, `ManageIssuers`, `Purge`, `Recover`, `Restore`, `SetIssuers` and `Update`.
func (o KeyVaultAccessPolicyOutput) CertificatePermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KeyVaultAccessPolicy) []string { return v.CertificatePermissions }).(pulumi.StringArrayOutput)
}

// List of key permissions. Possible values are `Backup`, `Create`, `Decrypt`, `Delete`, `Encrypt`, `Get`, `Import`, `List`, `Purge`, `Recover`, `Restore`, `Sign`, `UnwrapKey`, `Update`, `Verify`, `WrapKey`, `Release`, `Rotate`, `GetRotationPolicy` and `SetRotationPolicy`.
func (o KeyVaultAccessPolicyOutput) KeyPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KeyVaultAccessPolicy) []string { return v.KeyPermissions }).(pulumi.StringArrayOutput)
}

// The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies.
func (o KeyVaultAccessPolicyOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAccessPolicy) string { return v.ObjectId }).(pulumi.StringOutput)
}

// List of secret permissions, must be one or more from the following: `Backup`, `Delete`, `Get`, `List`, `Purge`, `Recover`, `Restore` and `Set`.
func (o KeyVaultAccessPolicyOutput) SecretPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KeyVaultAccessPolicy) []string { return v.SecretPermissions }).(pulumi.StringArrayOutput)
}

// List of storage permissions, must be one or more from the following: `Backup`, `Delete`, `DeleteSAS`, `Get`, `GetSAS`, `List`, `ListSAS`, `Purge`, `Recover`, `RegenerateKey`, `Restore`, `Set`, `SetSAS` and `Update`.
func (o KeyVaultAccessPolicyOutput) StoragePermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KeyVaultAccessPolicy) []string { return v.StoragePermissions }).(pulumi.StringArrayOutput)
}

// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault. Must match the `tenantId` used above.
func (o KeyVaultAccessPolicyOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultAccessPolicy) string { return v.TenantId }).(pulumi.StringOutput)
}

type KeyVaultAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (KeyVaultAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultAccessPolicy)(nil)).Elem()
}

func (o KeyVaultAccessPolicyArrayOutput) ToKeyVaultAccessPolicyArrayOutput() KeyVaultAccessPolicyArrayOutput {
	return o
}

func (o KeyVaultAccessPolicyArrayOutput) ToKeyVaultAccessPolicyArrayOutputWithContext(ctx context.Context) KeyVaultAccessPolicyArrayOutput {
	return o
}

func (o KeyVaultAccessPolicyArrayOutput) Index(i pulumi.IntInput) KeyVaultAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyVaultAccessPolicy {
		return vs[0].([]KeyVaultAccessPolicy)[vs[1].(int)]
	}).(KeyVaultAccessPolicyOutput)
}

type KeyVaultContact struct {
	// E-mail address of the contact.
	Email string `pulumi:"email"`
	// Name of the contact.
	Name *string `pulumi:"name"`
	// Phone number of the contact.
	Phone *string `pulumi:"phone"`
}

// KeyVaultContactInput is an input type that accepts KeyVaultContactArgs and KeyVaultContactOutput values.
// You can construct a concrete instance of `KeyVaultContactInput` via:
//
//	KeyVaultContactArgs{...}
type KeyVaultContactInput interface {
	pulumi.Input

	ToKeyVaultContactOutput() KeyVaultContactOutput
	ToKeyVaultContactOutputWithContext(context.Context) KeyVaultContactOutput
}

type KeyVaultContactArgs struct {
	// E-mail address of the contact.
	Email pulumi.StringInput `pulumi:"email"`
	// Name of the contact.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Phone number of the contact.
	Phone pulumi.StringPtrInput `pulumi:"phone"`
}

func (KeyVaultContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultContact)(nil)).Elem()
}

func (i KeyVaultContactArgs) ToKeyVaultContactOutput() KeyVaultContactOutput {
	return i.ToKeyVaultContactOutputWithContext(context.Background())
}

func (i KeyVaultContactArgs) ToKeyVaultContactOutputWithContext(ctx context.Context) KeyVaultContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultContactOutput)
}

// KeyVaultContactArrayInput is an input type that accepts KeyVaultContactArray and KeyVaultContactArrayOutput values.
// You can construct a concrete instance of `KeyVaultContactArrayInput` via:
//
//	KeyVaultContactArray{ KeyVaultContactArgs{...} }
type KeyVaultContactArrayInput interface {
	pulumi.Input

	ToKeyVaultContactArrayOutput() KeyVaultContactArrayOutput
	ToKeyVaultContactArrayOutputWithContext(context.Context) KeyVaultContactArrayOutput
}

type KeyVaultContactArray []KeyVaultContactInput

func (KeyVaultContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultContact)(nil)).Elem()
}

func (i KeyVaultContactArray) ToKeyVaultContactArrayOutput() KeyVaultContactArrayOutput {
	return i.ToKeyVaultContactArrayOutputWithContext(context.Background())
}

func (i KeyVaultContactArray) ToKeyVaultContactArrayOutputWithContext(ctx context.Context) KeyVaultContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultContactArrayOutput)
}

type KeyVaultContactOutput struct{ *pulumi.OutputState }

func (KeyVaultContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultContact)(nil)).Elem()
}

func (o KeyVaultContactOutput) ToKeyVaultContactOutput() KeyVaultContactOutput {
	return o
}

func (o KeyVaultContactOutput) ToKeyVaultContactOutputWithContext(ctx context.Context) KeyVaultContactOutput {
	return o
}

// E-mail address of the contact.
func (o KeyVaultContactOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultContact) string { return v.Email }).(pulumi.StringOutput)
}

// Name of the contact.
func (o KeyVaultContactOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultContact) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Phone number of the contact.
func (o KeyVaultContactOutput) Phone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyVaultContact) *string { return v.Phone }).(pulumi.StringPtrOutput)
}

type KeyVaultContactArrayOutput struct{ *pulumi.OutputState }

func (KeyVaultContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyVaultContact)(nil)).Elem()
}

func (o KeyVaultContactArrayOutput) ToKeyVaultContactArrayOutput() KeyVaultContactArrayOutput {
	return o
}

func (o KeyVaultContactArrayOutput) ToKeyVaultContactArrayOutputWithContext(ctx context.Context) KeyVaultContactArrayOutput {
	return o
}

func (o KeyVaultContactArrayOutput) Index(i pulumi.IntInput) KeyVaultContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyVaultContact {
		return vs[0].([]KeyVaultContact)[vs[1].(int)]
	}).(KeyVaultContactOutput)
}

type KeyVaultNetworkAcls struct {
	// Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
	Bypass string `pulumi:"bypass"`
	// The Default Action to use when no rules match from `ipRules` / `virtualNetworkSubnetIds`. Possible values are `Allow` and `Deny`.
	DefaultAction string `pulumi:"defaultAction"`
	// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
	IpRules []string `pulumi:"ipRules"`
	// One or more Subnet IDs which should be able to access this Key Vault.
	VirtualNetworkSubnetIds []string `pulumi:"virtualNetworkSubnetIds"`
}

// KeyVaultNetworkAclsInput is an input type that accepts KeyVaultNetworkAclsArgs and KeyVaultNetworkAclsOutput values.
// You can construct a concrete instance of `KeyVaultNetworkAclsInput` via:
//
//	KeyVaultNetworkAclsArgs{...}
type KeyVaultNetworkAclsInput interface {
	pulumi.Input

	ToKeyVaultNetworkAclsOutput() KeyVaultNetworkAclsOutput
	ToKeyVaultNetworkAclsOutputWithContext(context.Context) KeyVaultNetworkAclsOutput
}

type KeyVaultNetworkAclsArgs struct {
	// Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
	Bypass pulumi.StringInput `pulumi:"bypass"`
	// The Default Action to use when no rules match from `ipRules` / `virtualNetworkSubnetIds`. Possible values are `Allow` and `Deny`.
	DefaultAction pulumi.StringInput `pulumi:"defaultAction"`
	// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
	IpRules pulumi.StringArrayInput `pulumi:"ipRules"`
	// One or more Subnet IDs which should be able to access this Key Vault.
	VirtualNetworkSubnetIds pulumi.StringArrayInput `pulumi:"virtualNetworkSubnetIds"`
}

func (KeyVaultNetworkAclsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultNetworkAcls)(nil)).Elem()
}

func (i KeyVaultNetworkAclsArgs) ToKeyVaultNetworkAclsOutput() KeyVaultNetworkAclsOutput {
	return i.ToKeyVaultNetworkAclsOutputWithContext(context.Background())
}

func (i KeyVaultNetworkAclsArgs) ToKeyVaultNetworkAclsOutputWithContext(ctx context.Context) KeyVaultNetworkAclsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultNetworkAclsOutput)
}

func (i KeyVaultNetworkAclsArgs) ToKeyVaultNetworkAclsPtrOutput() KeyVaultNetworkAclsPtrOutput {
	return i.ToKeyVaultNetworkAclsPtrOutputWithContext(context.Background())
}

func (i KeyVaultNetworkAclsArgs) ToKeyVaultNetworkAclsPtrOutputWithContext(ctx context.Context) KeyVaultNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultNetworkAclsOutput).ToKeyVaultNetworkAclsPtrOutputWithContext(ctx)
}

// KeyVaultNetworkAclsPtrInput is an input type that accepts KeyVaultNetworkAclsArgs, KeyVaultNetworkAclsPtr and KeyVaultNetworkAclsPtrOutput values.
// You can construct a concrete instance of `KeyVaultNetworkAclsPtrInput` via:
//
//	        KeyVaultNetworkAclsArgs{...}
//
//	or:
//
//	        nil
type KeyVaultNetworkAclsPtrInput interface {
	pulumi.Input

	ToKeyVaultNetworkAclsPtrOutput() KeyVaultNetworkAclsPtrOutput
	ToKeyVaultNetworkAclsPtrOutputWithContext(context.Context) KeyVaultNetworkAclsPtrOutput
}

type keyVaultNetworkAclsPtrType KeyVaultNetworkAclsArgs

func KeyVaultNetworkAclsPtr(v *KeyVaultNetworkAclsArgs) KeyVaultNetworkAclsPtrInput {
	return (*keyVaultNetworkAclsPtrType)(v)
}

func (*keyVaultNetworkAclsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultNetworkAcls)(nil)).Elem()
}

func (i *keyVaultNetworkAclsPtrType) ToKeyVaultNetworkAclsPtrOutput() KeyVaultNetworkAclsPtrOutput {
	return i.ToKeyVaultNetworkAclsPtrOutputWithContext(context.Background())
}

func (i *keyVaultNetworkAclsPtrType) ToKeyVaultNetworkAclsPtrOutputWithContext(ctx context.Context) KeyVaultNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyVaultNetworkAclsPtrOutput)
}

type KeyVaultNetworkAclsOutput struct{ *pulumi.OutputState }

func (KeyVaultNetworkAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyVaultNetworkAcls)(nil)).Elem()
}

func (o KeyVaultNetworkAclsOutput) ToKeyVaultNetworkAclsOutput() KeyVaultNetworkAclsOutput {
	return o
}

func (o KeyVaultNetworkAclsOutput) ToKeyVaultNetworkAclsOutputWithContext(ctx context.Context) KeyVaultNetworkAclsOutput {
	return o
}

func (o KeyVaultNetworkAclsOutput) ToKeyVaultNetworkAclsPtrOutput() KeyVaultNetworkAclsPtrOutput {
	return o.ToKeyVaultNetworkAclsPtrOutputWithContext(context.Background())
}

func (o KeyVaultNetworkAclsOutput) ToKeyVaultNetworkAclsPtrOutputWithContext(ctx context.Context) KeyVaultNetworkAclsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyVaultNetworkAcls) *KeyVaultNetworkAcls {
		return &v
	}).(KeyVaultNetworkAclsPtrOutput)
}

// Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
func (o KeyVaultNetworkAclsOutput) Bypass() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultNetworkAcls) string { return v.Bypass }).(pulumi.StringOutput)
}

// The Default Action to use when no rules match from `ipRules` / `virtualNetworkSubnetIds`. Possible values are `Allow` and `Deny`.
func (o KeyVaultNetworkAclsOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v KeyVaultNetworkAcls) string { return v.DefaultAction }).(pulumi.StringOutput)
}

// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
func (o KeyVaultNetworkAclsOutput) IpRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KeyVaultNetworkAcls) []string { return v.IpRules }).(pulumi.StringArrayOutput)
}

// One or more Subnet IDs which should be able to access this Key Vault.
func (o KeyVaultNetworkAclsOutput) VirtualNetworkSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KeyVaultNetworkAcls) []string { return v.VirtualNetworkSubnetIds }).(pulumi.StringArrayOutput)
}

type KeyVaultNetworkAclsPtrOutput struct{ *pulumi.OutputState }

func (KeyVaultNetworkAclsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyVaultNetworkAcls)(nil)).Elem()
}

func (o KeyVaultNetworkAclsPtrOutput) ToKeyVaultNetworkAclsPtrOutput() KeyVaultNetworkAclsPtrOutput {
	return o
}

func (o KeyVaultNetworkAclsPtrOutput) ToKeyVaultNetworkAclsPtrOutputWithContext(ctx context.Context) KeyVaultNetworkAclsPtrOutput {
	return o
}

func (o KeyVaultNetworkAclsPtrOutput) Elem() KeyVaultNetworkAclsOutput {
	return o.ApplyT(func(v *KeyVaultNetworkAcls) KeyVaultNetworkAcls {
		if v != nil {
			return *v
		}
		var ret KeyVaultNetworkAcls
		return ret
	}).(KeyVaultNetworkAclsOutput)
}

// Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
func (o KeyVaultNetworkAclsPtrOutput) Bypass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return &v.Bypass
	}).(pulumi.StringPtrOutput)
}

// The Default Action to use when no rules match from `ipRules` / `virtualNetworkSubnetIds`. Possible values are `Allow` and `Deny`.
func (o KeyVaultNetworkAclsPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyVaultNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

// One or more IP Addresses, or CIDR Blocks which should be able to access the Key Vault.
func (o KeyVaultNetworkAclsPtrOutput) IpRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KeyVaultNetworkAcls) []string {
		if v == nil {
			return nil
		}
		return v.IpRules
	}).(pulumi.StringArrayOutput)
}

// One or more Subnet IDs which should be able to access this Key Vault.
func (o KeyVaultNetworkAclsPtrOutput) VirtualNetworkSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *KeyVaultNetworkAcls) []string {
		if v == nil {
			return nil
		}
		return v.VirtualNetworkSubnetIds
	}).(pulumi.StringArrayOutput)
}

type ManagedHardwareSecurityModuleNetworkAcls struct {
	// Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
	Bypass string `pulumi:"bypass"`
	// The Default Action to use. Possible values are `Allow` and `Deny`.
	DefaultAction string `pulumi:"defaultAction"`
}

// ManagedHardwareSecurityModuleNetworkAclsInput is an input type that accepts ManagedHardwareSecurityModuleNetworkAclsArgs and ManagedHardwareSecurityModuleNetworkAclsOutput values.
// You can construct a concrete instance of `ManagedHardwareSecurityModuleNetworkAclsInput` via:
//
//	ManagedHardwareSecurityModuleNetworkAclsArgs{...}
type ManagedHardwareSecurityModuleNetworkAclsInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleNetworkAclsOutput() ManagedHardwareSecurityModuleNetworkAclsOutput
	ToManagedHardwareSecurityModuleNetworkAclsOutputWithContext(context.Context) ManagedHardwareSecurityModuleNetworkAclsOutput
}

type ManagedHardwareSecurityModuleNetworkAclsArgs struct {
	// Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
	Bypass pulumi.StringInput `pulumi:"bypass"`
	// The Default Action to use. Possible values are `Allow` and `Deny`.
	DefaultAction pulumi.StringInput `pulumi:"defaultAction"`
}

func (ManagedHardwareSecurityModuleNetworkAclsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedHardwareSecurityModuleNetworkAcls)(nil)).Elem()
}

func (i ManagedHardwareSecurityModuleNetworkAclsArgs) ToManagedHardwareSecurityModuleNetworkAclsOutput() ManagedHardwareSecurityModuleNetworkAclsOutput {
	return i.ToManagedHardwareSecurityModuleNetworkAclsOutputWithContext(context.Background())
}

func (i ManagedHardwareSecurityModuleNetworkAclsArgs) ToManagedHardwareSecurityModuleNetworkAclsOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleNetworkAclsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleNetworkAclsOutput)
}

func (i ManagedHardwareSecurityModuleNetworkAclsArgs) ToManagedHardwareSecurityModuleNetworkAclsPtrOutput() ManagedHardwareSecurityModuleNetworkAclsPtrOutput {
	return i.ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(context.Background())
}

func (i ManagedHardwareSecurityModuleNetworkAclsArgs) ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleNetworkAclsOutput).ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(ctx)
}

// ManagedHardwareSecurityModuleNetworkAclsPtrInput is an input type that accepts ManagedHardwareSecurityModuleNetworkAclsArgs, ManagedHardwareSecurityModuleNetworkAclsPtr and ManagedHardwareSecurityModuleNetworkAclsPtrOutput values.
// You can construct a concrete instance of `ManagedHardwareSecurityModuleNetworkAclsPtrInput` via:
//
//	        ManagedHardwareSecurityModuleNetworkAclsArgs{...}
//
//	or:
//
//	        nil
type ManagedHardwareSecurityModuleNetworkAclsPtrInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleNetworkAclsPtrOutput() ManagedHardwareSecurityModuleNetworkAclsPtrOutput
	ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(context.Context) ManagedHardwareSecurityModuleNetworkAclsPtrOutput
}

type managedHardwareSecurityModuleNetworkAclsPtrType ManagedHardwareSecurityModuleNetworkAclsArgs

func ManagedHardwareSecurityModuleNetworkAclsPtr(v *ManagedHardwareSecurityModuleNetworkAclsArgs) ManagedHardwareSecurityModuleNetworkAclsPtrInput {
	return (*managedHardwareSecurityModuleNetworkAclsPtrType)(v)
}

func (*managedHardwareSecurityModuleNetworkAclsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedHardwareSecurityModuleNetworkAcls)(nil)).Elem()
}

func (i *managedHardwareSecurityModuleNetworkAclsPtrType) ToManagedHardwareSecurityModuleNetworkAclsPtrOutput() ManagedHardwareSecurityModuleNetworkAclsPtrOutput {
	return i.ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(context.Background())
}

func (i *managedHardwareSecurityModuleNetworkAclsPtrType) ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleNetworkAclsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleNetworkAclsPtrOutput)
}

type ManagedHardwareSecurityModuleNetworkAclsOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleNetworkAclsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedHardwareSecurityModuleNetworkAcls)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleNetworkAclsOutput) ToManagedHardwareSecurityModuleNetworkAclsOutput() ManagedHardwareSecurityModuleNetworkAclsOutput {
	return o
}

func (o ManagedHardwareSecurityModuleNetworkAclsOutput) ToManagedHardwareSecurityModuleNetworkAclsOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleNetworkAclsOutput {
	return o
}

func (o ManagedHardwareSecurityModuleNetworkAclsOutput) ToManagedHardwareSecurityModuleNetworkAclsPtrOutput() ManagedHardwareSecurityModuleNetworkAclsPtrOutput {
	return o.ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(context.Background())
}

func (o ManagedHardwareSecurityModuleNetworkAclsOutput) ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleNetworkAclsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ManagedHardwareSecurityModuleNetworkAcls) *ManagedHardwareSecurityModuleNetworkAcls {
		return &v
	}).(ManagedHardwareSecurityModuleNetworkAclsPtrOutput)
}

// Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
func (o ManagedHardwareSecurityModuleNetworkAclsOutput) Bypass() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedHardwareSecurityModuleNetworkAcls) string { return v.Bypass }).(pulumi.StringOutput)
}

// The Default Action to use. Possible values are `Allow` and `Deny`.
func (o ManagedHardwareSecurityModuleNetworkAclsOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v ManagedHardwareSecurityModuleNetworkAcls) string { return v.DefaultAction }).(pulumi.StringOutput)
}

type ManagedHardwareSecurityModuleNetworkAclsPtrOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleNetworkAclsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedHardwareSecurityModuleNetworkAcls)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleNetworkAclsPtrOutput) ToManagedHardwareSecurityModuleNetworkAclsPtrOutput() ManagedHardwareSecurityModuleNetworkAclsPtrOutput {
	return o
}

func (o ManagedHardwareSecurityModuleNetworkAclsPtrOutput) ToManagedHardwareSecurityModuleNetworkAclsPtrOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleNetworkAclsPtrOutput {
	return o
}

func (o ManagedHardwareSecurityModuleNetworkAclsPtrOutput) Elem() ManagedHardwareSecurityModuleNetworkAclsOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleNetworkAcls) ManagedHardwareSecurityModuleNetworkAcls {
		if v != nil {
			return *v
		}
		var ret ManagedHardwareSecurityModuleNetworkAcls
		return ret
	}).(ManagedHardwareSecurityModuleNetworkAclsOutput)
}

// Specifies which traffic can bypass the network rules. Possible values are `AzureServices` and `None`.
func (o ManagedHardwareSecurityModuleNetworkAclsPtrOutput) Bypass() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return &v.Bypass
	}).(pulumi.StringPtrOutput)
}

// The Default Action to use. Possible values are `Allow` and `Deny`.
func (o ManagedHardwareSecurityModuleNetworkAclsPtrOutput) DefaultAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleNetworkAcls) *string {
		if v == nil {
			return nil
		}
		return &v.DefaultAction
	}).(pulumi.StringPtrOutput)
}

type ManagedHardwareSecurityModuleRoleDefinitionPermission struct {
	// One or more Allowed Actions, such as `*`, `Microsoft.Resources/subscriptions/resourceGroups/read`. See ['Azure Resource Manager resource provider operations'](https://docs.microsoft.com/azure/role-based-access-control/resource-provider-operations) for details.
	Actions []string `pulumi:"actions"`
	// Specifies a list of data action permission to grant. Possible values are `Microsoft.KeyVault/managedHsm/keys/read/action`, `Microsoft.KeyVault/managedHsm/keys/write/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action`, `Microsoft.KeyVault/managedHsm/keys/backup/action`, `Microsoft.KeyVault/managedHsm/keys/restore/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/delete/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/read/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/read/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action`, `Microsoft.KeyVault/managedHsm/keys/encrypt/action`, `Microsoft.KeyVault/managedHsm/keys/decrypt/action`, `Microsoft.KeyVault/managedHsm/keys/wrap/action`, `Microsoft.KeyVault/managedHsm/keys/unwrap/action`, `Microsoft.KeyVault/managedHsm/keys/sign/action`, `Microsoft.KeyVault/managedHsm/keys/verify/action`, `Microsoft.KeyVault/managedHsm/keys/create`, `Microsoft.KeyVault/managedHsm/keys/delete`, `Microsoft.KeyVault/managedHsm/keys/export/action`, `Microsoft.KeyVault/managedHsm/keys/release/action`, `Microsoft.KeyVault/managedHsm/keys/import/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete`, `Microsoft.KeyVault/managedHsm/securitydomain/download/action`, `Microsoft.KeyVault/managedHsm/securitydomain/download/read`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/action`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/read`, `Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read`, `Microsoft.KeyVault/managedHsm/backup/start/action`, `Microsoft.KeyVault/managedHsm/restore/start/action`, `Microsoft.KeyVault/managedHsm/backup/status/action`, `Microsoft.KeyVault/managedHsm/restore/status/action` and `Microsoft.KeyVault/managedHsm/rng/action`.
	DataActions []string `pulumi:"dataActions"`
	// One or more Disallowed Actions, such as `*`, `Microsoft.Resources/subscriptions/resourceGroups/read`. See ['Azure Resource Manager resource provider operations'](https://docs.microsoft.com/azure/role-based-access-control/resource-provider-operations) for details.
	NotActions []string `pulumi:"notActions"`
	// Specifies a list of data action permission not to grant. Possible values are `Microsoft.KeyVault/managedHsm/keys/read/action`, `Microsoft.KeyVault/managedHsm/keys/write/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action`, `Microsoft.KeyVault/managedHsm/keys/backup/action`, `Microsoft.KeyVault/managedHsm/keys/restore/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/delete/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/read/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/read/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action`, `Microsoft.KeyVault/managedHsm/keys/encrypt/action`, `Microsoft.KeyVault/managedHsm/keys/decrypt/action`, `Microsoft.KeyVault/managedHsm/keys/wrap/action`, `Microsoft.KeyVault/managedHsm/keys/unwrap/action`, `Microsoft.KeyVault/managedHsm/keys/sign/action`, `Microsoft.KeyVault/managedHsm/keys/verify/action`, `Microsoft.KeyVault/managedHsm/keys/create`, `Microsoft.KeyVault/managedHsm/keys/delete`, `Microsoft.KeyVault/managedHsm/keys/export/action`, `Microsoft.KeyVault/managedHsm/keys/release/action`, `Microsoft.KeyVault/managedHsm/keys/import/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete`, `Microsoft.KeyVault/managedHsm/securitydomain/download/action`, `Microsoft.KeyVault/managedHsm/securitydomain/download/read`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/action`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/read`, `Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read`, `Microsoft.KeyVault/managedHsm/backup/start/action`, `Microsoft.KeyVault/managedHsm/restore/start/action`, `Microsoft.KeyVault/managedHsm/backup/status/action`, `Microsoft.KeyVault/managedHsm/restore/status/action` and `Microsoft.KeyVault/managedHsm/rng/action`.
	NotDataActions []string `pulumi:"notDataActions"`
}

// ManagedHardwareSecurityModuleRoleDefinitionPermissionInput is an input type that accepts ManagedHardwareSecurityModuleRoleDefinitionPermissionArgs and ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput values.
// You can construct a concrete instance of `ManagedHardwareSecurityModuleRoleDefinitionPermissionInput` via:
//
//	ManagedHardwareSecurityModuleRoleDefinitionPermissionArgs{...}
type ManagedHardwareSecurityModuleRoleDefinitionPermissionInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleRoleDefinitionPermissionOutput() ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput
	ToManagedHardwareSecurityModuleRoleDefinitionPermissionOutputWithContext(context.Context) ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput
}

type ManagedHardwareSecurityModuleRoleDefinitionPermissionArgs struct {
	// One or more Allowed Actions, such as `*`, `Microsoft.Resources/subscriptions/resourceGroups/read`. See ['Azure Resource Manager resource provider operations'](https://docs.microsoft.com/azure/role-based-access-control/resource-provider-operations) for details.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// Specifies a list of data action permission to grant. Possible values are `Microsoft.KeyVault/managedHsm/keys/read/action`, `Microsoft.KeyVault/managedHsm/keys/write/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action`, `Microsoft.KeyVault/managedHsm/keys/backup/action`, `Microsoft.KeyVault/managedHsm/keys/restore/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/delete/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/read/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/read/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action`, `Microsoft.KeyVault/managedHsm/keys/encrypt/action`, `Microsoft.KeyVault/managedHsm/keys/decrypt/action`, `Microsoft.KeyVault/managedHsm/keys/wrap/action`, `Microsoft.KeyVault/managedHsm/keys/unwrap/action`, `Microsoft.KeyVault/managedHsm/keys/sign/action`, `Microsoft.KeyVault/managedHsm/keys/verify/action`, `Microsoft.KeyVault/managedHsm/keys/create`, `Microsoft.KeyVault/managedHsm/keys/delete`, `Microsoft.KeyVault/managedHsm/keys/export/action`, `Microsoft.KeyVault/managedHsm/keys/release/action`, `Microsoft.KeyVault/managedHsm/keys/import/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete`, `Microsoft.KeyVault/managedHsm/securitydomain/download/action`, `Microsoft.KeyVault/managedHsm/securitydomain/download/read`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/action`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/read`, `Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read`, `Microsoft.KeyVault/managedHsm/backup/start/action`, `Microsoft.KeyVault/managedHsm/restore/start/action`, `Microsoft.KeyVault/managedHsm/backup/status/action`, `Microsoft.KeyVault/managedHsm/restore/status/action` and `Microsoft.KeyVault/managedHsm/rng/action`.
	DataActions pulumi.StringArrayInput `pulumi:"dataActions"`
	// One or more Disallowed Actions, such as `*`, `Microsoft.Resources/subscriptions/resourceGroups/read`. See ['Azure Resource Manager resource provider operations'](https://docs.microsoft.com/azure/role-based-access-control/resource-provider-operations) for details.
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// Specifies a list of data action permission not to grant. Possible values are `Microsoft.KeyVault/managedHsm/keys/read/action`, `Microsoft.KeyVault/managedHsm/keys/write/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action`, `Microsoft.KeyVault/managedHsm/keys/backup/action`, `Microsoft.KeyVault/managedHsm/keys/restore/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/delete/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/read/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/read/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action`, `Microsoft.KeyVault/managedHsm/keys/encrypt/action`, `Microsoft.KeyVault/managedHsm/keys/decrypt/action`, `Microsoft.KeyVault/managedHsm/keys/wrap/action`, `Microsoft.KeyVault/managedHsm/keys/unwrap/action`, `Microsoft.KeyVault/managedHsm/keys/sign/action`, `Microsoft.KeyVault/managedHsm/keys/verify/action`, `Microsoft.KeyVault/managedHsm/keys/create`, `Microsoft.KeyVault/managedHsm/keys/delete`, `Microsoft.KeyVault/managedHsm/keys/export/action`, `Microsoft.KeyVault/managedHsm/keys/release/action`, `Microsoft.KeyVault/managedHsm/keys/import/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete`, `Microsoft.KeyVault/managedHsm/securitydomain/download/action`, `Microsoft.KeyVault/managedHsm/securitydomain/download/read`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/action`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/read`, `Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read`, `Microsoft.KeyVault/managedHsm/backup/start/action`, `Microsoft.KeyVault/managedHsm/restore/start/action`, `Microsoft.KeyVault/managedHsm/backup/status/action`, `Microsoft.KeyVault/managedHsm/restore/status/action` and `Microsoft.KeyVault/managedHsm/rng/action`.
	NotDataActions pulumi.StringArrayInput `pulumi:"notDataActions"`
}

func (ManagedHardwareSecurityModuleRoleDefinitionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedHardwareSecurityModuleRoleDefinitionPermission)(nil)).Elem()
}

func (i ManagedHardwareSecurityModuleRoleDefinitionPermissionArgs) ToManagedHardwareSecurityModuleRoleDefinitionPermissionOutput() ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return i.ToManagedHardwareSecurityModuleRoleDefinitionPermissionOutputWithContext(context.Background())
}

func (i ManagedHardwareSecurityModuleRoleDefinitionPermissionArgs) ToManagedHardwareSecurityModuleRoleDefinitionPermissionOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput)
}

// ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayInput is an input type that accepts ManagedHardwareSecurityModuleRoleDefinitionPermissionArray and ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput values.
// You can construct a concrete instance of `ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayInput` via:
//
//	ManagedHardwareSecurityModuleRoleDefinitionPermissionArray{ ManagedHardwareSecurityModuleRoleDefinitionPermissionArgs{...} }
type ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput() ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput
	ToManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutputWithContext(context.Context) ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput
}

type ManagedHardwareSecurityModuleRoleDefinitionPermissionArray []ManagedHardwareSecurityModuleRoleDefinitionPermissionInput

func (ManagedHardwareSecurityModuleRoleDefinitionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedHardwareSecurityModuleRoleDefinitionPermission)(nil)).Elem()
}

func (i ManagedHardwareSecurityModuleRoleDefinitionPermissionArray) ToManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput() ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput {
	return i.ToManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutputWithContext(context.Background())
}

func (i ManagedHardwareSecurityModuleRoleDefinitionPermissionArray) ToManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput)
}

type ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ManagedHardwareSecurityModuleRoleDefinitionPermission)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) ToManagedHardwareSecurityModuleRoleDefinitionPermissionOutput() ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return o
}

func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) ToManagedHardwareSecurityModuleRoleDefinitionPermissionOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return o
}

// One or more Allowed Actions, such as `*`, `Microsoft.Resources/subscriptions/resourceGroups/read`. See ['Azure Resource Manager resource provider operations'](https://docs.microsoft.com/azure/role-based-access-control/resource-provider-operations) for details.
func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedHardwareSecurityModuleRoleDefinitionPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// Specifies a list of data action permission to grant. Possible values are `Microsoft.KeyVault/managedHsm/keys/read/action`, `Microsoft.KeyVault/managedHsm/keys/write/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action`, `Microsoft.KeyVault/managedHsm/keys/backup/action`, `Microsoft.KeyVault/managedHsm/keys/restore/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/delete/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/read/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/read/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action`, `Microsoft.KeyVault/managedHsm/keys/encrypt/action`, `Microsoft.KeyVault/managedHsm/keys/decrypt/action`, `Microsoft.KeyVault/managedHsm/keys/wrap/action`, `Microsoft.KeyVault/managedHsm/keys/unwrap/action`, `Microsoft.KeyVault/managedHsm/keys/sign/action`, `Microsoft.KeyVault/managedHsm/keys/verify/action`, `Microsoft.KeyVault/managedHsm/keys/create`, `Microsoft.KeyVault/managedHsm/keys/delete`, `Microsoft.KeyVault/managedHsm/keys/export/action`, `Microsoft.KeyVault/managedHsm/keys/release/action`, `Microsoft.KeyVault/managedHsm/keys/import/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete`, `Microsoft.KeyVault/managedHsm/securitydomain/download/action`, `Microsoft.KeyVault/managedHsm/securitydomain/download/read`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/action`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/read`, `Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read`, `Microsoft.KeyVault/managedHsm/backup/start/action`, `Microsoft.KeyVault/managedHsm/restore/start/action`, `Microsoft.KeyVault/managedHsm/backup/status/action`, `Microsoft.KeyVault/managedHsm/restore/status/action` and `Microsoft.KeyVault/managedHsm/rng/action`.
func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) DataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedHardwareSecurityModuleRoleDefinitionPermission) []string { return v.DataActions }).(pulumi.StringArrayOutput)
}

// One or more Disallowed Actions, such as `*`, `Microsoft.Resources/subscriptions/resourceGroups/read`. See ['Azure Resource Manager resource provider operations'](https://docs.microsoft.com/azure/role-based-access-control/resource-provider-operations) for details.
func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedHardwareSecurityModuleRoleDefinitionPermission) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// Specifies a list of data action permission not to grant. Possible values are `Microsoft.KeyVault/managedHsm/keys/read/action`, `Microsoft.KeyVault/managedHsm/keys/write/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/read/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/recover/action`, `Microsoft.KeyVault/managedHsm/keys/backup/action`, `Microsoft.KeyVault/managedHsm/keys/restore/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/delete/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/read/action`, `Microsoft.KeyVault/managedHsm/roleAssignments/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/read/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/write/action`, `Microsoft.KeyVault/managedHsm/roleDefinitions/delete/action`, `Microsoft.KeyVault/managedHsm/keys/encrypt/action`, `Microsoft.KeyVault/managedHsm/keys/decrypt/action`, `Microsoft.KeyVault/managedHsm/keys/wrap/action`, `Microsoft.KeyVault/managedHsm/keys/unwrap/action`, `Microsoft.KeyVault/managedHsm/keys/sign/action`, `Microsoft.KeyVault/managedHsm/keys/verify/action`, `Microsoft.KeyVault/managedHsm/keys/create`, `Microsoft.KeyVault/managedHsm/keys/delete`, `Microsoft.KeyVault/managedHsm/keys/export/action`, `Microsoft.KeyVault/managedHsm/keys/release/action`, `Microsoft.KeyVault/managedHsm/keys/import/action`, `Microsoft.KeyVault/managedHsm/keys/deletedKeys/delete`, `Microsoft.KeyVault/managedHsm/securitydomain/download/action`, `Microsoft.KeyVault/managedHsm/securitydomain/download/read`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/action`, `Microsoft.KeyVault/managedHsm/securitydomain/upload/read`, `Microsoft.KeyVault/managedHsm/securitydomain/transferkey/read`, `Microsoft.KeyVault/managedHsm/backup/start/action`, `Microsoft.KeyVault/managedHsm/restore/start/action`, `Microsoft.KeyVault/managedHsm/backup/status/action`, `Microsoft.KeyVault/managedHsm/restore/status/action` and `Microsoft.KeyVault/managedHsm/rng/action`.
func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ManagedHardwareSecurityModuleRoleDefinitionPermission) []string { return v.NotDataActions }).(pulumi.StringArrayOutput)
}

type ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ManagedHardwareSecurityModuleRoleDefinitionPermission)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput) ToManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput() ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput {
	return o
}

func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput) ToManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput {
	return o
}

func (o ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput) Index(i pulumi.IntInput) ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ManagedHardwareSecurityModuleRoleDefinitionPermission {
		return vs[0].([]ManagedHardwareSecurityModuleRoleDefinitionPermission)[vs[1].(int)]
	}).(ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput)
}

type GetCertificateCertificatePolicy struct {
	// A `issuerParameters` block as defined below.
	IssuerParameters []GetCertificateCertificatePolicyIssuerParameter `pulumi:"issuerParameters"`
	// A `keyProperties` block as defined below.
	KeyProperties []GetCertificateCertificatePolicyKeyProperty `pulumi:"keyProperties"`
	// A `lifetimeAction` block as defined below.
	LifetimeActions []GetCertificateCertificatePolicyLifetimeAction `pulumi:"lifetimeActions"`
	// A `secretProperties` block as defined below.
	SecretProperties []GetCertificateCertificatePolicySecretProperty `pulumi:"secretProperties"`
	// An `x509CertificateProperties` block as defined below.
	X509CertificateProperties []GetCertificateCertificatePolicyX509CertificateProperty `pulumi:"x509CertificateProperties"`
}

// GetCertificateCertificatePolicyInput is an input type that accepts GetCertificateCertificatePolicyArgs and GetCertificateCertificatePolicyOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyInput` via:
//
//	GetCertificateCertificatePolicyArgs{...}
type GetCertificateCertificatePolicyInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyOutput() GetCertificateCertificatePolicyOutput
	ToGetCertificateCertificatePolicyOutputWithContext(context.Context) GetCertificateCertificatePolicyOutput
}

type GetCertificateCertificatePolicyArgs struct {
	// A `issuerParameters` block as defined below.
	IssuerParameters GetCertificateCertificatePolicyIssuerParameterArrayInput `pulumi:"issuerParameters"`
	// A `keyProperties` block as defined below.
	KeyProperties GetCertificateCertificatePolicyKeyPropertyArrayInput `pulumi:"keyProperties"`
	// A `lifetimeAction` block as defined below.
	LifetimeActions GetCertificateCertificatePolicyLifetimeActionArrayInput `pulumi:"lifetimeActions"`
	// A `secretProperties` block as defined below.
	SecretProperties GetCertificateCertificatePolicySecretPropertyArrayInput `pulumi:"secretProperties"`
	// An `x509CertificateProperties` block as defined below.
	X509CertificateProperties GetCertificateCertificatePolicyX509CertificatePropertyArrayInput `pulumi:"x509CertificateProperties"`
}

func (GetCertificateCertificatePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicy)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyArgs) ToGetCertificateCertificatePolicyOutput() GetCertificateCertificatePolicyOutput {
	return i.ToGetCertificateCertificatePolicyOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyArgs) ToGetCertificateCertificatePolicyOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyOutput)
}

// GetCertificateCertificatePolicyArrayInput is an input type that accepts GetCertificateCertificatePolicyArray and GetCertificateCertificatePolicyArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyArrayInput` via:
//
//	GetCertificateCertificatePolicyArray{ GetCertificateCertificatePolicyArgs{...} }
type GetCertificateCertificatePolicyArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyArrayOutput() GetCertificateCertificatePolicyArrayOutput
	ToGetCertificateCertificatePolicyArrayOutputWithContext(context.Context) GetCertificateCertificatePolicyArrayOutput
}

type GetCertificateCertificatePolicyArray []GetCertificateCertificatePolicyInput

func (GetCertificateCertificatePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicy)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyArray) ToGetCertificateCertificatePolicyArrayOutput() GetCertificateCertificatePolicyArrayOutput {
	return i.ToGetCertificateCertificatePolicyArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyArray) ToGetCertificateCertificatePolicyArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyArrayOutput)
}

type GetCertificateCertificatePolicyOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicy)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyOutput) ToGetCertificateCertificatePolicyOutput() GetCertificateCertificatePolicyOutput {
	return o
}

func (o GetCertificateCertificatePolicyOutput) ToGetCertificateCertificatePolicyOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyOutput {
	return o
}

// A `issuerParameters` block as defined below.
func (o GetCertificateCertificatePolicyOutput) IssuerParameters() GetCertificateCertificatePolicyIssuerParameterArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicy) []GetCertificateCertificatePolicyIssuerParameter {
		return v.IssuerParameters
	}).(GetCertificateCertificatePolicyIssuerParameterArrayOutput)
}

// A `keyProperties` block as defined below.
func (o GetCertificateCertificatePolicyOutput) KeyProperties() GetCertificateCertificatePolicyKeyPropertyArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicy) []GetCertificateCertificatePolicyKeyProperty {
		return v.KeyProperties
	}).(GetCertificateCertificatePolicyKeyPropertyArrayOutput)
}

// A `lifetimeAction` block as defined below.
func (o GetCertificateCertificatePolicyOutput) LifetimeActions() GetCertificateCertificatePolicyLifetimeActionArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicy) []GetCertificateCertificatePolicyLifetimeAction {
		return v.LifetimeActions
	}).(GetCertificateCertificatePolicyLifetimeActionArrayOutput)
}

// A `secretProperties` block as defined below.
func (o GetCertificateCertificatePolicyOutput) SecretProperties() GetCertificateCertificatePolicySecretPropertyArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicy) []GetCertificateCertificatePolicySecretProperty {
		return v.SecretProperties
	}).(GetCertificateCertificatePolicySecretPropertyArrayOutput)
}

// An `x509CertificateProperties` block as defined below.
func (o GetCertificateCertificatePolicyOutput) X509CertificateProperties() GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicy) []GetCertificateCertificatePolicyX509CertificateProperty {
		return v.X509CertificateProperties
	}).(GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput)
}

type GetCertificateCertificatePolicyArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicy)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyArrayOutput) ToGetCertificateCertificatePolicyArrayOutput() GetCertificateCertificatePolicyArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyArrayOutput) ToGetCertificateCertificatePolicyArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicy {
		return vs[0].([]GetCertificateCertificatePolicy)[vs[1].(int)]
	}).(GetCertificateCertificatePolicyOutput)
}

type GetCertificateCertificatePolicyIssuerParameter struct {
	// Specifies the name of the Key Vault Certificate.
	Name string `pulumi:"name"`
}

// GetCertificateCertificatePolicyIssuerParameterInput is an input type that accepts GetCertificateCertificatePolicyIssuerParameterArgs and GetCertificateCertificatePolicyIssuerParameterOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyIssuerParameterInput` via:
//
//	GetCertificateCertificatePolicyIssuerParameterArgs{...}
type GetCertificateCertificatePolicyIssuerParameterInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyIssuerParameterOutput() GetCertificateCertificatePolicyIssuerParameterOutput
	ToGetCertificateCertificatePolicyIssuerParameterOutputWithContext(context.Context) GetCertificateCertificatePolicyIssuerParameterOutput
}

type GetCertificateCertificatePolicyIssuerParameterArgs struct {
	// Specifies the name of the Key Vault Certificate.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetCertificateCertificatePolicyIssuerParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyIssuerParameter)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyIssuerParameterArgs) ToGetCertificateCertificatePolicyIssuerParameterOutput() GetCertificateCertificatePolicyIssuerParameterOutput {
	return i.ToGetCertificateCertificatePolicyIssuerParameterOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyIssuerParameterArgs) ToGetCertificateCertificatePolicyIssuerParameterOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyIssuerParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyIssuerParameterOutput)
}

// GetCertificateCertificatePolicyIssuerParameterArrayInput is an input type that accepts GetCertificateCertificatePolicyIssuerParameterArray and GetCertificateCertificatePolicyIssuerParameterArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyIssuerParameterArrayInput` via:
//
//	GetCertificateCertificatePolicyIssuerParameterArray{ GetCertificateCertificatePolicyIssuerParameterArgs{...} }
type GetCertificateCertificatePolicyIssuerParameterArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyIssuerParameterArrayOutput() GetCertificateCertificatePolicyIssuerParameterArrayOutput
	ToGetCertificateCertificatePolicyIssuerParameterArrayOutputWithContext(context.Context) GetCertificateCertificatePolicyIssuerParameterArrayOutput
}

type GetCertificateCertificatePolicyIssuerParameterArray []GetCertificateCertificatePolicyIssuerParameterInput

func (GetCertificateCertificatePolicyIssuerParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyIssuerParameter)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyIssuerParameterArray) ToGetCertificateCertificatePolicyIssuerParameterArrayOutput() GetCertificateCertificatePolicyIssuerParameterArrayOutput {
	return i.ToGetCertificateCertificatePolicyIssuerParameterArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyIssuerParameterArray) ToGetCertificateCertificatePolicyIssuerParameterArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyIssuerParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyIssuerParameterArrayOutput)
}

type GetCertificateCertificatePolicyIssuerParameterOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyIssuerParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyIssuerParameter)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyIssuerParameterOutput) ToGetCertificateCertificatePolicyIssuerParameterOutput() GetCertificateCertificatePolicyIssuerParameterOutput {
	return o
}

func (o GetCertificateCertificatePolicyIssuerParameterOutput) ToGetCertificateCertificatePolicyIssuerParameterOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyIssuerParameterOutput {
	return o
}

// Specifies the name of the Key Vault Certificate.
func (o GetCertificateCertificatePolicyIssuerParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyIssuerParameter) string { return v.Name }).(pulumi.StringOutput)
}

type GetCertificateCertificatePolicyIssuerParameterArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyIssuerParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyIssuerParameter)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyIssuerParameterArrayOutput) ToGetCertificateCertificatePolicyIssuerParameterArrayOutput() GetCertificateCertificatePolicyIssuerParameterArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyIssuerParameterArrayOutput) ToGetCertificateCertificatePolicyIssuerParameterArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyIssuerParameterArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyIssuerParameterArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicyIssuerParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicyIssuerParameter {
		return vs[0].([]GetCertificateCertificatePolicyIssuerParameter)[vs[1].(int)]
	}).(GetCertificateCertificatePolicyIssuerParameterOutput)
}

type GetCertificateCertificatePolicyKeyProperty struct {
	Curve string `pulumi:"curve"`
	// Is this Certificate Exportable?
	Exportable bool `pulumi:"exportable"`
	// The size of the Key used in the Certificate.
	KeySize int `pulumi:"keySize"`
	// Specifies the Type of Key, for example `RSA`.
	KeyType string `pulumi:"keyType"`
	// Is the key reusable?
	ReuseKey bool `pulumi:"reuseKey"`
}

// GetCertificateCertificatePolicyKeyPropertyInput is an input type that accepts GetCertificateCertificatePolicyKeyPropertyArgs and GetCertificateCertificatePolicyKeyPropertyOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyKeyPropertyInput` via:
//
//	GetCertificateCertificatePolicyKeyPropertyArgs{...}
type GetCertificateCertificatePolicyKeyPropertyInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyKeyPropertyOutput() GetCertificateCertificatePolicyKeyPropertyOutput
	ToGetCertificateCertificatePolicyKeyPropertyOutputWithContext(context.Context) GetCertificateCertificatePolicyKeyPropertyOutput
}

type GetCertificateCertificatePolicyKeyPropertyArgs struct {
	Curve pulumi.StringInput `pulumi:"curve"`
	// Is this Certificate Exportable?
	Exportable pulumi.BoolInput `pulumi:"exportable"`
	// The size of the Key used in the Certificate.
	KeySize pulumi.IntInput `pulumi:"keySize"`
	// Specifies the Type of Key, for example `RSA`.
	KeyType pulumi.StringInput `pulumi:"keyType"`
	// Is the key reusable?
	ReuseKey pulumi.BoolInput `pulumi:"reuseKey"`
}

func (GetCertificateCertificatePolicyKeyPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyKeyProperty)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyKeyPropertyArgs) ToGetCertificateCertificatePolicyKeyPropertyOutput() GetCertificateCertificatePolicyKeyPropertyOutput {
	return i.ToGetCertificateCertificatePolicyKeyPropertyOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyKeyPropertyArgs) ToGetCertificateCertificatePolicyKeyPropertyOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyKeyPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyKeyPropertyOutput)
}

// GetCertificateCertificatePolicyKeyPropertyArrayInput is an input type that accepts GetCertificateCertificatePolicyKeyPropertyArray and GetCertificateCertificatePolicyKeyPropertyArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyKeyPropertyArrayInput` via:
//
//	GetCertificateCertificatePolicyKeyPropertyArray{ GetCertificateCertificatePolicyKeyPropertyArgs{...} }
type GetCertificateCertificatePolicyKeyPropertyArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyKeyPropertyArrayOutput() GetCertificateCertificatePolicyKeyPropertyArrayOutput
	ToGetCertificateCertificatePolicyKeyPropertyArrayOutputWithContext(context.Context) GetCertificateCertificatePolicyKeyPropertyArrayOutput
}

type GetCertificateCertificatePolicyKeyPropertyArray []GetCertificateCertificatePolicyKeyPropertyInput

func (GetCertificateCertificatePolicyKeyPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyKeyProperty)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyKeyPropertyArray) ToGetCertificateCertificatePolicyKeyPropertyArrayOutput() GetCertificateCertificatePolicyKeyPropertyArrayOutput {
	return i.ToGetCertificateCertificatePolicyKeyPropertyArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyKeyPropertyArray) ToGetCertificateCertificatePolicyKeyPropertyArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyKeyPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyKeyPropertyArrayOutput)
}

type GetCertificateCertificatePolicyKeyPropertyOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyKeyPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyKeyProperty)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyKeyPropertyOutput) ToGetCertificateCertificatePolicyKeyPropertyOutput() GetCertificateCertificatePolicyKeyPropertyOutput {
	return o
}

func (o GetCertificateCertificatePolicyKeyPropertyOutput) ToGetCertificateCertificatePolicyKeyPropertyOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyKeyPropertyOutput {
	return o
}

func (o GetCertificateCertificatePolicyKeyPropertyOutput) Curve() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyKeyProperty) string { return v.Curve }).(pulumi.StringOutput)
}

// Is this Certificate Exportable?
func (o GetCertificateCertificatePolicyKeyPropertyOutput) Exportable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyKeyProperty) bool { return v.Exportable }).(pulumi.BoolOutput)
}

// The size of the Key used in the Certificate.
func (o GetCertificateCertificatePolicyKeyPropertyOutput) KeySize() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyKeyProperty) int { return v.KeySize }).(pulumi.IntOutput)
}

// Specifies the Type of Key, for example `RSA`.
func (o GetCertificateCertificatePolicyKeyPropertyOutput) KeyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyKeyProperty) string { return v.KeyType }).(pulumi.StringOutput)
}

// Is the key reusable?
func (o GetCertificateCertificatePolicyKeyPropertyOutput) ReuseKey() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyKeyProperty) bool { return v.ReuseKey }).(pulumi.BoolOutput)
}

type GetCertificateCertificatePolicyKeyPropertyArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyKeyPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyKeyProperty)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyKeyPropertyArrayOutput) ToGetCertificateCertificatePolicyKeyPropertyArrayOutput() GetCertificateCertificatePolicyKeyPropertyArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyKeyPropertyArrayOutput) ToGetCertificateCertificatePolicyKeyPropertyArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyKeyPropertyArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyKeyPropertyArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicyKeyPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicyKeyProperty {
		return vs[0].([]GetCertificateCertificatePolicyKeyProperty)[vs[1].(int)]
	}).(GetCertificateCertificatePolicyKeyPropertyOutput)
}

type GetCertificateCertificatePolicyLifetimeAction struct {
	// A `action` block as defined below.
	Actions []GetCertificateCertificatePolicyLifetimeActionAction `pulumi:"actions"`
	// A `trigger` block as defined below.
	Triggers []GetCertificateCertificatePolicyLifetimeActionTrigger `pulumi:"triggers"`
}

// GetCertificateCertificatePolicyLifetimeActionInput is an input type that accepts GetCertificateCertificatePolicyLifetimeActionArgs and GetCertificateCertificatePolicyLifetimeActionOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyLifetimeActionInput` via:
//
//	GetCertificateCertificatePolicyLifetimeActionArgs{...}
type GetCertificateCertificatePolicyLifetimeActionInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyLifetimeActionOutput() GetCertificateCertificatePolicyLifetimeActionOutput
	ToGetCertificateCertificatePolicyLifetimeActionOutputWithContext(context.Context) GetCertificateCertificatePolicyLifetimeActionOutput
}

type GetCertificateCertificatePolicyLifetimeActionArgs struct {
	// A `action` block as defined below.
	Actions GetCertificateCertificatePolicyLifetimeActionActionArrayInput `pulumi:"actions"`
	// A `trigger` block as defined below.
	Triggers GetCertificateCertificatePolicyLifetimeActionTriggerArrayInput `pulumi:"triggers"`
}

func (GetCertificateCertificatePolicyLifetimeActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyLifetimeActionArgs) ToGetCertificateCertificatePolicyLifetimeActionOutput() GetCertificateCertificatePolicyLifetimeActionOutput {
	return i.ToGetCertificateCertificatePolicyLifetimeActionOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyLifetimeActionArgs) ToGetCertificateCertificatePolicyLifetimeActionOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyLifetimeActionOutput)
}

// GetCertificateCertificatePolicyLifetimeActionArrayInput is an input type that accepts GetCertificateCertificatePolicyLifetimeActionArray and GetCertificateCertificatePolicyLifetimeActionArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyLifetimeActionArrayInput` via:
//
//	GetCertificateCertificatePolicyLifetimeActionArray{ GetCertificateCertificatePolicyLifetimeActionArgs{...} }
type GetCertificateCertificatePolicyLifetimeActionArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyLifetimeActionArrayOutput() GetCertificateCertificatePolicyLifetimeActionArrayOutput
	ToGetCertificateCertificatePolicyLifetimeActionArrayOutputWithContext(context.Context) GetCertificateCertificatePolicyLifetimeActionArrayOutput
}

type GetCertificateCertificatePolicyLifetimeActionArray []GetCertificateCertificatePolicyLifetimeActionInput

func (GetCertificateCertificatePolicyLifetimeActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyLifetimeActionArray) ToGetCertificateCertificatePolicyLifetimeActionArrayOutput() GetCertificateCertificatePolicyLifetimeActionArrayOutput {
	return i.ToGetCertificateCertificatePolicyLifetimeActionArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyLifetimeActionArray) ToGetCertificateCertificatePolicyLifetimeActionArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyLifetimeActionArrayOutput)
}

type GetCertificateCertificatePolicyLifetimeActionOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyLifetimeActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyLifetimeActionOutput) ToGetCertificateCertificatePolicyLifetimeActionOutput() GetCertificateCertificatePolicyLifetimeActionOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionOutput) ToGetCertificateCertificatePolicyLifetimeActionOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionOutput {
	return o
}

// A `action` block as defined below.
func (o GetCertificateCertificatePolicyLifetimeActionOutput) Actions() GetCertificateCertificatePolicyLifetimeActionActionArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyLifetimeAction) []GetCertificateCertificatePolicyLifetimeActionAction {
		return v.Actions
	}).(GetCertificateCertificatePolicyLifetimeActionActionArrayOutput)
}

// A `trigger` block as defined below.
func (o GetCertificateCertificatePolicyLifetimeActionOutput) Triggers() GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyLifetimeAction) []GetCertificateCertificatePolicyLifetimeActionTrigger {
		return v.Triggers
	}).(GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput)
}

type GetCertificateCertificatePolicyLifetimeActionArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyLifetimeActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyLifetimeAction)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyLifetimeActionArrayOutput) ToGetCertificateCertificatePolicyLifetimeActionArrayOutput() GetCertificateCertificatePolicyLifetimeActionArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionArrayOutput) ToGetCertificateCertificatePolicyLifetimeActionArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicyLifetimeActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicyLifetimeAction {
		return vs[0].([]GetCertificateCertificatePolicyLifetimeAction)[vs[1].(int)]
	}).(GetCertificateCertificatePolicyLifetimeActionOutput)
}

type GetCertificateCertificatePolicyLifetimeActionAction struct {
	// The Type of action to be performed when the lifetime trigger is triggerec.
	ActionType string `pulumi:"actionType"`
}

// GetCertificateCertificatePolicyLifetimeActionActionInput is an input type that accepts GetCertificateCertificatePolicyLifetimeActionActionArgs and GetCertificateCertificatePolicyLifetimeActionActionOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyLifetimeActionActionInput` via:
//
//	GetCertificateCertificatePolicyLifetimeActionActionArgs{...}
type GetCertificateCertificatePolicyLifetimeActionActionInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyLifetimeActionActionOutput() GetCertificateCertificatePolicyLifetimeActionActionOutput
	ToGetCertificateCertificatePolicyLifetimeActionActionOutputWithContext(context.Context) GetCertificateCertificatePolicyLifetimeActionActionOutput
}

type GetCertificateCertificatePolicyLifetimeActionActionArgs struct {
	// The Type of action to be performed when the lifetime trigger is triggerec.
	ActionType pulumi.StringInput `pulumi:"actionType"`
}

func (GetCertificateCertificatePolicyLifetimeActionActionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionAction)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyLifetimeActionActionArgs) ToGetCertificateCertificatePolicyLifetimeActionActionOutput() GetCertificateCertificatePolicyLifetimeActionActionOutput {
	return i.ToGetCertificateCertificatePolicyLifetimeActionActionOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyLifetimeActionActionArgs) ToGetCertificateCertificatePolicyLifetimeActionActionOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionActionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyLifetimeActionActionOutput)
}

// GetCertificateCertificatePolicyLifetimeActionActionArrayInput is an input type that accepts GetCertificateCertificatePolicyLifetimeActionActionArray and GetCertificateCertificatePolicyLifetimeActionActionArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyLifetimeActionActionArrayInput` via:
//
//	GetCertificateCertificatePolicyLifetimeActionActionArray{ GetCertificateCertificatePolicyLifetimeActionActionArgs{...} }
type GetCertificateCertificatePolicyLifetimeActionActionArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyLifetimeActionActionArrayOutput() GetCertificateCertificatePolicyLifetimeActionActionArrayOutput
	ToGetCertificateCertificatePolicyLifetimeActionActionArrayOutputWithContext(context.Context) GetCertificateCertificatePolicyLifetimeActionActionArrayOutput
}

type GetCertificateCertificatePolicyLifetimeActionActionArray []GetCertificateCertificatePolicyLifetimeActionActionInput

func (GetCertificateCertificatePolicyLifetimeActionActionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyLifetimeActionAction)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyLifetimeActionActionArray) ToGetCertificateCertificatePolicyLifetimeActionActionArrayOutput() GetCertificateCertificatePolicyLifetimeActionActionArrayOutput {
	return i.ToGetCertificateCertificatePolicyLifetimeActionActionArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyLifetimeActionActionArray) ToGetCertificateCertificatePolicyLifetimeActionActionArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionActionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyLifetimeActionActionArrayOutput)
}

type GetCertificateCertificatePolicyLifetimeActionActionOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyLifetimeActionActionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionAction)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyLifetimeActionActionOutput) ToGetCertificateCertificatePolicyLifetimeActionActionOutput() GetCertificateCertificatePolicyLifetimeActionActionOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionActionOutput) ToGetCertificateCertificatePolicyLifetimeActionActionOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionActionOutput {
	return o
}

// The Type of action to be performed when the lifetime trigger is triggerec.
func (o GetCertificateCertificatePolicyLifetimeActionActionOutput) ActionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyLifetimeActionAction) string { return v.ActionType }).(pulumi.StringOutput)
}

type GetCertificateCertificatePolicyLifetimeActionActionArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyLifetimeActionActionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyLifetimeActionAction)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyLifetimeActionActionArrayOutput) ToGetCertificateCertificatePolicyLifetimeActionActionArrayOutput() GetCertificateCertificatePolicyLifetimeActionActionArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionActionArrayOutput) ToGetCertificateCertificatePolicyLifetimeActionActionArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionActionArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionActionArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicyLifetimeActionActionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicyLifetimeActionAction {
		return vs[0].([]GetCertificateCertificatePolicyLifetimeActionAction)[vs[1].(int)]
	}).(GetCertificateCertificatePolicyLifetimeActionActionOutput)
}

type GetCertificateCertificatePolicyLifetimeActionTrigger struct {
	// The number of days before the Certificate expires that the action associated with this Trigger should run.
	DaysBeforeExpiry int `pulumi:"daysBeforeExpiry"`
	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run.
	LifetimePercentage int `pulumi:"lifetimePercentage"`
}

// GetCertificateCertificatePolicyLifetimeActionTriggerInput is an input type that accepts GetCertificateCertificatePolicyLifetimeActionTriggerArgs and GetCertificateCertificatePolicyLifetimeActionTriggerOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyLifetimeActionTriggerInput` via:
//
//	GetCertificateCertificatePolicyLifetimeActionTriggerArgs{...}
type GetCertificateCertificatePolicyLifetimeActionTriggerInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyLifetimeActionTriggerOutput() GetCertificateCertificatePolicyLifetimeActionTriggerOutput
	ToGetCertificateCertificatePolicyLifetimeActionTriggerOutputWithContext(context.Context) GetCertificateCertificatePolicyLifetimeActionTriggerOutput
}

type GetCertificateCertificatePolicyLifetimeActionTriggerArgs struct {
	// The number of days before the Certificate expires that the action associated with this Trigger should run.
	DaysBeforeExpiry pulumi.IntInput `pulumi:"daysBeforeExpiry"`
	// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run.
	LifetimePercentage pulumi.IntInput `pulumi:"lifetimePercentage"`
}

func (GetCertificateCertificatePolicyLifetimeActionTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionTrigger)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyLifetimeActionTriggerArgs) ToGetCertificateCertificatePolicyLifetimeActionTriggerOutput() GetCertificateCertificatePolicyLifetimeActionTriggerOutput {
	return i.ToGetCertificateCertificatePolicyLifetimeActionTriggerOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyLifetimeActionTriggerArgs) ToGetCertificateCertificatePolicyLifetimeActionTriggerOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyLifetimeActionTriggerOutput)
}

// GetCertificateCertificatePolicyLifetimeActionTriggerArrayInput is an input type that accepts GetCertificateCertificatePolicyLifetimeActionTriggerArray and GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyLifetimeActionTriggerArrayInput` via:
//
//	GetCertificateCertificatePolicyLifetimeActionTriggerArray{ GetCertificateCertificatePolicyLifetimeActionTriggerArgs{...} }
type GetCertificateCertificatePolicyLifetimeActionTriggerArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput() GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput
	ToGetCertificateCertificatePolicyLifetimeActionTriggerArrayOutputWithContext(context.Context) GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput
}

type GetCertificateCertificatePolicyLifetimeActionTriggerArray []GetCertificateCertificatePolicyLifetimeActionTriggerInput

func (GetCertificateCertificatePolicyLifetimeActionTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyLifetimeActionTrigger)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyLifetimeActionTriggerArray) ToGetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput() GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput {
	return i.ToGetCertificateCertificatePolicyLifetimeActionTriggerArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyLifetimeActionTriggerArray) ToGetCertificateCertificatePolicyLifetimeActionTriggerArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput)
}

type GetCertificateCertificatePolicyLifetimeActionTriggerOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyLifetimeActionTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionTrigger)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyLifetimeActionTriggerOutput) ToGetCertificateCertificatePolicyLifetimeActionTriggerOutput() GetCertificateCertificatePolicyLifetimeActionTriggerOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionTriggerOutput) ToGetCertificateCertificatePolicyLifetimeActionTriggerOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionTriggerOutput {
	return o
}

// The number of days before the Certificate expires that the action associated with this Trigger should run.
func (o GetCertificateCertificatePolicyLifetimeActionTriggerOutput) DaysBeforeExpiry() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyLifetimeActionTrigger) int { return v.DaysBeforeExpiry }).(pulumi.IntOutput)
}

// The percentage at which during the Certificates Lifetime the action associated with this Trigger should run.
func (o GetCertificateCertificatePolicyLifetimeActionTriggerOutput) LifetimePercentage() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyLifetimeActionTrigger) int { return v.LifetimePercentage }).(pulumi.IntOutput)
}

type GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyLifetimeActionTrigger)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput) ToGetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput() GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput) ToGetCertificateCertificatePolicyLifetimeActionTriggerArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicyLifetimeActionTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicyLifetimeActionTrigger {
		return vs[0].([]GetCertificateCertificatePolicyLifetimeActionTrigger)[vs[1].(int)]
	}).(GetCertificateCertificatePolicyLifetimeActionTriggerOutput)
}

type GetCertificateCertificatePolicySecretProperty struct {
	// The Content-Type of the Certificate, for example `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
	ContentType string `pulumi:"contentType"`
}

// GetCertificateCertificatePolicySecretPropertyInput is an input type that accepts GetCertificateCertificatePolicySecretPropertyArgs and GetCertificateCertificatePolicySecretPropertyOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicySecretPropertyInput` via:
//
//	GetCertificateCertificatePolicySecretPropertyArgs{...}
type GetCertificateCertificatePolicySecretPropertyInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicySecretPropertyOutput() GetCertificateCertificatePolicySecretPropertyOutput
	ToGetCertificateCertificatePolicySecretPropertyOutputWithContext(context.Context) GetCertificateCertificatePolicySecretPropertyOutput
}

type GetCertificateCertificatePolicySecretPropertyArgs struct {
	// The Content-Type of the Certificate, for example `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
	ContentType pulumi.StringInput `pulumi:"contentType"`
}

func (GetCertificateCertificatePolicySecretPropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicySecretProperty)(nil)).Elem()
}

func (i GetCertificateCertificatePolicySecretPropertyArgs) ToGetCertificateCertificatePolicySecretPropertyOutput() GetCertificateCertificatePolicySecretPropertyOutput {
	return i.ToGetCertificateCertificatePolicySecretPropertyOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicySecretPropertyArgs) ToGetCertificateCertificatePolicySecretPropertyOutputWithContext(ctx context.Context) GetCertificateCertificatePolicySecretPropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicySecretPropertyOutput)
}

// GetCertificateCertificatePolicySecretPropertyArrayInput is an input type that accepts GetCertificateCertificatePolicySecretPropertyArray and GetCertificateCertificatePolicySecretPropertyArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicySecretPropertyArrayInput` via:
//
//	GetCertificateCertificatePolicySecretPropertyArray{ GetCertificateCertificatePolicySecretPropertyArgs{...} }
type GetCertificateCertificatePolicySecretPropertyArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicySecretPropertyArrayOutput() GetCertificateCertificatePolicySecretPropertyArrayOutput
	ToGetCertificateCertificatePolicySecretPropertyArrayOutputWithContext(context.Context) GetCertificateCertificatePolicySecretPropertyArrayOutput
}

type GetCertificateCertificatePolicySecretPropertyArray []GetCertificateCertificatePolicySecretPropertyInput

func (GetCertificateCertificatePolicySecretPropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicySecretProperty)(nil)).Elem()
}

func (i GetCertificateCertificatePolicySecretPropertyArray) ToGetCertificateCertificatePolicySecretPropertyArrayOutput() GetCertificateCertificatePolicySecretPropertyArrayOutput {
	return i.ToGetCertificateCertificatePolicySecretPropertyArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicySecretPropertyArray) ToGetCertificateCertificatePolicySecretPropertyArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicySecretPropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicySecretPropertyArrayOutput)
}

type GetCertificateCertificatePolicySecretPropertyOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicySecretPropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicySecretProperty)(nil)).Elem()
}

func (o GetCertificateCertificatePolicySecretPropertyOutput) ToGetCertificateCertificatePolicySecretPropertyOutput() GetCertificateCertificatePolicySecretPropertyOutput {
	return o
}

func (o GetCertificateCertificatePolicySecretPropertyOutput) ToGetCertificateCertificatePolicySecretPropertyOutputWithContext(ctx context.Context) GetCertificateCertificatePolicySecretPropertyOutput {
	return o
}

// The Content-Type of the Certificate, for example `application/x-pkcs12` for a PFX or `application/x-pem-file` for a PEM.
func (o GetCertificateCertificatePolicySecretPropertyOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicySecretProperty) string { return v.ContentType }).(pulumi.StringOutput)
}

type GetCertificateCertificatePolicySecretPropertyArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicySecretPropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicySecretProperty)(nil)).Elem()
}

func (o GetCertificateCertificatePolicySecretPropertyArrayOutput) ToGetCertificateCertificatePolicySecretPropertyArrayOutput() GetCertificateCertificatePolicySecretPropertyArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicySecretPropertyArrayOutput) ToGetCertificateCertificatePolicySecretPropertyArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicySecretPropertyArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicySecretPropertyArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicySecretPropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicySecretProperty {
		return vs[0].([]GetCertificateCertificatePolicySecretProperty)[vs[1].(int)]
	}).(GetCertificateCertificatePolicySecretPropertyOutput)
}

type GetCertificateCertificatePolicyX509CertificateProperty struct {
	// A list of Extended/Enhanced Key Usages.
	ExtendedKeyUsages []string `pulumi:"extendedKeyUsages"`
	// A list of uses associated with this Key.
	KeyUsages []string `pulumi:"keyUsages"`
	// The Certificate's Subject.
	Subject string `pulumi:"subject"`
	// A `subjectAlternativeNames` block as defined below.
	SubjectAlternativeNames []GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName `pulumi:"subjectAlternativeNames"`
	// The Certificates Validity Period in Months.
	ValidityInMonths int `pulumi:"validityInMonths"`
}

// GetCertificateCertificatePolicyX509CertificatePropertyInput is an input type that accepts GetCertificateCertificatePolicyX509CertificatePropertyArgs and GetCertificateCertificatePolicyX509CertificatePropertyOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyX509CertificatePropertyInput` via:
//
//	GetCertificateCertificatePolicyX509CertificatePropertyArgs{...}
type GetCertificateCertificatePolicyX509CertificatePropertyInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyX509CertificatePropertyOutput() GetCertificateCertificatePolicyX509CertificatePropertyOutput
	ToGetCertificateCertificatePolicyX509CertificatePropertyOutputWithContext(context.Context) GetCertificateCertificatePolicyX509CertificatePropertyOutput
}

type GetCertificateCertificatePolicyX509CertificatePropertyArgs struct {
	// A list of Extended/Enhanced Key Usages.
	ExtendedKeyUsages pulumi.StringArrayInput `pulumi:"extendedKeyUsages"`
	// A list of uses associated with this Key.
	KeyUsages pulumi.StringArrayInput `pulumi:"keyUsages"`
	// The Certificate's Subject.
	Subject pulumi.StringInput `pulumi:"subject"`
	// A `subjectAlternativeNames` block as defined below.
	SubjectAlternativeNames GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayInput `pulumi:"subjectAlternativeNames"`
	// The Certificates Validity Period in Months.
	ValidityInMonths pulumi.IntInput `pulumi:"validityInMonths"`
}

func (GetCertificateCertificatePolicyX509CertificatePropertyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyX509CertificateProperty)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyX509CertificatePropertyArgs) ToGetCertificateCertificatePolicyX509CertificatePropertyOutput() GetCertificateCertificatePolicyX509CertificatePropertyOutput {
	return i.ToGetCertificateCertificatePolicyX509CertificatePropertyOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyX509CertificatePropertyArgs) ToGetCertificateCertificatePolicyX509CertificatePropertyOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyX509CertificatePropertyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyX509CertificatePropertyOutput)
}

// GetCertificateCertificatePolicyX509CertificatePropertyArrayInput is an input type that accepts GetCertificateCertificatePolicyX509CertificatePropertyArray and GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyX509CertificatePropertyArrayInput` via:
//
//	GetCertificateCertificatePolicyX509CertificatePropertyArray{ GetCertificateCertificatePolicyX509CertificatePropertyArgs{...} }
type GetCertificateCertificatePolicyX509CertificatePropertyArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyX509CertificatePropertyArrayOutput() GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput
	ToGetCertificateCertificatePolicyX509CertificatePropertyArrayOutputWithContext(context.Context) GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput
}

type GetCertificateCertificatePolicyX509CertificatePropertyArray []GetCertificateCertificatePolicyX509CertificatePropertyInput

func (GetCertificateCertificatePolicyX509CertificatePropertyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyX509CertificateProperty)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyX509CertificatePropertyArray) ToGetCertificateCertificatePolicyX509CertificatePropertyArrayOutput() GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput {
	return i.ToGetCertificateCertificatePolicyX509CertificatePropertyArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyX509CertificatePropertyArray) ToGetCertificateCertificatePolicyX509CertificatePropertyArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput)
}

type GetCertificateCertificatePolicyX509CertificatePropertyOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyX509CertificatePropertyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyX509CertificateProperty)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyX509CertificatePropertyOutput) ToGetCertificateCertificatePolicyX509CertificatePropertyOutput() GetCertificateCertificatePolicyX509CertificatePropertyOutput {
	return o
}

func (o GetCertificateCertificatePolicyX509CertificatePropertyOutput) ToGetCertificateCertificatePolicyX509CertificatePropertyOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyX509CertificatePropertyOutput {
	return o
}

// A list of Extended/Enhanced Key Usages.
func (o GetCertificateCertificatePolicyX509CertificatePropertyOutput) ExtendedKeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyX509CertificateProperty) []string { return v.ExtendedKeyUsages }).(pulumi.StringArrayOutput)
}

// A list of uses associated with this Key.
func (o GetCertificateCertificatePolicyX509CertificatePropertyOutput) KeyUsages() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyX509CertificateProperty) []string { return v.KeyUsages }).(pulumi.StringArrayOutput)
}

// The Certificate's Subject.
func (o GetCertificateCertificatePolicyX509CertificatePropertyOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyX509CertificateProperty) string { return v.Subject }).(pulumi.StringOutput)
}

// A `subjectAlternativeNames` block as defined below.
func (o GetCertificateCertificatePolicyX509CertificatePropertyOutput) SubjectAlternativeNames() GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyX509CertificateProperty) []GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName {
		return v.SubjectAlternativeNames
	}).(GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput)
}

// The Certificates Validity Period in Months.
func (o GetCertificateCertificatePolicyX509CertificatePropertyOutput) ValidityInMonths() pulumi.IntOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyX509CertificateProperty) int { return v.ValidityInMonths }).(pulumi.IntOutput)
}

type GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyX509CertificateProperty)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput) ToGetCertificateCertificatePolicyX509CertificatePropertyArrayOutput() GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput) ToGetCertificateCertificatePolicyX509CertificatePropertyArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicyX509CertificatePropertyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicyX509CertificateProperty {
		return vs[0].([]GetCertificateCertificatePolicyX509CertificateProperty)[vs[1].(int)]
	}).(GetCertificateCertificatePolicyX509CertificatePropertyOutput)
}

type GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName struct {
	// A list of alternative DNS names (FQDNs) identified by the Certificate.
	DnsNames []string `pulumi:"dnsNames"`
	// A list of email addresses identified by this Certificate.
	Emails []string `pulumi:"emails"`
	// A list of User Principal Names identified by the Certificate.
	Upns []string `pulumi:"upns"`
}

// GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameInput is an input type that accepts GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArgs and GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameInput` via:
//
//	GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArgs{...}
type GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput() GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput
	ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutputWithContext(context.Context) GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput
}

type GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArgs struct {
	// A list of alternative DNS names (FQDNs) identified by the Certificate.
	DnsNames pulumi.StringArrayInput `pulumi:"dnsNames"`
	// A list of email addresses identified by this Certificate.
	Emails pulumi.StringArrayInput `pulumi:"emails"`
	// A list of User Principal Names identified by the Certificate.
	Upns pulumi.StringArrayInput `pulumi:"upns"`
}

func (GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArgs) ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput() GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput {
	return i.ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArgs) ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput)
}

// GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayInput is an input type that accepts GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArray and GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput values.
// You can construct a concrete instance of `GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayInput` via:
//
//	GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArray{ GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArgs{...} }
type GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayInput interface {
	pulumi.Input

	ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput() GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput
	ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutputWithContext(context.Context) GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput
}

type GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArray []GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameInput

func (GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName)(nil)).Elem()
}

func (i GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArray) ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput() GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput {
	return i.ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutputWithContext(context.Background())
}

func (i GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArray) ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput)
}

type GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput) ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput() GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput {
	return o
}

func (o GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput) ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput {
	return o
}

// A list of alternative DNS names (FQDNs) identified by the Certificate.
func (o GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput) DnsNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName) []string {
		return v.DnsNames
	}).(pulumi.StringArrayOutput)
}

// A list of email addresses identified by this Certificate.
func (o GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput) Emails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName) []string {
		return v.Emails
	}).(pulumi.StringArrayOutput)
}

// A list of User Principal Names identified by the Certificate.
func (o GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput) Upns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName) []string {
		return v.Upns
	}).(pulumi.StringArrayOutput)
}

type GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName)(nil)).Elem()
}

func (o GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput) ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput() GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput) ToGetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutputWithContext(ctx context.Context) GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput {
	return o
}

func (o GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput) Index(i pulumi.IntInput) GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName {
		return vs[0].([]GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeName)[vs[1].(int)]
	}).(GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput)
}

type GetCertificateIssuerAdmin struct {
	// E-mail address of the admin.
	EmailAddress string `pulumi:"emailAddress"`
	// First name of the admin.
	FirstName string `pulumi:"firstName"`
	// Last name of the admin.
	LastName string `pulumi:"lastName"`
	// Phone number of the admin.
	Phone string `pulumi:"phone"`
}

// GetCertificateIssuerAdminInput is an input type that accepts GetCertificateIssuerAdminArgs and GetCertificateIssuerAdminOutput values.
// You can construct a concrete instance of `GetCertificateIssuerAdminInput` via:
//
//	GetCertificateIssuerAdminArgs{...}
type GetCertificateIssuerAdminInput interface {
	pulumi.Input

	ToGetCertificateIssuerAdminOutput() GetCertificateIssuerAdminOutput
	ToGetCertificateIssuerAdminOutputWithContext(context.Context) GetCertificateIssuerAdminOutput
}

type GetCertificateIssuerAdminArgs struct {
	// E-mail address of the admin.
	EmailAddress pulumi.StringInput `pulumi:"emailAddress"`
	// First name of the admin.
	FirstName pulumi.StringInput `pulumi:"firstName"`
	// Last name of the admin.
	LastName pulumi.StringInput `pulumi:"lastName"`
	// Phone number of the admin.
	Phone pulumi.StringInput `pulumi:"phone"`
}

func (GetCertificateIssuerAdminArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateIssuerAdmin)(nil)).Elem()
}

func (i GetCertificateIssuerAdminArgs) ToGetCertificateIssuerAdminOutput() GetCertificateIssuerAdminOutput {
	return i.ToGetCertificateIssuerAdminOutputWithContext(context.Background())
}

func (i GetCertificateIssuerAdminArgs) ToGetCertificateIssuerAdminOutputWithContext(ctx context.Context) GetCertificateIssuerAdminOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateIssuerAdminOutput)
}

// GetCertificateIssuerAdminArrayInput is an input type that accepts GetCertificateIssuerAdminArray and GetCertificateIssuerAdminArrayOutput values.
// You can construct a concrete instance of `GetCertificateIssuerAdminArrayInput` via:
//
//	GetCertificateIssuerAdminArray{ GetCertificateIssuerAdminArgs{...} }
type GetCertificateIssuerAdminArrayInput interface {
	pulumi.Input

	ToGetCertificateIssuerAdminArrayOutput() GetCertificateIssuerAdminArrayOutput
	ToGetCertificateIssuerAdminArrayOutputWithContext(context.Context) GetCertificateIssuerAdminArrayOutput
}

type GetCertificateIssuerAdminArray []GetCertificateIssuerAdminInput

func (GetCertificateIssuerAdminArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateIssuerAdmin)(nil)).Elem()
}

func (i GetCertificateIssuerAdminArray) ToGetCertificateIssuerAdminArrayOutput() GetCertificateIssuerAdminArrayOutput {
	return i.ToGetCertificateIssuerAdminArrayOutputWithContext(context.Background())
}

func (i GetCertificateIssuerAdminArray) ToGetCertificateIssuerAdminArrayOutputWithContext(ctx context.Context) GetCertificateIssuerAdminArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificateIssuerAdminArrayOutput)
}

type GetCertificateIssuerAdminOutput struct{ *pulumi.OutputState }

func (GetCertificateIssuerAdminOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificateIssuerAdmin)(nil)).Elem()
}

func (o GetCertificateIssuerAdminOutput) ToGetCertificateIssuerAdminOutput() GetCertificateIssuerAdminOutput {
	return o
}

func (o GetCertificateIssuerAdminOutput) ToGetCertificateIssuerAdminOutputWithContext(ctx context.Context) GetCertificateIssuerAdminOutput {
	return o
}

// E-mail address of the admin.
func (o GetCertificateIssuerAdminOutput) EmailAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateIssuerAdmin) string { return v.EmailAddress }).(pulumi.StringOutput)
}

// First name of the admin.
func (o GetCertificateIssuerAdminOutput) FirstName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateIssuerAdmin) string { return v.FirstName }).(pulumi.StringOutput)
}

// Last name of the admin.
func (o GetCertificateIssuerAdminOutput) LastName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateIssuerAdmin) string { return v.LastName }).(pulumi.StringOutput)
}

// Phone number of the admin.
func (o GetCertificateIssuerAdminOutput) Phone() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificateIssuerAdmin) string { return v.Phone }).(pulumi.StringOutput)
}

type GetCertificateIssuerAdminArrayOutput struct{ *pulumi.OutputState }

func (GetCertificateIssuerAdminArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificateIssuerAdmin)(nil)).Elem()
}

func (o GetCertificateIssuerAdminArrayOutput) ToGetCertificateIssuerAdminArrayOutput() GetCertificateIssuerAdminArrayOutput {
	return o
}

func (o GetCertificateIssuerAdminArrayOutput) ToGetCertificateIssuerAdminArrayOutputWithContext(ctx context.Context) GetCertificateIssuerAdminArrayOutput {
	return o
}

func (o GetCertificateIssuerAdminArrayOutput) Index(i pulumi.IntInput) GetCertificateIssuerAdminOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificateIssuerAdmin {
		return vs[0].([]GetCertificateIssuerAdmin)[vs[1].(int)]
	}).(GetCertificateIssuerAdminOutput)
}

type GetCertificatesCertificate struct {
	// Whether this secret is enabled.
	Enabled bool   `pulumi:"enabled"`
	Id      string `pulumi:"id"`
	// The name of secret.
	Name string `pulumi:"name"`
}

// GetCertificatesCertificateInput is an input type that accepts GetCertificatesCertificateArgs and GetCertificatesCertificateOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateInput` via:
//
//	GetCertificatesCertificateArgs{...}
type GetCertificatesCertificateInput interface {
	pulumi.Input

	ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput
	ToGetCertificatesCertificateOutputWithContext(context.Context) GetCertificatesCertificateOutput
}

type GetCertificatesCertificateArgs struct {
	// Whether this secret is enabled.
	Enabled pulumi.BoolInput   `pulumi:"enabled"`
	Id      pulumi.StringInput `pulumi:"id"`
	// The name of secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetCertificatesCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificate)(nil)).Elem()
}

func (i GetCertificatesCertificateArgs) ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput {
	return i.ToGetCertificatesCertificateOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateArgs) ToGetCertificatesCertificateOutputWithContext(ctx context.Context) GetCertificatesCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateOutput)
}

// GetCertificatesCertificateArrayInput is an input type that accepts GetCertificatesCertificateArray and GetCertificatesCertificateArrayOutput values.
// You can construct a concrete instance of `GetCertificatesCertificateArrayInput` via:
//
//	GetCertificatesCertificateArray{ GetCertificatesCertificateArgs{...} }
type GetCertificatesCertificateArrayInput interface {
	pulumi.Input

	ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput
	ToGetCertificatesCertificateArrayOutputWithContext(context.Context) GetCertificatesCertificateArrayOutput
}

type GetCertificatesCertificateArray []GetCertificatesCertificateInput

func (GetCertificatesCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificate)(nil)).Elem()
}

func (i GetCertificatesCertificateArray) ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput {
	return i.ToGetCertificatesCertificateArrayOutputWithContext(context.Background())
}

func (i GetCertificatesCertificateArray) ToGetCertificatesCertificateArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCertificatesCertificateArrayOutput)
}

type GetCertificatesCertificateOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCertificatesCertificate)(nil)).Elem()
}

func (o GetCertificatesCertificateOutput) ToGetCertificatesCertificateOutput() GetCertificatesCertificateOutput {
	return o
}

func (o GetCertificatesCertificateOutput) ToGetCertificatesCertificateOutputWithContext(ctx context.Context) GetCertificatesCertificateOutput {
	return o
}

// Whether this secret is enabled.
func (o GetCertificatesCertificateOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) bool { return v.Enabled }).(pulumi.BoolOutput)
}

func (o GetCertificatesCertificateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Id }).(pulumi.StringOutput)
}

// The name of secret.
func (o GetCertificatesCertificateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCertificatesCertificate) string { return v.Name }).(pulumi.StringOutput)
}

type GetCertificatesCertificateArrayOutput struct{ *pulumi.OutputState }

func (GetCertificatesCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCertificatesCertificate)(nil)).Elem()
}

func (o GetCertificatesCertificateArrayOutput) ToGetCertificatesCertificateArrayOutput() GetCertificatesCertificateArrayOutput {
	return o
}

func (o GetCertificatesCertificateArrayOutput) ToGetCertificatesCertificateArrayOutputWithContext(ctx context.Context) GetCertificatesCertificateArrayOutput {
	return o
}

func (o GetCertificatesCertificateArrayOutput) Index(i pulumi.IntInput) GetCertificatesCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCertificatesCertificate {
		return vs[0].([]GetCertificatesCertificate)[vs[1].(int)]
	}).(GetCertificatesCertificateOutput)
}

type GetKeyVaultAccessPolicy struct {
	// The Object ID of a Azure Active Directory Application.
	ApplicationId string `pulumi:"applicationId"`
	// A list of certificate permissions applicable to this Access Policy.
	CertificatePermissions []string `pulumi:"certificatePermissions"`
	// A list of key permissions applicable to this Access Policy.
	KeyPermissions []string `pulumi:"keyPermissions"`
	// An Object ID of a User, Service Principal or Security Group.
	ObjectId string `pulumi:"objectId"`
	// A list of secret permissions applicable to this Access Policy.
	SecretPermissions []string `pulumi:"secretPermissions"`
	// A list of storage permissions applicable to this Access Policy.
	StoragePermissions []string `pulumi:"storagePermissions"`
	// The Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
	TenantId string `pulumi:"tenantId"`
}

// GetKeyVaultAccessPolicyInput is an input type that accepts GetKeyVaultAccessPolicyArgs and GetKeyVaultAccessPolicyOutput values.
// You can construct a concrete instance of `GetKeyVaultAccessPolicyInput` via:
//
//	GetKeyVaultAccessPolicyArgs{...}
type GetKeyVaultAccessPolicyInput interface {
	pulumi.Input

	ToGetKeyVaultAccessPolicyOutput() GetKeyVaultAccessPolicyOutput
	ToGetKeyVaultAccessPolicyOutputWithContext(context.Context) GetKeyVaultAccessPolicyOutput
}

type GetKeyVaultAccessPolicyArgs struct {
	// The Object ID of a Azure Active Directory Application.
	ApplicationId pulumi.StringInput `pulumi:"applicationId"`
	// A list of certificate permissions applicable to this Access Policy.
	CertificatePermissions pulumi.StringArrayInput `pulumi:"certificatePermissions"`
	// A list of key permissions applicable to this Access Policy.
	KeyPermissions pulumi.StringArrayInput `pulumi:"keyPermissions"`
	// An Object ID of a User, Service Principal or Security Group.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// A list of secret permissions applicable to this Access Policy.
	SecretPermissions pulumi.StringArrayInput `pulumi:"secretPermissions"`
	// A list of storage permissions applicable to this Access Policy.
	StoragePermissions pulumi.StringArrayInput `pulumi:"storagePermissions"`
	// The Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
	TenantId pulumi.StringInput `pulumi:"tenantId"`
}

func (GetKeyVaultAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyVaultAccessPolicy)(nil)).Elem()
}

func (i GetKeyVaultAccessPolicyArgs) ToGetKeyVaultAccessPolicyOutput() GetKeyVaultAccessPolicyOutput {
	return i.ToGetKeyVaultAccessPolicyOutputWithContext(context.Background())
}

func (i GetKeyVaultAccessPolicyArgs) ToGetKeyVaultAccessPolicyOutputWithContext(ctx context.Context) GetKeyVaultAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyVaultAccessPolicyOutput)
}

// GetKeyVaultAccessPolicyArrayInput is an input type that accepts GetKeyVaultAccessPolicyArray and GetKeyVaultAccessPolicyArrayOutput values.
// You can construct a concrete instance of `GetKeyVaultAccessPolicyArrayInput` via:
//
//	GetKeyVaultAccessPolicyArray{ GetKeyVaultAccessPolicyArgs{...} }
type GetKeyVaultAccessPolicyArrayInput interface {
	pulumi.Input

	ToGetKeyVaultAccessPolicyArrayOutput() GetKeyVaultAccessPolicyArrayOutput
	ToGetKeyVaultAccessPolicyArrayOutputWithContext(context.Context) GetKeyVaultAccessPolicyArrayOutput
}

type GetKeyVaultAccessPolicyArray []GetKeyVaultAccessPolicyInput

func (GetKeyVaultAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyVaultAccessPolicy)(nil)).Elem()
}

func (i GetKeyVaultAccessPolicyArray) ToGetKeyVaultAccessPolicyArrayOutput() GetKeyVaultAccessPolicyArrayOutput {
	return i.ToGetKeyVaultAccessPolicyArrayOutputWithContext(context.Background())
}

func (i GetKeyVaultAccessPolicyArray) ToGetKeyVaultAccessPolicyArrayOutputWithContext(ctx context.Context) GetKeyVaultAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyVaultAccessPolicyArrayOutput)
}

type GetKeyVaultAccessPolicyOutput struct{ *pulumi.OutputState }

func (GetKeyVaultAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyVaultAccessPolicy)(nil)).Elem()
}

func (o GetKeyVaultAccessPolicyOutput) ToGetKeyVaultAccessPolicyOutput() GetKeyVaultAccessPolicyOutput {
	return o
}

func (o GetKeyVaultAccessPolicyOutput) ToGetKeyVaultAccessPolicyOutputWithContext(ctx context.Context) GetKeyVaultAccessPolicyOutput {
	return o
}

// The Object ID of a Azure Active Directory Application.
func (o GetKeyVaultAccessPolicyOutput) ApplicationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyVaultAccessPolicy) string { return v.ApplicationId }).(pulumi.StringOutput)
}

// A list of certificate permissions applicable to this Access Policy.
func (o GetKeyVaultAccessPolicyOutput) CertificatePermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyVaultAccessPolicy) []string { return v.CertificatePermissions }).(pulumi.StringArrayOutput)
}

// A list of key permissions applicable to this Access Policy.
func (o GetKeyVaultAccessPolicyOutput) KeyPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyVaultAccessPolicy) []string { return v.KeyPermissions }).(pulumi.StringArrayOutput)
}

// An Object ID of a User, Service Principal or Security Group.
func (o GetKeyVaultAccessPolicyOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyVaultAccessPolicy) string { return v.ObjectId }).(pulumi.StringOutput)
}

// A list of secret permissions applicable to this Access Policy.
func (o GetKeyVaultAccessPolicyOutput) SecretPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyVaultAccessPolicy) []string { return v.SecretPermissions }).(pulumi.StringArrayOutput)
}

// A list of storage permissions applicable to this Access Policy.
func (o GetKeyVaultAccessPolicyOutput) StoragePermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyVaultAccessPolicy) []string { return v.StoragePermissions }).(pulumi.StringArrayOutput)
}

// The Azure Active Directory Tenant ID used to authenticate requests for this Key Vault.
func (o GetKeyVaultAccessPolicyOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyVaultAccessPolicy) string { return v.TenantId }).(pulumi.StringOutput)
}

type GetKeyVaultAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetKeyVaultAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyVaultAccessPolicy)(nil)).Elem()
}

func (o GetKeyVaultAccessPolicyArrayOutput) ToGetKeyVaultAccessPolicyArrayOutput() GetKeyVaultAccessPolicyArrayOutput {
	return o
}

func (o GetKeyVaultAccessPolicyArrayOutput) ToGetKeyVaultAccessPolicyArrayOutputWithContext(ctx context.Context) GetKeyVaultAccessPolicyArrayOutput {
	return o
}

func (o GetKeyVaultAccessPolicyArrayOutput) Index(i pulumi.IntInput) GetKeyVaultAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeyVaultAccessPolicy {
		return vs[0].([]GetKeyVaultAccessPolicy)[vs[1].(int)]
	}).(GetKeyVaultAccessPolicyOutput)
}

type GetKeyVaultNetworkAcl struct {
	Bypass                  string   `pulumi:"bypass"`
	DefaultAction           string   `pulumi:"defaultAction"`
	IpRules                 []string `pulumi:"ipRules"`
	VirtualNetworkSubnetIds []string `pulumi:"virtualNetworkSubnetIds"`
}

// GetKeyVaultNetworkAclInput is an input type that accepts GetKeyVaultNetworkAclArgs and GetKeyVaultNetworkAclOutput values.
// You can construct a concrete instance of `GetKeyVaultNetworkAclInput` via:
//
//	GetKeyVaultNetworkAclArgs{...}
type GetKeyVaultNetworkAclInput interface {
	pulumi.Input

	ToGetKeyVaultNetworkAclOutput() GetKeyVaultNetworkAclOutput
	ToGetKeyVaultNetworkAclOutputWithContext(context.Context) GetKeyVaultNetworkAclOutput
}

type GetKeyVaultNetworkAclArgs struct {
	Bypass                  pulumi.StringInput      `pulumi:"bypass"`
	DefaultAction           pulumi.StringInput      `pulumi:"defaultAction"`
	IpRules                 pulumi.StringArrayInput `pulumi:"ipRules"`
	VirtualNetworkSubnetIds pulumi.StringArrayInput `pulumi:"virtualNetworkSubnetIds"`
}

func (GetKeyVaultNetworkAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyVaultNetworkAcl)(nil)).Elem()
}

func (i GetKeyVaultNetworkAclArgs) ToGetKeyVaultNetworkAclOutput() GetKeyVaultNetworkAclOutput {
	return i.ToGetKeyVaultNetworkAclOutputWithContext(context.Background())
}

func (i GetKeyVaultNetworkAclArgs) ToGetKeyVaultNetworkAclOutputWithContext(ctx context.Context) GetKeyVaultNetworkAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyVaultNetworkAclOutput)
}

// GetKeyVaultNetworkAclArrayInput is an input type that accepts GetKeyVaultNetworkAclArray and GetKeyVaultNetworkAclArrayOutput values.
// You can construct a concrete instance of `GetKeyVaultNetworkAclArrayInput` via:
//
//	GetKeyVaultNetworkAclArray{ GetKeyVaultNetworkAclArgs{...} }
type GetKeyVaultNetworkAclArrayInput interface {
	pulumi.Input

	ToGetKeyVaultNetworkAclArrayOutput() GetKeyVaultNetworkAclArrayOutput
	ToGetKeyVaultNetworkAclArrayOutputWithContext(context.Context) GetKeyVaultNetworkAclArrayOutput
}

type GetKeyVaultNetworkAclArray []GetKeyVaultNetworkAclInput

func (GetKeyVaultNetworkAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyVaultNetworkAcl)(nil)).Elem()
}

func (i GetKeyVaultNetworkAclArray) ToGetKeyVaultNetworkAclArrayOutput() GetKeyVaultNetworkAclArrayOutput {
	return i.ToGetKeyVaultNetworkAclArrayOutputWithContext(context.Background())
}

func (i GetKeyVaultNetworkAclArray) ToGetKeyVaultNetworkAclArrayOutputWithContext(ctx context.Context) GetKeyVaultNetworkAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyVaultNetworkAclArrayOutput)
}

type GetKeyVaultNetworkAclOutput struct{ *pulumi.OutputState }

func (GetKeyVaultNetworkAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyVaultNetworkAcl)(nil)).Elem()
}

func (o GetKeyVaultNetworkAclOutput) ToGetKeyVaultNetworkAclOutput() GetKeyVaultNetworkAclOutput {
	return o
}

func (o GetKeyVaultNetworkAclOutput) ToGetKeyVaultNetworkAclOutputWithContext(ctx context.Context) GetKeyVaultNetworkAclOutput {
	return o
}

func (o GetKeyVaultNetworkAclOutput) Bypass() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyVaultNetworkAcl) string { return v.Bypass }).(pulumi.StringOutput)
}

func (o GetKeyVaultNetworkAclOutput) DefaultAction() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyVaultNetworkAcl) string { return v.DefaultAction }).(pulumi.StringOutput)
}

func (o GetKeyVaultNetworkAclOutput) IpRules() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyVaultNetworkAcl) []string { return v.IpRules }).(pulumi.StringArrayOutput)
}

func (o GetKeyVaultNetworkAclOutput) VirtualNetworkSubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyVaultNetworkAcl) []string { return v.VirtualNetworkSubnetIds }).(pulumi.StringArrayOutput)
}

type GetKeyVaultNetworkAclArrayOutput struct{ *pulumi.OutputState }

func (GetKeyVaultNetworkAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyVaultNetworkAcl)(nil)).Elem()
}

func (o GetKeyVaultNetworkAclArrayOutput) ToGetKeyVaultNetworkAclArrayOutput() GetKeyVaultNetworkAclArrayOutput {
	return o
}

func (o GetKeyVaultNetworkAclArrayOutput) ToGetKeyVaultNetworkAclArrayOutputWithContext(ctx context.Context) GetKeyVaultNetworkAclArrayOutput {
	return o
}

func (o GetKeyVaultNetworkAclArrayOutput) Index(i pulumi.IntInput) GetKeyVaultNetworkAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeyVaultNetworkAcl {
		return vs[0].([]GetKeyVaultNetworkAcl)[vs[1].(int)]
	}).(GetKeyVaultNetworkAclOutput)
}

type GetManagedHardwareSecurityModuleRoleDefinitionPermission struct {
	// A list of action permission granted.
	Actions []string `pulumi:"actions"`
	// A list of data action permission granted.
	DataActions []string `pulumi:"dataActions"`
	// A list of action permission excluded (but not denied).
	NotActions []string `pulumi:"notActions"`
	// (Optional) A list of data action permission granted.
	NotDataActions []string `pulumi:"notDataActions"`
}

// GetManagedHardwareSecurityModuleRoleDefinitionPermissionInput is an input type that accepts GetManagedHardwareSecurityModuleRoleDefinitionPermissionArgs and GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput values.
// You can construct a concrete instance of `GetManagedHardwareSecurityModuleRoleDefinitionPermissionInput` via:
//
//	GetManagedHardwareSecurityModuleRoleDefinitionPermissionArgs{...}
type GetManagedHardwareSecurityModuleRoleDefinitionPermissionInput interface {
	pulumi.Input

	ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput() GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput
	ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionOutputWithContext(context.Context) GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput
}

type GetManagedHardwareSecurityModuleRoleDefinitionPermissionArgs struct {
	// A list of action permission granted.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// A list of data action permission granted.
	DataActions pulumi.StringArrayInput `pulumi:"dataActions"`
	// A list of action permission excluded (but not denied).
	NotActions pulumi.StringArrayInput `pulumi:"notActions"`
	// (Optional) A list of data action permission granted.
	NotDataActions pulumi.StringArrayInput `pulumi:"notDataActions"`
}

func (GetManagedHardwareSecurityModuleRoleDefinitionPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedHardwareSecurityModuleRoleDefinitionPermission)(nil)).Elem()
}

func (i GetManagedHardwareSecurityModuleRoleDefinitionPermissionArgs) ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput() GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return i.ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionOutputWithContext(context.Background())
}

func (i GetManagedHardwareSecurityModuleRoleDefinitionPermissionArgs) ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionOutputWithContext(ctx context.Context) GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput)
}

// GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayInput is an input type that accepts GetManagedHardwareSecurityModuleRoleDefinitionPermissionArray and GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput values.
// You can construct a concrete instance of `GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayInput` via:
//
//	GetManagedHardwareSecurityModuleRoleDefinitionPermissionArray{ GetManagedHardwareSecurityModuleRoleDefinitionPermissionArgs{...} }
type GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayInput interface {
	pulumi.Input

	ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput() GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput
	ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutputWithContext(context.Context) GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput
}

type GetManagedHardwareSecurityModuleRoleDefinitionPermissionArray []GetManagedHardwareSecurityModuleRoleDefinitionPermissionInput

func (GetManagedHardwareSecurityModuleRoleDefinitionPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetManagedHardwareSecurityModuleRoleDefinitionPermission)(nil)).Elem()
}

func (i GetManagedHardwareSecurityModuleRoleDefinitionPermissionArray) ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput() GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput {
	return i.ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutputWithContext(context.Background())
}

func (i GetManagedHardwareSecurityModuleRoleDefinitionPermissionArray) ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutputWithContext(ctx context.Context) GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput)
}

type GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput struct{ *pulumi.OutputState }

func (GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetManagedHardwareSecurityModuleRoleDefinitionPermission)(nil)).Elem()
}

func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput() GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return o
}

func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionOutputWithContext(ctx context.Context) GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return o
}

// A list of action permission granted.
func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetManagedHardwareSecurityModuleRoleDefinitionPermission) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// A list of data action permission granted.
func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) DataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetManagedHardwareSecurityModuleRoleDefinitionPermission) []string { return v.DataActions }).(pulumi.StringArrayOutput)
}

// A list of action permission excluded (but not denied).
func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) NotActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetManagedHardwareSecurityModuleRoleDefinitionPermission) []string { return v.NotActions }).(pulumi.StringArrayOutput)
}

// (Optional) A list of data action permission granted.
func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput) NotDataActions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetManagedHardwareSecurityModuleRoleDefinitionPermission) []string { return v.NotDataActions }).(pulumi.StringArrayOutput)
}

type GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetManagedHardwareSecurityModuleRoleDefinitionPermission)(nil)).Elem()
}

func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput) ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput() GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput {
	return o
}

func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput) ToGetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutputWithContext(ctx context.Context) GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput {
	return o
}

func (o GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput) Index(i pulumi.IntInput) GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetManagedHardwareSecurityModuleRoleDefinitionPermission {
		return vs[0].([]GetManagedHardwareSecurityModuleRoleDefinitionPermission)[vs[1].(int)]
	}).(GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput)
}

type GetSecretsSecret struct {
	// Whether this secret is enabled.
	Enabled bool `pulumi:"enabled"`
	// The ID of this secret.
	Id string `pulumi:"id"`
	// The name of secret.
	Name string `pulumi:"name"`
}

// GetSecretsSecretInput is an input type that accepts GetSecretsSecretArgs and GetSecretsSecretOutput values.
// You can construct a concrete instance of `GetSecretsSecretInput` via:
//
//	GetSecretsSecretArgs{...}
type GetSecretsSecretInput interface {
	pulumi.Input

	ToGetSecretsSecretOutput() GetSecretsSecretOutput
	ToGetSecretsSecretOutputWithContext(context.Context) GetSecretsSecretOutput
}

type GetSecretsSecretArgs struct {
	// Whether this secret is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The ID of this secret.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of secret.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsSecret)(nil)).Elem()
}

func (i GetSecretsSecretArgs) ToGetSecretsSecretOutput() GetSecretsSecretOutput {
	return i.ToGetSecretsSecretOutputWithContext(context.Background())
}

func (i GetSecretsSecretArgs) ToGetSecretsSecretOutputWithContext(ctx context.Context) GetSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsSecretOutput)
}

// GetSecretsSecretArrayInput is an input type that accepts GetSecretsSecretArray and GetSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetSecretsSecretArrayInput` via:
//
//	GetSecretsSecretArray{ GetSecretsSecretArgs{...} }
type GetSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput
	ToGetSecretsSecretArrayOutputWithContext(context.Context) GetSecretsSecretArrayOutput
}

type GetSecretsSecretArray []GetSecretsSecretInput

func (GetSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretsSecret)(nil)).Elem()
}

func (i GetSecretsSecretArray) ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput {
	return i.ToGetSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetSecretsSecretArray) ToGetSecretsSecretArrayOutputWithContext(ctx context.Context) GetSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsSecretArrayOutput)
}

type GetSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsSecret)(nil)).Elem()
}

func (o GetSecretsSecretOutput) ToGetSecretsSecretOutput() GetSecretsSecretOutput {
	return o
}

func (o GetSecretsSecretOutput) ToGetSecretsSecretOutputWithContext(ctx context.Context) GetSecretsSecretOutput {
	return o
}

// Whether this secret is enabled.
func (o GetSecretsSecretOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecretsSecret) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of this secret.
func (o GetSecretsSecretOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.Id }).(pulumi.StringOutput)
}

// The name of secret.
func (o GetSecretsSecretOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.Name }).(pulumi.StringOutput)
}

type GetSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretsSecret)(nil)).Elem()
}

func (o GetSecretsSecretArrayOutput) ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput {
	return o
}

func (o GetSecretsSecretArrayOutput) ToGetSecretsSecretArrayOutputWithContext(ctx context.Context) GetSecretsSecretArrayOutput {
	return o
}

func (o GetSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretsSecret {
		return vs[0].([]GetSecretsSecret)[vs[1].(int)]
	}).(GetSecretsSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificateInput)(nil)).Elem(), CertifiateCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePtrInput)(nil)).Elem(), CertifiateCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificateAttributeInput)(nil)).Elem(), CertifiateCertificateAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificateAttributeArrayInput)(nil)).Elem(), CertifiateCertificateAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyInput)(nil)).Elem(), CertifiateCertificatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyPtrInput)(nil)).Elem(), CertifiateCertificatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyIssuerParametersInput)(nil)).Elem(), CertifiateCertificatePolicyIssuerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyIssuerParametersPtrInput)(nil)).Elem(), CertifiateCertificatePolicyIssuerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyKeyPropertiesInput)(nil)).Elem(), CertifiateCertificatePolicyKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyKeyPropertiesPtrInput)(nil)).Elem(), CertifiateCertificatePolicyKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyLifetimeActionInput)(nil)).Elem(), CertifiateCertificatePolicyLifetimeActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyLifetimeActionArrayInput)(nil)).Elem(), CertifiateCertificatePolicyLifetimeActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyLifetimeActionActionInput)(nil)).Elem(), CertifiateCertificatePolicyLifetimeActionActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyLifetimeActionTriggerInput)(nil)).Elem(), CertifiateCertificatePolicyLifetimeActionTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicySecretPropertiesInput)(nil)).Elem(), CertifiateCertificatePolicySecretPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicySecretPropertiesPtrInput)(nil)).Elem(), CertifiateCertificatePolicySecretPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyX509CertificatePropertiesInput)(nil)).Elem(), CertifiateCertificatePolicyX509CertificatePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyX509CertificatePropertiesPtrInput)(nil)).Elem(), CertifiateCertificatePolicyX509CertificatePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesInput)(nil)).Elem(), CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput)(nil)).Elem(), CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificateInput)(nil)).Elem(), CertificateCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePtrInput)(nil)).Elem(), CertificateCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificateAttributeInput)(nil)).Elem(), CertificateCertificateAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificateAttributeArrayInput)(nil)).Elem(), CertificateCertificateAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyInput)(nil)).Elem(), CertificateCertificatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyPtrInput)(nil)).Elem(), CertificateCertificatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyIssuerParametersInput)(nil)).Elem(), CertificateCertificatePolicyIssuerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyIssuerParametersPtrInput)(nil)).Elem(), CertificateCertificatePolicyIssuerParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyKeyPropertiesInput)(nil)).Elem(), CertificateCertificatePolicyKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyKeyPropertiesPtrInput)(nil)).Elem(), CertificateCertificatePolicyKeyPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyLifetimeActionInput)(nil)).Elem(), CertificateCertificatePolicyLifetimeActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyLifetimeActionArrayInput)(nil)).Elem(), CertificateCertificatePolicyLifetimeActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyLifetimeActionActionInput)(nil)).Elem(), CertificateCertificatePolicyLifetimeActionActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyLifetimeActionTriggerInput)(nil)).Elem(), CertificateCertificatePolicyLifetimeActionTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicySecretPropertiesInput)(nil)).Elem(), CertificateCertificatePolicySecretPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicySecretPropertiesPtrInput)(nil)).Elem(), CertificateCertificatePolicySecretPropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyX509CertificatePropertiesInput)(nil)).Elem(), CertificateCertificatePolicyX509CertificatePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyX509CertificatePropertiesPtrInput)(nil)).Elem(), CertificateCertificatePolicyX509CertificatePropertiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesInput)(nil)).Elem(), CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrInput)(nil)).Elem(), CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateContactsContactInput)(nil)).Elem(), CertificateContactsContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateContactsContactArrayInput)(nil)).Elem(), CertificateContactsContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuerAdminInput)(nil)).Elem(), CertificateIssuerAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateIssuerAdminArrayInput)(nil)).Elem(), CertificateIssuerAdminArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRotationPolicyInput)(nil)).Elem(), KeyRotationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRotationPolicyPtrInput)(nil)).Elem(), KeyRotationPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRotationPolicyAutomaticInput)(nil)).Elem(), KeyRotationPolicyAutomaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyRotationPolicyAutomaticPtrInput)(nil)).Elem(), KeyRotationPolicyAutomaticArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultAccessPolicyInput)(nil)).Elem(), KeyVaultAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultAccessPolicyArrayInput)(nil)).Elem(), KeyVaultAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultContactInput)(nil)).Elem(), KeyVaultContactArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultContactArrayInput)(nil)).Elem(), KeyVaultContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultNetworkAclsInput)(nil)).Elem(), KeyVaultNetworkAclsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyVaultNetworkAclsPtrInput)(nil)).Elem(), KeyVaultNetworkAclsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleNetworkAclsInput)(nil)).Elem(), ManagedHardwareSecurityModuleNetworkAclsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleNetworkAclsPtrInput)(nil)).Elem(), ManagedHardwareSecurityModuleNetworkAclsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleRoleDefinitionPermissionInput)(nil)).Elem(), ManagedHardwareSecurityModuleRoleDefinitionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayInput)(nil)).Elem(), ManagedHardwareSecurityModuleRoleDefinitionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyInput)(nil)).Elem(), GetCertificateCertificatePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyArrayInput)(nil)).Elem(), GetCertificateCertificatePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyIssuerParameterInput)(nil)).Elem(), GetCertificateCertificatePolicyIssuerParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyIssuerParameterArrayInput)(nil)).Elem(), GetCertificateCertificatePolicyIssuerParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyKeyPropertyInput)(nil)).Elem(), GetCertificateCertificatePolicyKeyPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyKeyPropertyArrayInput)(nil)).Elem(), GetCertificateCertificatePolicyKeyPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionInput)(nil)).Elem(), GetCertificateCertificatePolicyLifetimeActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionArrayInput)(nil)).Elem(), GetCertificateCertificatePolicyLifetimeActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionActionInput)(nil)).Elem(), GetCertificateCertificatePolicyLifetimeActionActionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionActionArrayInput)(nil)).Elem(), GetCertificateCertificatePolicyLifetimeActionActionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionTriggerInput)(nil)).Elem(), GetCertificateCertificatePolicyLifetimeActionTriggerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyLifetimeActionTriggerArrayInput)(nil)).Elem(), GetCertificateCertificatePolicyLifetimeActionTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicySecretPropertyInput)(nil)).Elem(), GetCertificateCertificatePolicySecretPropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicySecretPropertyArrayInput)(nil)).Elem(), GetCertificateCertificatePolicySecretPropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyX509CertificatePropertyInput)(nil)).Elem(), GetCertificateCertificatePolicyX509CertificatePropertyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyX509CertificatePropertyArrayInput)(nil)).Elem(), GetCertificateCertificatePolicyX509CertificatePropertyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameInput)(nil)).Elem(), GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayInput)(nil)).Elem(), GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateIssuerAdminInput)(nil)).Elem(), GetCertificateIssuerAdminArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificateIssuerAdminArrayInput)(nil)).Elem(), GetCertificateIssuerAdminArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateInput)(nil)).Elem(), GetCertificatesCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCertificatesCertificateArrayInput)(nil)).Elem(), GetCertificatesCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyVaultAccessPolicyInput)(nil)).Elem(), GetKeyVaultAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyVaultAccessPolicyArrayInput)(nil)).Elem(), GetKeyVaultAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyVaultNetworkAclInput)(nil)).Elem(), GetKeyVaultNetworkAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyVaultNetworkAclArrayInput)(nil)).Elem(), GetKeyVaultNetworkAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetManagedHardwareSecurityModuleRoleDefinitionPermissionInput)(nil)).Elem(), GetManagedHardwareSecurityModuleRoleDefinitionPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayInput)(nil)).Elem(), GetManagedHardwareSecurityModuleRoleDefinitionPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretsSecretInput)(nil)).Elem(), GetSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretsSecretArrayInput)(nil)).Elem(), GetSecretsSecretArray{})
	pulumi.RegisterOutputType(CertifiateCertificateOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePtrOutput{})
	pulumi.RegisterOutputType(CertifiateCertificateAttributeOutput{})
	pulumi.RegisterOutputType(CertifiateCertificateAttributeArrayOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyPtrOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyIssuerParametersOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyIssuerParametersPtrOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyKeyPropertiesOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyKeyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyLifetimeActionOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyLifetimeActionArrayOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyLifetimeActionActionOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyLifetimeActionTriggerOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicySecretPropertiesOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicySecretPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyX509CertificatePropertiesOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyX509CertificatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput{})
	pulumi.RegisterOutputType(CertifiateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput{})
	pulumi.RegisterOutputType(CertificateCertificateOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePtrOutput{})
	pulumi.RegisterOutputType(CertificateCertificateAttributeOutput{})
	pulumi.RegisterOutputType(CertificateCertificateAttributeArrayOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyPtrOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyIssuerParametersOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyIssuerParametersPtrOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyKeyPropertiesOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyKeyPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyLifetimeActionOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyLifetimeActionArrayOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyLifetimeActionActionOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyLifetimeActionTriggerOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicySecretPropertiesOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicySecretPropertiesPtrOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyX509CertificatePropertiesOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyX509CertificatePropertiesPtrOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesOutput{})
	pulumi.RegisterOutputType(CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesPtrOutput{})
	pulumi.RegisterOutputType(CertificateContactsContactOutput{})
	pulumi.RegisterOutputType(CertificateContactsContactArrayOutput{})
	pulumi.RegisterOutputType(CertificateIssuerAdminOutput{})
	pulumi.RegisterOutputType(CertificateIssuerAdminArrayOutput{})
	pulumi.RegisterOutputType(KeyRotationPolicyOutput{})
	pulumi.RegisterOutputType(KeyRotationPolicyPtrOutput{})
	pulumi.RegisterOutputType(KeyRotationPolicyAutomaticOutput{})
	pulumi.RegisterOutputType(KeyRotationPolicyAutomaticPtrOutput{})
	pulumi.RegisterOutputType(KeyVaultAccessPolicyOutput{})
	pulumi.RegisterOutputType(KeyVaultAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultContactOutput{})
	pulumi.RegisterOutputType(KeyVaultContactArrayOutput{})
	pulumi.RegisterOutputType(KeyVaultNetworkAclsOutput{})
	pulumi.RegisterOutputType(KeyVaultNetworkAclsPtrOutput{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleNetworkAclsOutput{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleNetworkAclsPtrOutput{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleRoleDefinitionPermissionOutput{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyIssuerParameterOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyIssuerParameterArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyKeyPropertyOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyKeyPropertyArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyLifetimeActionOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyLifetimeActionArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyLifetimeActionActionOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyLifetimeActionActionArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyLifetimeActionTriggerOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyLifetimeActionTriggerArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicySecretPropertyOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicySecretPropertyArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyX509CertificatePropertyOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyX509CertificatePropertyArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameOutput{})
	pulumi.RegisterOutputType(GetCertificateCertificatePolicyX509CertificatePropertySubjectAlternativeNameArrayOutput{})
	pulumi.RegisterOutputType(GetCertificateIssuerAdminOutput{})
	pulumi.RegisterOutputType(GetCertificateIssuerAdminArrayOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateOutput{})
	pulumi.RegisterOutputType(GetCertificatesCertificateArrayOutput{})
	pulumi.RegisterOutputType(GetKeyVaultAccessPolicyOutput{})
	pulumi.RegisterOutputType(GetKeyVaultAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetKeyVaultNetworkAclOutput{})
	pulumi.RegisterOutputType(GetKeyVaultNetworkAclArrayOutput{})
	pulumi.RegisterOutputType(GetManagedHardwareSecurityModuleRoleDefinitionPermissionOutput{})
	pulumi.RegisterOutputType(GetManagedHardwareSecurityModuleRoleDefinitionPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretArrayOutput{})
}
