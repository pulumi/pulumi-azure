// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about the permissions from the Management Key Vault Templates.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/keyvault"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		contributor, err := keyvault.LookupAccessPolicy(ctx, &keyvault.LookupAccessPolicyArgs{
// 			Name: "Key Management",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("accessPolicyKeyPermissions", contributor.KeyPermissions)
// 		return nil
// 	})
// }
// ```
func LookupAccessPolicy(ctx *pulumi.Context, args *LookupAccessPolicyArgs, opts ...pulumi.InvokeOption) (*LookupAccessPolicyResult, error) {
	var rv LookupAccessPolicyResult
	err := ctx.Invoke("azure:keyvault/getAccessPolicy:getAccessPolicy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccessPolicy.
type LookupAccessPolicyArgs struct {
	// Specifies the name of the Management Template. Possible values are: `Key Management`,
	// `Secret Management`, `Certificate Management`, `Key & Secret Management`, `Key & Certificate Management`,
	// `Secret & Certificate Management`,  `Key, Secret, & Certificate Management`
	Name string `pulumi:"name"`
}

// A collection of values returned by getAccessPolicy.
type LookupAccessPolicyResult struct {
	// the certificate permissions for the access policy
	CertificatePermissions []string `pulumi:"certificatePermissions"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// the key permissions for the access policy
	KeyPermissions []string `pulumi:"keyPermissions"`
	Name           string   `pulumi:"name"`
	// the secret permissions for the access policy
	SecretPermissions []string `pulumi:"secretPermissions"`
}

func LookupAccessPolicyOutput(ctx *pulumi.Context, args LookupAccessPolicyOutputArgs, opts ...pulumi.InvokeOption) LookupAccessPolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAccessPolicyResult, error) {
			args := v.(LookupAccessPolicyArgs)
			r, err := LookupAccessPolicy(ctx, &args, opts...)
			return *r, err
		}).(LookupAccessPolicyResultOutput)
}

// A collection of arguments for invoking getAccessPolicy.
type LookupAccessPolicyOutputArgs struct {
	// Specifies the name of the Management Template. Possible values are: `Key Management`,
	// `Secret Management`, `Certificate Management`, `Key & Secret Management`, `Key & Certificate Management`,
	// `Secret & Certificate Management`,  `Key, Secret, & Certificate Management`
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupAccessPolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessPolicyArgs)(nil)).Elem()
}

// A collection of values returned by getAccessPolicy.
type LookupAccessPolicyResultOutput struct{ *pulumi.OutputState }

func (LookupAccessPolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAccessPolicyResult)(nil)).Elem()
}

func (o LookupAccessPolicyResultOutput) ToLookupAccessPolicyResultOutput() LookupAccessPolicyResultOutput {
	return o
}

func (o LookupAccessPolicyResultOutput) ToLookupAccessPolicyResultOutputWithContext(ctx context.Context) LookupAccessPolicyResultOutput {
	return o
}

// the certificate permissions for the access policy
func (o LookupAccessPolicyResultOutput) CertificatePermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAccessPolicyResult) []string { return v.CertificatePermissions }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAccessPolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

// the key permissions for the access policy
func (o LookupAccessPolicyResultOutput) KeyPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAccessPolicyResult) []string { return v.KeyPermissions }).(pulumi.StringArrayOutput)
}

func (o LookupAccessPolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAccessPolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

// the secret permissions for the access policy
func (o LookupAccessPolicyResultOutput) SecretPermissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupAccessPolicyResult) []string { return v.SecretPermissions }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAccessPolicyResultOutput{})
}
