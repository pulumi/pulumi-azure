// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Key Vault Certificate.
//
// <<<<<<< HEAD
// > **Note:** The Azure Provider includes a Feature Toggle which will purge a Key Vault Certificate resource on destroy, rather than the default soft-delete. See `purgeSoftDeletedCertificatesOnDestroy` for more information.
//
// =======
// > > > > > > > 8d78c87098 (Update-documentation)
// ## Example Usage
// ### Importing A PFX)
//
// > **Note:** this example assumed the PFX file is located in the same directory at `certificate-to-import.pfx`.
//
// ```go
// package main
//
// import (
//
//	"encoding/base64"
//	"os"
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func filebase64OrPanic(path string) string {
//		if fileData, err := os.ReadFile(path); err == nil {
//			return base64.StdEncoding.EncodeToString(fileData[:])
//		} else {
//			panic(err.Error())
//		}
//	}
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				TenantId:          *pulumi.String(current.TenantId),
//				SkuName:           pulumi.String("premium"),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(current.ObjectId),
//						CertificatePermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Delete"),
//							pulumi.String("DeleteIssuers"),
//							pulumi.String("Get"),
//							pulumi.String("GetIssuers"),
//							pulumi.String("Import"),
//							pulumi.String("List"),
//							pulumi.String("ListIssuers"),
//							pulumi.String("ManageContacts"),
//							pulumi.String("ManageIssuers"),
//							pulumi.String("SetIssuers"),
//							pulumi.String("Update"),
//						},
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Backup"),
//							pulumi.String("Create"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Delete"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Get"),
//							pulumi.String("Import"),
//							pulumi.String("List"),
//							pulumi.String("Purge"),
//							pulumi.String("Recover"),
//							pulumi.String("Restore"),
//							pulumi.String("Sign"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("Update"),
//							pulumi.String("Verify"),
//							pulumi.String("WrapKey"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Backup"),
//							pulumi.String("Delete"),
//							pulumi.String("Get"),
//							pulumi.String("List"),
//							pulumi.String("Purge"),
//							pulumi.String("Recover"),
//							pulumi.String("Restore"),
//							pulumi.String("Set"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewCertificate(ctx, "exampleCertificate", &keyvault.CertificateArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				Certificate: &keyvault.CertificateCertificateArgs{
//					Contents: filebase64OrPanic("certificate-to-import.pfx"),
//					Password: pulumi.String(""),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Generating a new certificate
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				TenantId:                *pulumi.String(current.TenantId),
//				SkuName:                 pulumi.String("standard"),
//				SoftDeleteRetentionDays: pulumi.Int(7),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId: *pulumi.String(current.TenantId),
//						ObjectId: *pulumi.String(current.ObjectId),
//						CertificatePermissions: pulumi.StringArray{
//							pulumi.String("Create"),
//							pulumi.String("Delete"),
//							pulumi.String("DeleteIssuers"),
//							pulumi.String("Get"),
//							pulumi.String("GetIssuers"),
//							pulumi.String("Import"),
//							pulumi.String("List"),
//							pulumi.String("ListIssuers"),
//							pulumi.String("ManageContacts"),
//							pulumi.String("ManageIssuers"),
//							pulumi.String("Purge"),
//							pulumi.String("SetIssuers"),
//							pulumi.String("Update"),
//						},
//						KeyPermissions: pulumi.StringArray{
//							pulumi.String("Backup"),
//							pulumi.String("Create"),
//							pulumi.String("Decrypt"),
//							pulumi.String("Delete"),
//							pulumi.String("Encrypt"),
//							pulumi.String("Get"),
//							pulumi.String("Import"),
//							pulumi.String("List"),
//							pulumi.String("Purge"),
//							pulumi.String("Recover"),
//							pulumi.String("Restore"),
//							pulumi.String("Sign"),
//							pulumi.String("UnwrapKey"),
//							pulumi.String("Update"),
//							pulumi.String("Verify"),
//							pulumi.String("WrapKey"),
//						},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Backup"),
//							pulumi.String("Delete"),
//							pulumi.String("Get"),
//							pulumi.String("List"),
//							pulumi.String("Purge"),
//							pulumi.String("Recover"),
//							pulumi.String("Restore"),
//							pulumi.String("Set"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewCertificate(ctx, "exampleCertificate", &keyvault.CertificateArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				CertificatePolicy: &keyvault.CertificateCertificatePolicyArgs{
//					IssuerParameters: &keyvault.CertificateCertificatePolicyIssuerParametersArgs{
//						Name: pulumi.String("Self"),
//					},
//					KeyProperties: &keyvault.CertificateCertificatePolicyKeyPropertiesArgs{
//						Exportable: pulumi.Bool(true),
//						KeySize:    pulumi.Int(2048),
//						KeyType:    pulumi.String("RSA"),
//						ReuseKey:   pulumi.Bool(true),
//					},
//					LifetimeActions: keyvault.CertificateCertificatePolicyLifetimeActionArray{
//						&keyvault.CertificateCertificatePolicyLifetimeActionArgs{
//							Action: &keyvault.CertificateCertificatePolicyLifetimeActionActionArgs{
//								ActionType: pulumi.String("AutoRenew"),
//							},
//							Trigger: &keyvault.CertificateCertificatePolicyLifetimeActionTriggerArgs{
//								DaysBeforeExpiry: pulumi.Int(30),
//							},
//						},
//					},
//					SecretProperties: &keyvault.CertificateCertificatePolicySecretPropertiesArgs{
//						ContentType: pulumi.String("application/x-pkcs12"),
//					},
//					X509CertificateProperties: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesArgs{
//						ExtendedKeyUsages: pulumi.StringArray{
//							pulumi.String("1.3.6.1.5.5.7.3.1"),
//						},
//						KeyUsages: pulumi.StringArray{
//							pulumi.String("cRLSign"),
//							pulumi.String("dataEncipherment"),
//							pulumi.String("digitalSignature"),
//							pulumi.String("keyAgreement"),
//							pulumi.String("keyCertSign"),
//							pulumi.String("keyEncipherment"),
//						},
//						SubjectAlternativeNames: &keyvault.CertificateCertificatePolicyX509CertificatePropertiesSubjectAlternativeNamesArgs{
//							DnsNames: pulumi.StringArray{
//								pulumi.String("internal.contoso.com"),
//								pulumi.String("domain.hello.world"),
//							},
//						},
//						Subject:          pulumi.String("CN=hello-world"),
//						ValidityInMonths: pulumi.Int(12),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Key Vault Certificates can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:keyvault/certifiate:Certifiate example "https://example-keyvault.vault.azure.net/certificates/example/fdf067c93bbb4b22bff4d8b7a9a56217"
//
// ```
//
// Deprecated: azure.keyvault.Certifiate has been deprecated in favor of azure.keyvault.Certificate
type Certifiate struct {
	pulumi.CustomResourceState

	// A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
	Certificate CertifiateCertificatePtrOutput `pulumi:"certificate"`
	// A `certificateAttribute` block as defined below.
	CertificateAttributes CertifiateCertificateAttributeArrayOutput `pulumi:"certificateAttributes"`
	// The raw Key Vault Certificate data represented as a hexadecimal string.
	CertificateData pulumi.StringOutput `pulumi:"certificateData"`
	// The Base64 encoded Key Vault Certificate data.
	CertificateDataBase64 pulumi.StringOutput `pulumi:"certificateDataBase64"`
	// A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
	//
	// > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
	CertificatePolicy CertifiateCertificatePolicyOutput `pulumi:"certificatePolicy"`
	// The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`
	// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
	ResourceManagerId pulumi.StringOutput `pulumi:"resourceManagerId"`
	// The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
	ResourceManagerVersionlessId pulumi.StringOutput `pulumi:"resourceManagerVersionlessId"`
	// The ID of the associated Key Vault Secret.
	SecretId pulumi.StringOutput `pulumi:"secretId"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
	Thumbprint pulumi.StringOutput `pulumi:"thumbprint"`
	// The current version of the Key Vault Certificate.
	Version pulumi.StringOutput `pulumi:"version"`
	// The Base ID of the Key Vault Certificate.
	VersionlessId pulumi.StringOutput `pulumi:"versionlessId"`
	// The Base ID of the Key Vault Secret.
	VersionlessSecretId pulumi.StringOutput `pulumi:"versionlessSecretId"`
}

// NewCertifiate registers a new resource with the given unique name, arguments, and options.
func NewCertifiate(ctx *pulumi.Context,
	name string, args *CertifiateArgs, opts ...pulumi.ResourceOption) (*Certifiate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyVaultId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Certifiate
	err := ctx.RegisterResource("azure:keyvault/certifiate:Certifiate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertifiate gets an existing Certifiate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertifiate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertifiateState, opts ...pulumi.ResourceOption) (*Certifiate, error) {
	var resource Certifiate
	err := ctx.ReadResource("azure:keyvault/certifiate:Certifiate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Certifiate resources.
type certifiateState struct {
	// A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
	Certificate *CertifiateCertificate `pulumi:"certificate"`
	// A `certificateAttribute` block as defined below.
	CertificateAttributes []CertifiateCertificateAttribute `pulumi:"certificateAttributes"`
	// The raw Key Vault Certificate data represented as a hexadecimal string.
	CertificateData *string `pulumi:"certificateData"`
	// The Base64 encoded Key Vault Certificate data.
	CertificateDataBase64 *string `pulumi:"certificateDataBase64"`
	// A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
	//
	// > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
	CertificatePolicy *CertifiateCertificatePolicy `pulumi:"certificatePolicy"`
	// The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
	ResourceManagerId *string `pulumi:"resourceManagerId"`
	// The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
	ResourceManagerVersionlessId *string `pulumi:"resourceManagerVersionlessId"`
	// The ID of the associated Key Vault Secret.
	SecretId *string `pulumi:"secretId"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
	Thumbprint *string `pulumi:"thumbprint"`
	// The current version of the Key Vault Certificate.
	Version *string `pulumi:"version"`
	// The Base ID of the Key Vault Certificate.
	VersionlessId *string `pulumi:"versionlessId"`
	// The Base ID of the Key Vault Secret.
	VersionlessSecretId *string `pulumi:"versionlessSecretId"`
}

type CertifiateState struct {
	// A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
	Certificate CertifiateCertificatePtrInput
	// A `certificateAttribute` block as defined below.
	CertificateAttributes CertifiateCertificateAttributeArrayInput
	// The raw Key Vault Certificate data represented as a hexadecimal string.
	CertificateData pulumi.StringPtrInput
	// The Base64 encoded Key Vault Certificate data.
	CertificateDataBase64 pulumi.StringPtrInput
	// A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
	//
	// > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
	CertificatePolicy CertifiateCertificatePolicyPtrInput
	// The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringPtrInput
	// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
	ResourceManagerId pulumi.StringPtrInput
	// The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
	ResourceManagerVersionlessId pulumi.StringPtrInput
	// The ID of the associated Key Vault Secret.
	SecretId pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
	Thumbprint pulumi.StringPtrInput
	// The current version of the Key Vault Certificate.
	Version pulumi.StringPtrInput
	// The Base ID of the Key Vault Certificate.
	VersionlessId pulumi.StringPtrInput
	// The Base ID of the Key Vault Secret.
	VersionlessSecretId pulumi.StringPtrInput
}

func (CertifiateState) ElementType() reflect.Type {
	return reflect.TypeOf((*certifiateState)(nil)).Elem()
}

type certifiateArgs struct {
	// A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
	Certificate *CertifiateCertificate `pulumi:"certificate"`
	// A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
	//
	// > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
	CertificatePolicy *CertifiateCertificatePolicy `pulumi:"certificatePolicy"`
	// The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
	KeyVaultId string `pulumi:"keyVaultId"`
	// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Certifiate resource.
type CertifiateArgs struct {
	// A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
	Certificate CertifiateCertificatePtrInput
	// A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
	//
	// > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
	CertificatePolicy CertifiateCertificatePolicyPtrInput
	// The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringInput
	// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (CertifiateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certifiateArgs)(nil)).Elem()
}

type CertifiateInput interface {
	pulumi.Input

	ToCertifiateOutput() CertifiateOutput
	ToCertifiateOutputWithContext(ctx context.Context) CertifiateOutput
}

func (*Certifiate) ElementType() reflect.Type {
	return reflect.TypeOf((**Certifiate)(nil)).Elem()
}

func (i *Certifiate) ToCertifiateOutput() CertifiateOutput {
	return i.ToCertifiateOutputWithContext(context.Background())
}

func (i *Certifiate) ToCertifiateOutputWithContext(ctx context.Context) CertifiateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateOutput)
}

// CertifiateArrayInput is an input type that accepts CertifiateArray and CertifiateArrayOutput values.
// You can construct a concrete instance of `CertifiateArrayInput` via:
//
//	CertifiateArray{ CertifiateArgs{...} }
type CertifiateArrayInput interface {
	pulumi.Input

	ToCertifiateArrayOutput() CertifiateArrayOutput
	ToCertifiateArrayOutputWithContext(context.Context) CertifiateArrayOutput
}

type CertifiateArray []CertifiateInput

func (CertifiateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certifiate)(nil)).Elem()
}

func (i CertifiateArray) ToCertifiateArrayOutput() CertifiateArrayOutput {
	return i.ToCertifiateArrayOutputWithContext(context.Background())
}

func (i CertifiateArray) ToCertifiateArrayOutputWithContext(ctx context.Context) CertifiateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateArrayOutput)
}

// CertifiateMapInput is an input type that accepts CertifiateMap and CertifiateMapOutput values.
// You can construct a concrete instance of `CertifiateMapInput` via:
//
//	CertifiateMap{ "key": CertifiateArgs{...} }
type CertifiateMapInput interface {
	pulumi.Input

	ToCertifiateMapOutput() CertifiateMapOutput
	ToCertifiateMapOutputWithContext(context.Context) CertifiateMapOutput
}

type CertifiateMap map[string]CertifiateInput

func (CertifiateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certifiate)(nil)).Elem()
}

func (i CertifiateMap) ToCertifiateMapOutput() CertifiateMapOutput {
	return i.ToCertifiateMapOutputWithContext(context.Background())
}

func (i CertifiateMap) ToCertifiateMapOutputWithContext(ctx context.Context) CertifiateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertifiateMapOutput)
}

type CertifiateOutput struct{ *pulumi.OutputState }

func (CertifiateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Certifiate)(nil)).Elem()
}

func (o CertifiateOutput) ToCertifiateOutput() CertifiateOutput {
	return o
}

func (o CertifiateOutput) ToCertifiateOutputWithContext(ctx context.Context) CertifiateOutput {
	return o
}

// A `certificate` block as defined below, used to Import an existing certificate. Changing this will create a new version of the Key Vault Certificate.
func (o CertifiateOutput) Certificate() CertifiateCertificatePtrOutput {
	return o.ApplyT(func(v *Certifiate) CertifiateCertificatePtrOutput { return v.Certificate }).(CertifiateCertificatePtrOutput)
}

// A `certificateAttribute` block as defined below.
func (o CertifiateOutput) CertificateAttributes() CertifiateCertificateAttributeArrayOutput {
	return o.ApplyT(func(v *Certifiate) CertifiateCertificateAttributeArrayOutput { return v.CertificateAttributes }).(CertifiateCertificateAttributeArrayOutput)
}

// The raw Key Vault Certificate data represented as a hexadecimal string.
func (o CertifiateOutput) CertificateData() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.CertificateData }).(pulumi.StringOutput)
}

// The Base64 encoded Key Vault Certificate data.
func (o CertifiateOutput) CertificateDataBase64() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.CertificateDataBase64 }).(pulumi.StringOutput)
}

// A `certificatePolicy` block as defined below. Changing this will create a new version of the Key Vault Certificate.
//
// > **NOTE:** When creating a Key Vault Certificate, at least one of `certificate` or `certificatePolicy` is required. Provide `certificate` to import an existing certificate, `certificatePolicy` to generate a new certificate.
func (o CertifiateOutput) CertificatePolicy() CertifiateCertificatePolicyOutput {
	return o.ApplyT(func(v *Certifiate) CertifiateCertificatePolicyOutput { return v.CertificatePolicy }).(CertifiateCertificatePolicyOutput)
}

// The ID of the Key Vault where the Certificate should be created. Changing this forces a new resource to be created.
func (o CertifiateOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.KeyVaultId }).(pulumi.StringOutput)
}

// Specifies the name of the Key Vault Certificate. Changing this forces a new resource to be created.
func (o CertifiateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The (Versioned) ID for this Key Vault Certificate. This property points to a specific version of a Key Vault Certificate, as such using this won't auto-rotate values if used in other Azure Services.
func (o CertifiateOutput) ResourceManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.ResourceManagerId }).(pulumi.StringOutput)
}

// The Versionless ID of the Key Vault Certificate. This property allows other Azure Services (that support it) to auto-rotate their value when the Key Vault Certificate is updated.
func (o CertifiateOutput) ResourceManagerVersionlessId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.ResourceManagerVersionlessId }).(pulumi.StringOutput)
}

// The ID of the associated Key Vault Secret.
func (o CertifiateOutput) SecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.SecretId }).(pulumi.StringOutput)
}

// A mapping of tags to assign to the resource.
func (o CertifiateOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
func (o CertifiateOutput) Thumbprint() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.Thumbprint }).(pulumi.StringOutput)
}

// The current version of the Key Vault Certificate.
func (o CertifiateOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The Base ID of the Key Vault Certificate.
func (o CertifiateOutput) VersionlessId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.VersionlessId }).(pulumi.StringOutput)
}

// The Base ID of the Key Vault Secret.
func (o CertifiateOutput) VersionlessSecretId() pulumi.StringOutput {
	return o.ApplyT(func(v *Certifiate) pulumi.StringOutput { return v.VersionlessSecretId }).(pulumi.StringOutput)
}

type CertifiateArrayOutput struct{ *pulumi.OutputState }

func (CertifiateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Certifiate)(nil)).Elem()
}

func (o CertifiateArrayOutput) ToCertifiateArrayOutput() CertifiateArrayOutput {
	return o
}

func (o CertifiateArrayOutput) ToCertifiateArrayOutputWithContext(ctx context.Context) CertifiateArrayOutput {
	return o
}

func (o CertifiateArrayOutput) Index(i pulumi.IntInput) CertifiateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Certifiate {
		return vs[0].([]*Certifiate)[vs[1].(int)]
	}).(CertifiateOutput)
}

type CertifiateMapOutput struct{ *pulumi.OutputState }

func (CertifiateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Certifiate)(nil)).Elem()
}

func (o CertifiateMapOutput) ToCertifiateMapOutput() CertifiateMapOutput {
	return o
}

func (o CertifiateMapOutput) ToCertifiateMapOutputWithContext(ctx context.Context) CertifiateMapOutput {
	return o
}

func (o CertifiateMapOutput) MapIndex(k pulumi.StringInput) CertifiateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Certifiate {
		return vs[0].(map[string]*Certifiate)[vs[1].(string)]
	}).(CertifiateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateInput)(nil)).Elem(), &Certifiate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateArrayInput)(nil)).Elem(), CertifiateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertifiateMapInput)(nil)).Elem(), CertifiateMap{})
	pulumi.RegisterOutputType(CertifiateOutput{})
	pulumi.RegisterOutputType(CertifiateArrayOutput{})
	pulumi.RegisterOutputType(CertifiateMapOutput{})
}
