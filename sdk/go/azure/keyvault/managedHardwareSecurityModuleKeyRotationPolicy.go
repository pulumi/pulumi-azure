// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Managed HSM Key rotation policy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := keyvault.NewManagedHardwareSecurityModuleKey(ctx, "example", &keyvault.ManagedHardwareSecurityModuleKeyArgs{
//				Name:         pulumi.String("example-key"),
//				ManagedHsmId: pulumi.Any(exampleAzurermKeyVaultManagedHardwareSecurityModule.Id),
//				KeyType:      pulumi.String("EC-HSM"),
//				Curve:        pulumi.String("P-521"),
//				KeyOpts: pulumi.StringArray{
//					pulumi.String("sign"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewManagedHardwareSecurityModuleKeyRotationPolicy(ctx, "example", &keyvault.ManagedHardwareSecurityModuleKeyRotationPolicyArgs{
//				ManagedHsmKeyId:  example.ID(),
//				ExpireAfter:      pulumi.String("P60D"),
//				TimeBeforeExpiry: pulumi.String("P30D"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Managed HSM Key rotation policy can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy example https://example-hsm.managedhsm.azure.net/keys/example
// ```
type ManagedHardwareSecurityModuleKeyRotationPolicy struct {
	pulumi.CustomResourceState

	// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
	ExpireAfter pulumi.StringOutput `pulumi:"expireAfter"`
	// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
	ManagedHsmKeyId pulumi.StringOutput `pulumi:"managedHsmKeyId"`
	// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeAfterCreation pulumi.StringPtrOutput `pulumi:"timeAfterCreation"`
	// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeBeforeExpiry pulumi.StringPtrOutput `pulumi:"timeBeforeExpiry"`
}

// NewManagedHardwareSecurityModuleKeyRotationPolicy registers a new resource with the given unique name, arguments, and options.
func NewManagedHardwareSecurityModuleKeyRotationPolicy(ctx *pulumi.Context,
	name string, args *ManagedHardwareSecurityModuleKeyRotationPolicyArgs, opts ...pulumi.ResourceOption) (*ManagedHardwareSecurityModuleKeyRotationPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ExpireAfter == nil {
		return nil, errors.New("invalid value for required argument 'ExpireAfter'")
	}
	if args.ManagedHsmKeyId == nil {
		return nil, errors.New("invalid value for required argument 'ManagedHsmKeyId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedHardwareSecurityModuleKeyRotationPolicy
	err := ctx.RegisterResource("azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedHardwareSecurityModuleKeyRotationPolicy gets an existing ManagedHardwareSecurityModuleKeyRotationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedHardwareSecurityModuleKeyRotationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedHardwareSecurityModuleKeyRotationPolicyState, opts ...pulumi.ResourceOption) (*ManagedHardwareSecurityModuleKeyRotationPolicy, error) {
	var resource ManagedHardwareSecurityModuleKeyRotationPolicy
	err := ctx.ReadResource("azure:keyvault/managedHardwareSecurityModuleKeyRotationPolicy:ManagedHardwareSecurityModuleKeyRotationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedHardwareSecurityModuleKeyRotationPolicy resources.
type managedHardwareSecurityModuleKeyRotationPolicyState struct {
	// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
	ExpireAfter *string `pulumi:"expireAfter"`
	// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
	ManagedHsmKeyId *string `pulumi:"managedHsmKeyId"`
	// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeAfterCreation *string `pulumi:"timeAfterCreation"`
	// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeBeforeExpiry *string `pulumi:"timeBeforeExpiry"`
}

type ManagedHardwareSecurityModuleKeyRotationPolicyState struct {
	// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
	ExpireAfter pulumi.StringPtrInput
	// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
	ManagedHsmKeyId pulumi.StringPtrInput
	// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeAfterCreation pulumi.StringPtrInput
	// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeBeforeExpiry pulumi.StringPtrInput
}

func (ManagedHardwareSecurityModuleKeyRotationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedHardwareSecurityModuleKeyRotationPolicyState)(nil)).Elem()
}

type managedHardwareSecurityModuleKeyRotationPolicyArgs struct {
	// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
	ExpireAfter string `pulumi:"expireAfter"`
	// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
	ManagedHsmKeyId string `pulumi:"managedHsmKeyId"`
	// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeAfterCreation *string `pulumi:"timeAfterCreation"`
	// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeBeforeExpiry *string `pulumi:"timeBeforeExpiry"`
}

// The set of arguments for constructing a ManagedHardwareSecurityModuleKeyRotationPolicy resource.
type ManagedHardwareSecurityModuleKeyRotationPolicyArgs struct {
	// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
	ExpireAfter pulumi.StringInput
	// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
	ManagedHsmKeyId pulumi.StringInput
	// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeAfterCreation pulumi.StringPtrInput
	// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
	TimeBeforeExpiry pulumi.StringPtrInput
}

func (ManagedHardwareSecurityModuleKeyRotationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedHardwareSecurityModuleKeyRotationPolicyArgs)(nil)).Elem()
}

type ManagedHardwareSecurityModuleKeyRotationPolicyInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleKeyRotationPolicyOutput() ManagedHardwareSecurityModuleKeyRotationPolicyOutput
	ToManagedHardwareSecurityModuleKeyRotationPolicyOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyOutput
}

func (*ManagedHardwareSecurityModuleKeyRotationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedHardwareSecurityModuleKeyRotationPolicy)(nil)).Elem()
}

func (i *ManagedHardwareSecurityModuleKeyRotationPolicy) ToManagedHardwareSecurityModuleKeyRotationPolicyOutput() ManagedHardwareSecurityModuleKeyRotationPolicyOutput {
	return i.ToManagedHardwareSecurityModuleKeyRotationPolicyOutputWithContext(context.Background())
}

func (i *ManagedHardwareSecurityModuleKeyRotationPolicy) ToManagedHardwareSecurityModuleKeyRotationPolicyOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleKeyRotationPolicyOutput)
}

// ManagedHardwareSecurityModuleKeyRotationPolicyArrayInput is an input type that accepts ManagedHardwareSecurityModuleKeyRotationPolicyArray and ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput values.
// You can construct a concrete instance of `ManagedHardwareSecurityModuleKeyRotationPolicyArrayInput` via:
//
//	ManagedHardwareSecurityModuleKeyRotationPolicyArray{ ManagedHardwareSecurityModuleKeyRotationPolicyArgs{...} }
type ManagedHardwareSecurityModuleKeyRotationPolicyArrayInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput() ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput
	ToManagedHardwareSecurityModuleKeyRotationPolicyArrayOutputWithContext(context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput
}

type ManagedHardwareSecurityModuleKeyRotationPolicyArray []ManagedHardwareSecurityModuleKeyRotationPolicyInput

func (ManagedHardwareSecurityModuleKeyRotationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedHardwareSecurityModuleKeyRotationPolicy)(nil)).Elem()
}

func (i ManagedHardwareSecurityModuleKeyRotationPolicyArray) ToManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput() ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput {
	return i.ToManagedHardwareSecurityModuleKeyRotationPolicyArrayOutputWithContext(context.Background())
}

func (i ManagedHardwareSecurityModuleKeyRotationPolicyArray) ToManagedHardwareSecurityModuleKeyRotationPolicyArrayOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput)
}

// ManagedHardwareSecurityModuleKeyRotationPolicyMapInput is an input type that accepts ManagedHardwareSecurityModuleKeyRotationPolicyMap and ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput values.
// You can construct a concrete instance of `ManagedHardwareSecurityModuleKeyRotationPolicyMapInput` via:
//
//	ManagedHardwareSecurityModuleKeyRotationPolicyMap{ "key": ManagedHardwareSecurityModuleKeyRotationPolicyArgs{...} }
type ManagedHardwareSecurityModuleKeyRotationPolicyMapInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleKeyRotationPolicyMapOutput() ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput
	ToManagedHardwareSecurityModuleKeyRotationPolicyMapOutputWithContext(context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput
}

type ManagedHardwareSecurityModuleKeyRotationPolicyMap map[string]ManagedHardwareSecurityModuleKeyRotationPolicyInput

func (ManagedHardwareSecurityModuleKeyRotationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedHardwareSecurityModuleKeyRotationPolicy)(nil)).Elem()
}

func (i ManagedHardwareSecurityModuleKeyRotationPolicyMap) ToManagedHardwareSecurityModuleKeyRotationPolicyMapOutput() ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput {
	return i.ToManagedHardwareSecurityModuleKeyRotationPolicyMapOutputWithContext(context.Background())
}

func (i ManagedHardwareSecurityModuleKeyRotationPolicyMap) ToManagedHardwareSecurityModuleKeyRotationPolicyMapOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput)
}

type ManagedHardwareSecurityModuleKeyRotationPolicyOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleKeyRotationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedHardwareSecurityModuleKeyRotationPolicy)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleKeyRotationPolicyOutput) ToManagedHardwareSecurityModuleKeyRotationPolicyOutput() ManagedHardwareSecurityModuleKeyRotationPolicyOutput {
	return o
}

func (o ManagedHardwareSecurityModuleKeyRotationPolicyOutput) ToManagedHardwareSecurityModuleKeyRotationPolicyOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyOutput {
	return o
}

// Specify the expiration duration on a newly rotated key as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). The minimum duration is `P28D`.
func (o ManagedHardwareSecurityModuleKeyRotationPolicyOutput) ExpireAfter() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleKeyRotationPolicy) pulumi.StringOutput { return v.ExpireAfter }).(pulumi.StringOutput)
}

// The ID of the Managed HSM Key. Changing this forces a new Managed HSM Key rotation policy to be created.
func (o ManagedHardwareSecurityModuleKeyRotationPolicyOutput) ManagedHsmKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleKeyRotationPolicy) pulumi.StringOutput { return v.ManagedHsmKeyId }).(pulumi.StringOutput)
}

// Rotate automatically at a duration after key creation as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
func (o ManagedHardwareSecurityModuleKeyRotationPolicyOutput) TimeAfterCreation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleKeyRotationPolicy) pulumi.StringPtrOutput {
		return v.TimeAfterCreation
	}).(pulumi.StringPtrOutput)
}

// Rotate automatically at a duration before key expiry as an [ISO 8601 duration](https://en.wikipedia.org/wiki/ISO_8601#Durations). Exactly one of `timeAfterCreation` or `timeBeforeExpiry` should be specified.
func (o ManagedHardwareSecurityModuleKeyRotationPolicyOutput) TimeBeforeExpiry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleKeyRotationPolicy) pulumi.StringPtrOutput {
		return v.TimeBeforeExpiry
	}).(pulumi.StringPtrOutput)
}

type ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedHardwareSecurityModuleKeyRotationPolicy)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput) ToManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput() ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput {
	return o
}

func (o ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput) ToManagedHardwareSecurityModuleKeyRotationPolicyArrayOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput {
	return o
}

func (o ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput) Index(i pulumi.IntInput) ManagedHardwareSecurityModuleKeyRotationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedHardwareSecurityModuleKeyRotationPolicy {
		return vs[0].([]*ManagedHardwareSecurityModuleKeyRotationPolicy)[vs[1].(int)]
	}).(ManagedHardwareSecurityModuleKeyRotationPolicyOutput)
}

type ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedHardwareSecurityModuleKeyRotationPolicy)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput) ToManagedHardwareSecurityModuleKeyRotationPolicyMapOutput() ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput {
	return o
}

func (o ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput) ToManagedHardwareSecurityModuleKeyRotationPolicyMapOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput {
	return o
}

func (o ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput) MapIndex(k pulumi.StringInput) ManagedHardwareSecurityModuleKeyRotationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedHardwareSecurityModuleKeyRotationPolicy {
		return vs[0].(map[string]*ManagedHardwareSecurityModuleKeyRotationPolicy)[vs[1].(string)]
	}).(ManagedHardwareSecurityModuleKeyRotationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleKeyRotationPolicyInput)(nil)).Elem(), &ManagedHardwareSecurityModuleKeyRotationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleKeyRotationPolicyArrayInput)(nil)).Elem(), ManagedHardwareSecurityModuleKeyRotationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleKeyRotationPolicyMapInput)(nil)).Elem(), ManagedHardwareSecurityModuleKeyRotationPolicyMap{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleKeyRotationPolicyOutput{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleKeyRotationPolicyArrayOutput{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleKeyRotationPolicyMapOutput{})
}
