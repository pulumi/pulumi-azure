// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages a Key Vault Certificate.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/key_vault_certificate.html.markdown.
type Certificate struct {
	s *pulumi.ResourceState
}

// NewCertificate registers a new resource with the given unique name, arguments, and options.
func NewCertificate(ctx *pulumi.Context,
	name string, args *CertificateArgs, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	if args == nil || args.CertificatePolicy == nil {
		return nil, errors.New("missing required argument 'CertificatePolicy'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["certificate"] = nil
		inputs["certificatePolicy"] = nil
		inputs["keyVaultId"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
		inputs["vaultUri"] = nil
	} else {
		inputs["certificate"] = args.Certificate
		inputs["certificatePolicy"] = args.CertificatePolicy
		inputs["keyVaultId"] = args.KeyVaultId
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
		inputs["vaultUri"] = args.VaultUri
	}
	inputs["certificateData"] = nil
	inputs["secretId"] = nil
	inputs["thumbprint"] = nil
	inputs["version"] = nil
	s, err := ctx.RegisterResource("azure:keyvault/certificate:Certificate", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// GetCertificate gets an existing Certificate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificate(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CertificateState, opts ...pulumi.ResourceOpt) (*Certificate, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["certificate"] = state.Certificate
		inputs["certificateData"] = state.CertificateData
		inputs["certificatePolicy"] = state.CertificatePolicy
		inputs["keyVaultId"] = state.KeyVaultId
		inputs["name"] = state.Name
		inputs["secretId"] = state.SecretId
		inputs["tags"] = state.Tags
		inputs["thumbprint"] = state.Thumbprint
		inputs["vaultUri"] = state.VaultUri
		inputs["version"] = state.Version
	}
	s, err := ctx.ReadResource("azure:keyvault/certificate:Certificate", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Certificate{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Certificate) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Certificate) ID() pulumi.IDOutput {
	return r.s.ID()
}

// A `certificate` block as defined below, used to Import an existing certificate.
func (r *Certificate) Certificate() pulumi.Output {
	return r.s.State["certificate"]
}

// The raw Key Vault Certificate data represented as a hexadecimal string.
func (r *Certificate) CertificateData() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["certificateData"])
}

// A `certificatePolicy` block as defined below.
func (r *Certificate) CertificatePolicy() pulumi.Output {
	return r.s.State["certificatePolicy"]
}

// The ID of the Key Vault where the Certificate should be created.
func (r *Certificate) KeyVaultId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["keyVaultId"])
}

// The name of the Certificate Issuer. Possible values include `Self`, or the name of a certificate issuing authority supported by Azure. Changing this forces a new resource to be created.
func (r *Certificate) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// The ID of the associated Key Vault Secret.
func (r *Certificate) SecretId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["secretId"])
}

// A mapping of tags to assign to the resource.
func (r *Certificate) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
func (r *Certificate) Thumbprint() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["thumbprint"])
}

func (r *Certificate) VaultUri() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vaultUri"])
}

// The current version of the Key Vault Certificate.
func (r *Certificate) Version() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["version"])
}

// Input properties used for looking up and filtering Certificate resources.
type CertificateState struct {
	// A `certificate` block as defined below, used to Import an existing certificate.
	Certificate interface{}
	// The raw Key Vault Certificate data represented as a hexadecimal string.
	CertificateData interface{}
	// A `certificatePolicy` block as defined below.
	CertificatePolicy interface{}
	// The ID of the Key Vault where the Certificate should be created.
	KeyVaultId interface{}
	// The name of the Certificate Issuer. Possible values include `Self`, or the name of a certificate issuing authority supported by Azure. Changing this forces a new resource to be created.
	Name interface{}
	// The ID of the associated Key Vault Secret.
	SecretId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	// The X509 Thumbprint of the Key Vault Certificate represented as a hexadecimal string.
	Thumbprint interface{}
	VaultUri interface{}
	// The current version of the Key Vault Certificate.
	Version interface{}
}

// The set of arguments for constructing a Certificate resource.
type CertificateArgs struct {
	// A `certificate` block as defined below, used to Import an existing certificate.
	Certificate interface{}
	// A `certificatePolicy` block as defined below.
	CertificatePolicy interface{}
	// The ID of the Key Vault where the Certificate should be created.
	KeyVaultId interface{}
	// The name of the Certificate Issuer. Possible values include `Self`, or the name of a certificate issuing authority supported by Azure. Changing this forces a new resource to be created.
	Name interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
	VaultUri interface{}
}
