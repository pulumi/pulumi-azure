// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Key Vault Certificate Contacts.
//
// ## Disclaimers
//
// > **Note:** It's possible to define Key Vault Certificate Contacts both within the `keyvault.KeyVault` resource via the `contact` block and by using the `keyvault.CertificateContacts` resource. However it's not possible to use both methods to manage Certificate Contacts within a KeyVault, since there'll be conflicts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			current, err := core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				TenantId:          *pulumi.String(current.TenantId),
//				SkuName:           pulumi.String("premium"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccessPolicy, err := keyvault.NewAccessPolicy(ctx, "exampleAccessPolicy", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId:   *pulumi.String(current.TenantId),
//				ObjectId:   *pulumi.String(current.ObjectId),
//				CertificatePermissions: pulumi.StringArray{
//					pulumi.String("ManageContacts"),
//				},
//				KeyPermissions: pulumi.StringArray{
//					pulumi.String("Create"),
//				},
//				SecretPermissions: pulumi.StringArray{
//					pulumi.String("Set"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewCertificateContacts(ctx, "exampleCertificateContacts", &keyvault.CertificateContactsArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				Contacts: keyvault.CertificateContactsContactArray{
//					&keyvault.CertificateContactsContactArgs{
//						Email: pulumi.String("example@example.com"),
//						Name:  pulumi.String("example"),
//						Phone: pulumi.String("01234567890"),
//					},
//					&keyvault.CertificateContactsContactArgs{
//						Email: pulumi.String("example2@example.com"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleAccessPolicy,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Key Vault Certificate Contacts can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:keyvault/certificateContacts:CertificateContacts example https://example-keyvault.vault.azure.net/certificates/contacts
//
// ```
type CertificateContacts struct {
	pulumi.CustomResourceState

	// One or more `contact` blocks as defined below.
	Contacts CertificateContactsContactArrayOutput `pulumi:"contacts"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`
}

// NewCertificateContacts registers a new resource with the given unique name, arguments, and options.
func NewCertificateContacts(ctx *pulumi.Context,
	name string, args *CertificateContactsArgs, opts ...pulumi.ResourceOption) (*CertificateContacts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Contacts == nil {
		return nil, errors.New("invalid value for required argument 'Contacts'")
	}
	if args.KeyVaultId == nil {
		return nil, errors.New("invalid value for required argument 'KeyVaultId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CertificateContacts
	err := ctx.RegisterResource("azure:keyvault/certificateContacts:CertificateContacts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateContacts gets an existing CertificateContacts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateContacts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateContactsState, opts ...pulumi.ResourceOption) (*CertificateContacts, error) {
	var resource CertificateContacts
	err := ctx.ReadResource("azure:keyvault/certificateContacts:CertificateContacts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateContacts resources.
type certificateContactsState struct {
	// One or more `contact` blocks as defined below.
	Contacts []CertificateContactsContact `pulumi:"contacts"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId *string `pulumi:"keyVaultId"`
}

type CertificateContactsState struct {
	// One or more `contact` blocks as defined below.
	Contacts CertificateContactsContactArrayInput
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringPtrInput
}

func (CertificateContactsState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateContactsState)(nil)).Elem()
}

type certificateContactsArgs struct {
	// One or more `contact` blocks as defined below.
	Contacts []CertificateContactsContact `pulumi:"contacts"`
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId string `pulumi:"keyVaultId"`
}

// The set of arguments for constructing a CertificateContacts resource.
type CertificateContactsArgs struct {
	// One or more `contact` blocks as defined below.
	Contacts CertificateContactsContactArrayInput
	// The ID of the Key Vault. Changing this forces a new resource to be created.
	KeyVaultId pulumi.StringInput
}

func (CertificateContactsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateContactsArgs)(nil)).Elem()
}

type CertificateContactsInput interface {
	pulumi.Input

	ToCertificateContactsOutput() CertificateContactsOutput
	ToCertificateContactsOutputWithContext(ctx context.Context) CertificateContactsOutput
}

func (*CertificateContacts) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateContacts)(nil)).Elem()
}

func (i *CertificateContacts) ToCertificateContactsOutput() CertificateContactsOutput {
	return i.ToCertificateContactsOutputWithContext(context.Background())
}

func (i *CertificateContacts) ToCertificateContactsOutputWithContext(ctx context.Context) CertificateContactsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateContactsOutput)
}

// CertificateContactsArrayInput is an input type that accepts CertificateContactsArray and CertificateContactsArrayOutput values.
// You can construct a concrete instance of `CertificateContactsArrayInput` via:
//
//	CertificateContactsArray{ CertificateContactsArgs{...} }
type CertificateContactsArrayInput interface {
	pulumi.Input

	ToCertificateContactsArrayOutput() CertificateContactsArrayOutput
	ToCertificateContactsArrayOutputWithContext(context.Context) CertificateContactsArrayOutput
}

type CertificateContactsArray []CertificateContactsInput

func (CertificateContactsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateContacts)(nil)).Elem()
}

func (i CertificateContactsArray) ToCertificateContactsArrayOutput() CertificateContactsArrayOutput {
	return i.ToCertificateContactsArrayOutputWithContext(context.Background())
}

func (i CertificateContactsArray) ToCertificateContactsArrayOutputWithContext(ctx context.Context) CertificateContactsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateContactsArrayOutput)
}

// CertificateContactsMapInput is an input type that accepts CertificateContactsMap and CertificateContactsMapOutput values.
// You can construct a concrete instance of `CertificateContactsMapInput` via:
//
//	CertificateContactsMap{ "key": CertificateContactsArgs{...} }
type CertificateContactsMapInput interface {
	pulumi.Input

	ToCertificateContactsMapOutput() CertificateContactsMapOutput
	ToCertificateContactsMapOutputWithContext(context.Context) CertificateContactsMapOutput
}

type CertificateContactsMap map[string]CertificateContactsInput

func (CertificateContactsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateContacts)(nil)).Elem()
}

func (i CertificateContactsMap) ToCertificateContactsMapOutput() CertificateContactsMapOutput {
	return i.ToCertificateContactsMapOutputWithContext(context.Background())
}

func (i CertificateContactsMap) ToCertificateContactsMapOutputWithContext(ctx context.Context) CertificateContactsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateContactsMapOutput)
}

type CertificateContactsOutput struct{ *pulumi.OutputState }

func (CertificateContactsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertificateContacts)(nil)).Elem()
}

func (o CertificateContactsOutput) ToCertificateContactsOutput() CertificateContactsOutput {
	return o
}

func (o CertificateContactsOutput) ToCertificateContactsOutputWithContext(ctx context.Context) CertificateContactsOutput {
	return o
}

// One or more `contact` blocks as defined below.
func (o CertificateContactsOutput) Contacts() CertificateContactsContactArrayOutput {
	return o.ApplyT(func(v *CertificateContacts) CertificateContactsContactArrayOutput { return v.Contacts }).(CertificateContactsContactArrayOutput)
}

// The ID of the Key Vault. Changing this forces a new resource to be created.
func (o CertificateContactsOutput) KeyVaultId() pulumi.StringOutput {
	return o.ApplyT(func(v *CertificateContacts) pulumi.StringOutput { return v.KeyVaultId }).(pulumi.StringOutput)
}

type CertificateContactsArrayOutput struct{ *pulumi.OutputState }

func (CertificateContactsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertificateContacts)(nil)).Elem()
}

func (o CertificateContactsArrayOutput) ToCertificateContactsArrayOutput() CertificateContactsArrayOutput {
	return o
}

func (o CertificateContactsArrayOutput) ToCertificateContactsArrayOutputWithContext(ctx context.Context) CertificateContactsArrayOutput {
	return o
}

func (o CertificateContactsArrayOutput) Index(i pulumi.IntInput) CertificateContactsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertificateContacts {
		return vs[0].([]*CertificateContacts)[vs[1].(int)]
	}).(CertificateContactsOutput)
}

type CertificateContactsMapOutput struct{ *pulumi.OutputState }

func (CertificateContactsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertificateContacts)(nil)).Elem()
}

func (o CertificateContactsMapOutput) ToCertificateContactsMapOutput() CertificateContactsMapOutput {
	return o
}

func (o CertificateContactsMapOutput) ToCertificateContactsMapOutputWithContext(ctx context.Context) CertificateContactsMapOutput {
	return o
}

func (o CertificateContactsMapOutput) MapIndex(k pulumi.StringInput) CertificateContactsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertificateContacts {
		return vs[0].(map[string]*CertificateContacts)[vs[1].(string)]
	}).(CertificateContactsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateContactsInput)(nil)).Elem(), &CertificateContacts{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateContactsArrayInput)(nil)).Elem(), CertificateContactsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateContactsMapInput)(nil)).Elem(), CertificateContactsMap{})
	pulumi.RegisterOutputType(CertificateContactsOutput{})
	pulumi.RegisterOutputType(CertificateContactsArrayOutput{})
	pulumi.RegisterOutputType(CertificateContactsMapOutput{})
}
