// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Manages a Key Vault Certificate Issuer.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/core"
// 	"github.com/pulumi/pulumi-azure/sdk/v3/go/azure/keyvault"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
// 			Location: pulumi.String("West US"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		current, err := core.GetClientConfig(ctx, nil, nil)
// 		if err != nil {
// 			return err
// 		}
// 		exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
// 			Location:          exampleResourceGroup.Location,
// 			ResourceGroupName: exampleResourceGroup.Name,
// 			SkuName:           pulumi.String("standard"),
// 			TenantId:          pulumi.String(current.TenantId),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = keyvault.NewCertificateIssuer(ctx, "exampleCertificateIssuer", &keyvault.CertificateIssuerArgs{
// 			OrgId:        pulumi.String("ExampleOrgName"),
// 			KeyVaultId:   exampleKeyVault.ID(),
// 			ProviderName: pulumi.String("DigiCert"),
// 			AccountId:    pulumi.String("0000"),
// 			Password:     pulumi.String("example-password"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Key Vault Certificate Issuers can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:keyvault/certificateIssuer:CertificateIssuer example "https://key-vault-name.vault.azure.net/certificates/issuers/example"
// ```
type CertificateIssuer struct {
	pulumi.CustomResourceState

	// The account number with the third-party Certificate Issuer.
	AccountId pulumi.StringPtrOutput `pulumi:"accountId"`
	// One or more `admin` blocks as defined below.
	Admins CertificateIssuerAdminArrayOutput `pulumi:"admins"`
	// The ID of the Key Vault in which to create the Certificate Issuer.
	KeyVaultId pulumi.StringOutput `pulumi:"keyVaultId"`
	// The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The ID of the organization as provided to the issuer.
	OrgId pulumi.StringPtrOutput `pulumi:"orgId"`
	// The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
	ProviderName pulumi.StringOutput `pulumi:"providerName"`
}

// NewCertificateIssuer registers a new resource with the given unique name, arguments, and options.
func NewCertificateIssuer(ctx *pulumi.Context,
	name string, args *CertificateIssuerArgs, opts ...pulumi.ResourceOption) (*CertificateIssuer, error) {
	if args == nil || args.KeyVaultId == nil {
		return nil, errors.New("missing required argument 'KeyVaultId'")
	}
	if args == nil || args.ProviderName == nil {
		return nil, errors.New("missing required argument 'ProviderName'")
	}
	if args == nil {
		args = &CertificateIssuerArgs{}
	}
	var resource CertificateIssuer
	err := ctx.RegisterResource("azure:keyvault/certificateIssuer:CertificateIssuer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertificateIssuer gets an existing CertificateIssuer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertificateIssuer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertificateIssuerState, opts ...pulumi.ResourceOption) (*CertificateIssuer, error) {
	var resource CertificateIssuer
	err := ctx.ReadResource("azure:keyvault/certificateIssuer:CertificateIssuer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertificateIssuer resources.
type certificateIssuerState struct {
	// The account number with the third-party Certificate Issuer.
	AccountId *string `pulumi:"accountId"`
	// One or more `admin` blocks as defined below.
	Admins []CertificateIssuerAdmin `pulumi:"admins"`
	// The ID of the Key Vault in which to create the Certificate Issuer.
	KeyVaultId *string `pulumi:"keyVaultId"`
	// The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
	Name *string `pulumi:"name"`
	// The ID of the organization as provided to the issuer.
	OrgId *string `pulumi:"orgId"`
	// The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
	Password *string `pulumi:"password"`
	// The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
	ProviderName *string `pulumi:"providerName"`
}

type CertificateIssuerState struct {
	// The account number with the third-party Certificate Issuer.
	AccountId pulumi.StringPtrInput
	// One or more `admin` blocks as defined below.
	Admins CertificateIssuerAdminArrayInput
	// The ID of the Key Vault in which to create the Certificate Issuer.
	KeyVaultId pulumi.StringPtrInput
	// The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
	Name pulumi.StringPtrInput
	// The ID of the organization as provided to the issuer.
	OrgId pulumi.StringPtrInput
	// The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
	Password pulumi.StringPtrInput
	// The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
	ProviderName pulumi.StringPtrInput
}

func (CertificateIssuerState) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateIssuerState)(nil)).Elem()
}

type certificateIssuerArgs struct {
	// The account number with the third-party Certificate Issuer.
	AccountId *string `pulumi:"accountId"`
	// One or more `admin` blocks as defined below.
	Admins []CertificateIssuerAdmin `pulumi:"admins"`
	// The ID of the Key Vault in which to create the Certificate Issuer.
	KeyVaultId string `pulumi:"keyVaultId"`
	// The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
	Name *string `pulumi:"name"`
	// The ID of the organization as provided to the issuer.
	OrgId *string `pulumi:"orgId"`
	// The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
	Password *string `pulumi:"password"`
	// The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
	ProviderName string `pulumi:"providerName"`
}

// The set of arguments for constructing a CertificateIssuer resource.
type CertificateIssuerArgs struct {
	// The account number with the third-party Certificate Issuer.
	AccountId pulumi.StringPtrInput
	// One or more `admin` blocks as defined below.
	Admins CertificateIssuerAdminArrayInput
	// The ID of the Key Vault in which to create the Certificate Issuer.
	KeyVaultId pulumi.StringInput
	// The name which should be used for this Key Vault Certificate Issuer. Changing this forces a new Key Vault Certificate Issuer to be created.
	Name pulumi.StringPtrInput
	// The ID of the organization as provided to the issuer.
	OrgId pulumi.StringPtrInput
	// The password associated with the account and organization ID at the third-party Certificate Issuer. If not specified, will not overwrite any previous value.
	Password pulumi.StringPtrInput
	// The name of the third-party Certificate Issuer. Possible values are: `DigiCert`, `GlobalSign`, `OneCertV2-PrivateCA`, `OneCertV2-PublicCA` and `SslAdminV2`.
	ProviderName pulumi.StringInput
}

func (CertificateIssuerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certificateIssuerArgs)(nil)).Elem()
}

type CertificateIssuerInput interface {
	pulumi.Input

	ToCertificateIssuerOutput() CertificateIssuerOutput
	ToCertificateIssuerOutputWithContext(ctx context.Context) CertificateIssuerOutput
}

func (CertificateIssuer) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuer)(nil)).Elem()
}

func (i CertificateIssuer) ToCertificateIssuerOutput() CertificateIssuerOutput {
	return i.ToCertificateIssuerOutputWithContext(context.Background())
}

func (i CertificateIssuer) ToCertificateIssuerOutputWithContext(ctx context.Context) CertificateIssuerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateIssuerOutput)
}

type CertificateIssuerOutput struct {
	*pulumi.OutputState
}

func (CertificateIssuerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateIssuerOutput)(nil)).Elem()
}

func (o CertificateIssuerOutput) ToCertificateIssuerOutput() CertificateIssuerOutput {
	return o
}

func (o CertificateIssuerOutput) ToCertificateIssuerOutputWithContext(ctx context.Context) CertificateIssuerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(CertificateIssuerOutput{})
}
