// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package keyvault

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Managed Hardware Security Module Role Assignment.
//
// ## Import
//
// Managed Hardware Security Modules can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment example https://0000.managedhsm.azure.net///RoleAssignment/00000000-0000-0000-0000-000000000000
//
// ```
type ManagedHardwareSecurityModuleRoleAssignment struct {
	pulumi.CustomResourceState

	// The name in GUID notation which should be used for this Managed Hardware Security Module Role Assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new Managed Hardware Security Module to be created.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The resource id of created assignment resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The resource ID of the role definition to assign. Changing this forces a new Managed Hardware Security Module to be created.
	RoleDefinitionId pulumi.StringOutput `pulumi:"roleDefinitionId"`
	// Specifies the scope to create the role assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new Managed Hardware Security Module to be created.
	VaultBaseUrl pulumi.StringOutput `pulumi:"vaultBaseUrl"`
}

// NewManagedHardwareSecurityModuleRoleAssignment registers a new resource with the given unique name, arguments, and options.
func NewManagedHardwareSecurityModuleRoleAssignment(ctx *pulumi.Context,
	name string, args *ManagedHardwareSecurityModuleRoleAssignmentArgs, opts ...pulumi.ResourceOption) (*ManagedHardwareSecurityModuleRoleAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.RoleDefinitionId == nil {
		return nil, errors.New("invalid value for required argument 'RoleDefinitionId'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	if args.VaultBaseUrl == nil {
		return nil, errors.New("invalid value for required argument 'VaultBaseUrl'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedHardwareSecurityModuleRoleAssignment
	err := ctx.RegisterResource("azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedHardwareSecurityModuleRoleAssignment gets an existing ManagedHardwareSecurityModuleRoleAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedHardwareSecurityModuleRoleAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedHardwareSecurityModuleRoleAssignmentState, opts ...pulumi.ResourceOption) (*ManagedHardwareSecurityModuleRoleAssignment, error) {
	var resource ManagedHardwareSecurityModuleRoleAssignment
	err := ctx.ReadResource("azure:keyvault/managedHardwareSecurityModuleRoleAssignment:ManagedHardwareSecurityModuleRoleAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedHardwareSecurityModuleRoleAssignment resources.
type managedHardwareSecurityModuleRoleAssignmentState struct {
	// The name in GUID notation which should be used for this Managed Hardware Security Module Role Assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Name *string `pulumi:"name"`
	// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new Managed Hardware Security Module to be created.
	PrincipalId *string `pulumi:"principalId"`
	// The resource id of created assignment resource.
	ResourceId *string `pulumi:"resourceId"`
	// The resource ID of the role definition to assign. Changing this forces a new Managed Hardware Security Module to be created.
	RoleDefinitionId *string `pulumi:"roleDefinitionId"`
	// Specifies the scope to create the role assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Scope *string `pulumi:"scope"`
	// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new Managed Hardware Security Module to be created.
	VaultBaseUrl *string `pulumi:"vaultBaseUrl"`
}

type ManagedHardwareSecurityModuleRoleAssignmentState struct {
	// The name in GUID notation which should be used for this Managed Hardware Security Module Role Assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Name pulumi.StringPtrInput
	// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new Managed Hardware Security Module to be created.
	PrincipalId pulumi.StringPtrInput
	// The resource id of created assignment resource.
	ResourceId pulumi.StringPtrInput
	// The resource ID of the role definition to assign. Changing this forces a new Managed Hardware Security Module to be created.
	RoleDefinitionId pulumi.StringPtrInput
	// Specifies the scope to create the role assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Scope pulumi.StringPtrInput
	// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new Managed Hardware Security Module to be created.
	VaultBaseUrl pulumi.StringPtrInput
}

func (ManagedHardwareSecurityModuleRoleAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedHardwareSecurityModuleRoleAssignmentState)(nil)).Elem()
}

type managedHardwareSecurityModuleRoleAssignmentArgs struct {
	// The name in GUID notation which should be used for this Managed Hardware Security Module Role Assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Name *string `pulumi:"name"`
	// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new Managed Hardware Security Module to be created.
	PrincipalId string `pulumi:"principalId"`
	// The resource ID of the role definition to assign. Changing this forces a new Managed Hardware Security Module to be created.
	RoleDefinitionId string `pulumi:"roleDefinitionId"`
	// Specifies the scope to create the role assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Scope string `pulumi:"scope"`
	// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new Managed Hardware Security Module to be created.
	VaultBaseUrl string `pulumi:"vaultBaseUrl"`
}

// The set of arguments for constructing a ManagedHardwareSecurityModuleRoleAssignment resource.
type ManagedHardwareSecurityModuleRoleAssignmentArgs struct {
	// The name in GUID notation which should be used for this Managed Hardware Security Module Role Assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Name pulumi.StringPtrInput
	// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new Managed Hardware Security Module to be created.
	PrincipalId pulumi.StringInput
	// The resource ID of the role definition to assign. Changing this forces a new Managed Hardware Security Module to be created.
	RoleDefinitionId pulumi.StringInput
	// Specifies the scope to create the role assignment. Changing this forces a new Managed Hardware Security Module to be created.
	Scope pulumi.StringInput
	// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new Managed Hardware Security Module to be created.
	VaultBaseUrl pulumi.StringInput
}

func (ManagedHardwareSecurityModuleRoleAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedHardwareSecurityModuleRoleAssignmentArgs)(nil)).Elem()
}

type ManagedHardwareSecurityModuleRoleAssignmentInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleRoleAssignmentOutput() ManagedHardwareSecurityModuleRoleAssignmentOutput
	ToManagedHardwareSecurityModuleRoleAssignmentOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleAssignmentOutput
}

func (*ManagedHardwareSecurityModuleRoleAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedHardwareSecurityModuleRoleAssignment)(nil)).Elem()
}

func (i *ManagedHardwareSecurityModuleRoleAssignment) ToManagedHardwareSecurityModuleRoleAssignmentOutput() ManagedHardwareSecurityModuleRoleAssignmentOutput {
	return i.ToManagedHardwareSecurityModuleRoleAssignmentOutputWithContext(context.Background())
}

func (i *ManagedHardwareSecurityModuleRoleAssignment) ToManagedHardwareSecurityModuleRoleAssignmentOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleRoleAssignmentOutput)
}

// ManagedHardwareSecurityModuleRoleAssignmentArrayInput is an input type that accepts ManagedHardwareSecurityModuleRoleAssignmentArray and ManagedHardwareSecurityModuleRoleAssignmentArrayOutput values.
// You can construct a concrete instance of `ManagedHardwareSecurityModuleRoleAssignmentArrayInput` via:
//
//	ManagedHardwareSecurityModuleRoleAssignmentArray{ ManagedHardwareSecurityModuleRoleAssignmentArgs{...} }
type ManagedHardwareSecurityModuleRoleAssignmentArrayInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleRoleAssignmentArrayOutput() ManagedHardwareSecurityModuleRoleAssignmentArrayOutput
	ToManagedHardwareSecurityModuleRoleAssignmentArrayOutputWithContext(context.Context) ManagedHardwareSecurityModuleRoleAssignmentArrayOutput
}

type ManagedHardwareSecurityModuleRoleAssignmentArray []ManagedHardwareSecurityModuleRoleAssignmentInput

func (ManagedHardwareSecurityModuleRoleAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedHardwareSecurityModuleRoleAssignment)(nil)).Elem()
}

func (i ManagedHardwareSecurityModuleRoleAssignmentArray) ToManagedHardwareSecurityModuleRoleAssignmentArrayOutput() ManagedHardwareSecurityModuleRoleAssignmentArrayOutput {
	return i.ToManagedHardwareSecurityModuleRoleAssignmentArrayOutputWithContext(context.Background())
}

func (i ManagedHardwareSecurityModuleRoleAssignmentArray) ToManagedHardwareSecurityModuleRoleAssignmentArrayOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleRoleAssignmentArrayOutput)
}

// ManagedHardwareSecurityModuleRoleAssignmentMapInput is an input type that accepts ManagedHardwareSecurityModuleRoleAssignmentMap and ManagedHardwareSecurityModuleRoleAssignmentMapOutput values.
// You can construct a concrete instance of `ManagedHardwareSecurityModuleRoleAssignmentMapInput` via:
//
//	ManagedHardwareSecurityModuleRoleAssignmentMap{ "key": ManagedHardwareSecurityModuleRoleAssignmentArgs{...} }
type ManagedHardwareSecurityModuleRoleAssignmentMapInput interface {
	pulumi.Input

	ToManagedHardwareSecurityModuleRoleAssignmentMapOutput() ManagedHardwareSecurityModuleRoleAssignmentMapOutput
	ToManagedHardwareSecurityModuleRoleAssignmentMapOutputWithContext(context.Context) ManagedHardwareSecurityModuleRoleAssignmentMapOutput
}

type ManagedHardwareSecurityModuleRoleAssignmentMap map[string]ManagedHardwareSecurityModuleRoleAssignmentInput

func (ManagedHardwareSecurityModuleRoleAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedHardwareSecurityModuleRoleAssignment)(nil)).Elem()
}

func (i ManagedHardwareSecurityModuleRoleAssignmentMap) ToManagedHardwareSecurityModuleRoleAssignmentMapOutput() ManagedHardwareSecurityModuleRoleAssignmentMapOutput {
	return i.ToManagedHardwareSecurityModuleRoleAssignmentMapOutputWithContext(context.Background())
}

func (i ManagedHardwareSecurityModuleRoleAssignmentMap) ToManagedHardwareSecurityModuleRoleAssignmentMapOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedHardwareSecurityModuleRoleAssignmentMapOutput)
}

type ManagedHardwareSecurityModuleRoleAssignmentOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleRoleAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedHardwareSecurityModuleRoleAssignment)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleRoleAssignmentOutput) ToManagedHardwareSecurityModuleRoleAssignmentOutput() ManagedHardwareSecurityModuleRoleAssignmentOutput {
	return o
}

func (o ManagedHardwareSecurityModuleRoleAssignmentOutput) ToManagedHardwareSecurityModuleRoleAssignmentOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleAssignmentOutput {
	return o
}

// The name in GUID notation which should be used for this Managed Hardware Security Module Role Assignment. Changing this forces a new Managed Hardware Security Module to be created.
func (o ManagedHardwareSecurityModuleRoleAssignmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleRoleAssignment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The principal ID to be assigned to this role. It can point to a user, service principal, or security group. Changing this forces a new Managed Hardware Security Module to be created.
func (o ManagedHardwareSecurityModuleRoleAssignmentOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleRoleAssignment) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The resource id of created assignment resource.
func (o ManagedHardwareSecurityModuleRoleAssignmentOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleRoleAssignment) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// The resource ID of the role definition to assign. Changing this forces a new Managed Hardware Security Module to be created.
func (o ManagedHardwareSecurityModuleRoleAssignmentOutput) RoleDefinitionId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleRoleAssignment) pulumi.StringOutput { return v.RoleDefinitionId }).(pulumi.StringOutput)
}

// Specifies the scope to create the role assignment. Changing this forces a new Managed Hardware Security Module to be created.
func (o ManagedHardwareSecurityModuleRoleAssignmentOutput) Scope() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleRoleAssignment) pulumi.StringOutput { return v.Scope }).(pulumi.StringOutput)
}

// The HSM URI of a Managed Hardware Security Module resource. Changing this forces a new Managed Hardware Security Module to be created.
func (o ManagedHardwareSecurityModuleRoleAssignmentOutput) VaultBaseUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedHardwareSecurityModuleRoleAssignment) pulumi.StringOutput { return v.VaultBaseUrl }).(pulumi.StringOutput)
}

type ManagedHardwareSecurityModuleRoleAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleRoleAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedHardwareSecurityModuleRoleAssignment)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleRoleAssignmentArrayOutput) ToManagedHardwareSecurityModuleRoleAssignmentArrayOutput() ManagedHardwareSecurityModuleRoleAssignmentArrayOutput {
	return o
}

func (o ManagedHardwareSecurityModuleRoleAssignmentArrayOutput) ToManagedHardwareSecurityModuleRoleAssignmentArrayOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleAssignmentArrayOutput {
	return o
}

func (o ManagedHardwareSecurityModuleRoleAssignmentArrayOutput) Index(i pulumi.IntInput) ManagedHardwareSecurityModuleRoleAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedHardwareSecurityModuleRoleAssignment {
		return vs[0].([]*ManagedHardwareSecurityModuleRoleAssignment)[vs[1].(int)]
	}).(ManagedHardwareSecurityModuleRoleAssignmentOutput)
}

type ManagedHardwareSecurityModuleRoleAssignmentMapOutput struct{ *pulumi.OutputState }

func (ManagedHardwareSecurityModuleRoleAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedHardwareSecurityModuleRoleAssignment)(nil)).Elem()
}

func (o ManagedHardwareSecurityModuleRoleAssignmentMapOutput) ToManagedHardwareSecurityModuleRoleAssignmentMapOutput() ManagedHardwareSecurityModuleRoleAssignmentMapOutput {
	return o
}

func (o ManagedHardwareSecurityModuleRoleAssignmentMapOutput) ToManagedHardwareSecurityModuleRoleAssignmentMapOutputWithContext(ctx context.Context) ManagedHardwareSecurityModuleRoleAssignmentMapOutput {
	return o
}

func (o ManagedHardwareSecurityModuleRoleAssignmentMapOutput) MapIndex(k pulumi.StringInput) ManagedHardwareSecurityModuleRoleAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedHardwareSecurityModuleRoleAssignment {
		return vs[0].(map[string]*ManagedHardwareSecurityModuleRoleAssignment)[vs[1].(string)]
	}).(ManagedHardwareSecurityModuleRoleAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleRoleAssignmentInput)(nil)).Elem(), &ManagedHardwareSecurityModuleRoleAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleRoleAssignmentArrayInput)(nil)).Elem(), ManagedHardwareSecurityModuleRoleAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedHardwareSecurityModuleRoleAssignmentMapInput)(nil)).Elem(), ManagedHardwareSecurityModuleRoleAssignmentMap{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleRoleAssignmentOutput{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleRoleAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ManagedHardwareSecurityModuleRoleAssignmentMapOutput{})
}
