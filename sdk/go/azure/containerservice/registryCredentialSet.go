// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Container Registry Credential Set.
//
// ## Example Usage
//
// ### Minimal)
//
// > **Note:** Be aware that you will need to permit the Identity that is created for the Container Registry to have `get` on secrets to the Key Vault, e.g. using the `keyvault.AccessPolicy` resource.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistry, err := containerservice.NewRegistry(ctx, "example", &containerservice.RegistryArgs{
//				Name:              pulumi.String("exampleContainerRegistry"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Sku:               pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewRegistryCredentialSet(ctx, "example", &containerservice.RegistryCredentialSetArgs{
//				Name:                pulumi.String("exampleCredentialSet"),
//				ContainerRegistryId: exampleRegistry.ID(),
//				LoginServer:         pulumi.String("docker.io"),
//				Identity: &containerservice.RegistryCredentialSetIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				AuthenticationCredentials: &containerservice.RegistryCredentialSetAuthenticationCredentialsArgs{
//					UsernameSecretId: pulumi.String("https://example-keyvault.vault.azure.net/secrets/example-user-name"),
//					PasswordSecretId: pulumi.String("https://example-keyvault.vault.azure.net/secrets/example-user-password"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Full)
//
// This example provisions a key vault with two secrets, a container registry, a container registry credential set, and an access policy to allow the container registry to read the secrets from the key vault.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/keyvault"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			current, err := core.GetClientConfig(ctx, map[string]interface{}{}, nil)
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "example", &keyvault.KeyVaultArgs{
//				Name:                    pulumi.String("examplekeyvault"),
//				Location:                example.Location,
//				ResourceGroupName:       example.Name,
//				TenantId:                pulumi.String(current.TenantId),
//				SkuName:                 pulumi.String("standard"),
//				SoftDeleteRetentionDays: pulumi.Int(7),
//				AccessPolicies: keyvault.KeyVaultAccessPolicyArray{
//					&keyvault.KeyVaultAccessPolicyArgs{
//						TenantId:               pulumi.String(current.TenantId),
//						ObjectId:               pulumi.String(current.ObjectId),
//						CertificatePermissions: pulumi.StringArray{},
//						KeyPermissions:         pulumi.StringArray{},
//						SecretPermissions: pulumi.StringArray{
//							pulumi.String("Get"),
//							pulumi.String("Set"),
//							pulumi.String("Delete"),
//							pulumi.String("Purge"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleUser, err := keyvault.NewSecret(ctx, "example_user", &keyvault.SecretArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				Name:       pulumi.String("example-user-name"),
//				Value:      pulumi.String("name"),
//			})
//			if err != nil {
//				return err
//			}
//			examplePassword, err := keyvault.NewSecret(ctx, "example_password", &keyvault.SecretArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				Name:       pulumi.String("example-user-password"),
//				Value:      pulumi.String("password"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistry, err := containerservice.NewRegistry(ctx, "example", &containerservice.RegistryArgs{
//				Name:              pulumi.String("exampleContainerRegistry"),
//				ResourceGroupName: example.Name,
//				Location:          example.Location,
//				Sku:               pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistryCredentialSet, err := containerservice.NewRegistryCredentialSet(ctx, "example", &containerservice.RegistryCredentialSetArgs{
//				Name:                pulumi.String("exampleCredentialSet"),
//				ContainerRegistryId: exampleRegistry.ID(),
//				LoginServer:         pulumi.String("docker.io"),
//				Identity: &containerservice.RegistryCredentialSetIdentityArgs{
//					Type: pulumi.String("SystemAssigned"),
//				},
//				AuthenticationCredentials: &containerservice.RegistryCredentialSetAuthenticationCredentialsArgs{
//					UsernameSecretId: exampleUser.VersionlessId,
//					PasswordSecretId: examplePassword.VersionlessId,
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewAccessPolicy(ctx, "read_secrets", &keyvault.AccessPolicyArgs{
//				KeyVaultId: exampleKeyVault.ID(),
//				TenantId: pulumi.String(exampleRegistryCredentialSet.Identity.ApplyT(func(identity containerservice.RegistryCredentialSetIdentity) (*string, error) {
//					return &identity.TenantId, nil
//				}).(pulumi.StringPtrOutput)),
//				ObjectId: pulumi.String(exampleRegistryCredentialSet.Identity.ApplyT(func(identity containerservice.RegistryCredentialSetIdentity) (*string, error) {
//					return &identity.PrincipalId, nil
//				}).(pulumi.StringPtrOutput)),
//				SecretPermissions: pulumi.StringArray{
//					pulumi.String("Get"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This resource uses the following Azure API Providers:
//
// * `Microsoft.ContainerRegistry` - 2023-07-01
//
// ## Import
//
// Container Registry Credential Sets can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:containerservice/registryCredentialSet:RegistryCredentialSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/credentialSets/credentialSet1
// ```
type RegistryCredentialSet struct {
	pulumi.CustomResourceState

	// A `authenticationCredentials` block as defined below.
	AuthenticationCredentials RegistryCredentialSetAuthenticationCredentialsOutput `pulumi:"authenticationCredentials"`
	// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
	ContainerRegistryId pulumi.StringOutput `pulumi:"containerRegistryId"`
	// An `identity` block as defined below.
	Identity RegistryCredentialSetIdentityOutput `pulumi:"identity"`
	// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	LoginServer pulumi.StringOutput `pulumi:"loginServer"`
	// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRegistryCredentialSet registers a new resource with the given unique name, arguments, and options.
func NewRegistryCredentialSet(ctx *pulumi.Context,
	name string, args *RegistryCredentialSetArgs, opts ...pulumi.ResourceOption) (*RegistryCredentialSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationCredentials == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationCredentials'")
	}
	if args.ContainerRegistryId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerRegistryId'")
	}
	if args.Identity == nil {
		return nil, errors.New("invalid value for required argument 'Identity'")
	}
	if args.LoginServer == nil {
		return nil, errors.New("invalid value for required argument 'LoginServer'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryCredentialSet
	err := ctx.RegisterResource("azure:containerservice/registryCredentialSet:RegistryCredentialSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryCredentialSet gets an existing RegistryCredentialSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryCredentialSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryCredentialSetState, opts ...pulumi.ResourceOption) (*RegistryCredentialSet, error) {
	var resource RegistryCredentialSet
	err := ctx.ReadResource("azure:containerservice/registryCredentialSet:RegistryCredentialSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryCredentialSet resources.
type registryCredentialSetState struct {
	// A `authenticationCredentials` block as defined below.
	AuthenticationCredentials *RegistryCredentialSetAuthenticationCredentials `pulumi:"authenticationCredentials"`
	// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
	ContainerRegistryId *string `pulumi:"containerRegistryId"`
	// An `identity` block as defined below.
	Identity *RegistryCredentialSetIdentity `pulumi:"identity"`
	// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	LoginServer *string `pulumi:"loginServer"`
	// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	Name *string `pulumi:"name"`
}

type RegistryCredentialSetState struct {
	// A `authenticationCredentials` block as defined below.
	AuthenticationCredentials RegistryCredentialSetAuthenticationCredentialsPtrInput
	// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
	ContainerRegistryId pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity RegistryCredentialSetIdentityPtrInput
	// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	LoginServer pulumi.StringPtrInput
	// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	Name pulumi.StringPtrInput
}

func (RegistryCredentialSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryCredentialSetState)(nil)).Elem()
}

type registryCredentialSetArgs struct {
	// A `authenticationCredentials` block as defined below.
	AuthenticationCredentials RegistryCredentialSetAuthenticationCredentials `pulumi:"authenticationCredentials"`
	// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
	ContainerRegistryId string `pulumi:"containerRegistryId"`
	// An `identity` block as defined below.
	Identity RegistryCredentialSetIdentity `pulumi:"identity"`
	// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	LoginServer string `pulumi:"loginServer"`
	// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RegistryCredentialSet resource.
type RegistryCredentialSetArgs struct {
	// A `authenticationCredentials` block as defined below.
	AuthenticationCredentials RegistryCredentialSetAuthenticationCredentialsInput
	// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
	ContainerRegistryId pulumi.StringInput
	// An `identity` block as defined below.
	Identity RegistryCredentialSetIdentityInput
	// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	LoginServer pulumi.StringInput
	// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
	Name pulumi.StringPtrInput
}

func (RegistryCredentialSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryCredentialSetArgs)(nil)).Elem()
}

type RegistryCredentialSetInput interface {
	pulumi.Input

	ToRegistryCredentialSetOutput() RegistryCredentialSetOutput
	ToRegistryCredentialSetOutputWithContext(ctx context.Context) RegistryCredentialSetOutput
}

func (*RegistryCredentialSet) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryCredentialSet)(nil)).Elem()
}

func (i *RegistryCredentialSet) ToRegistryCredentialSetOutput() RegistryCredentialSetOutput {
	return i.ToRegistryCredentialSetOutputWithContext(context.Background())
}

func (i *RegistryCredentialSet) ToRegistryCredentialSetOutputWithContext(ctx context.Context) RegistryCredentialSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialSetOutput)
}

// RegistryCredentialSetArrayInput is an input type that accepts RegistryCredentialSetArray and RegistryCredentialSetArrayOutput values.
// You can construct a concrete instance of `RegistryCredentialSetArrayInput` via:
//
//	RegistryCredentialSetArray{ RegistryCredentialSetArgs{...} }
type RegistryCredentialSetArrayInput interface {
	pulumi.Input

	ToRegistryCredentialSetArrayOutput() RegistryCredentialSetArrayOutput
	ToRegistryCredentialSetArrayOutputWithContext(context.Context) RegistryCredentialSetArrayOutput
}

type RegistryCredentialSetArray []RegistryCredentialSetInput

func (RegistryCredentialSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryCredentialSet)(nil)).Elem()
}

func (i RegistryCredentialSetArray) ToRegistryCredentialSetArrayOutput() RegistryCredentialSetArrayOutput {
	return i.ToRegistryCredentialSetArrayOutputWithContext(context.Background())
}

func (i RegistryCredentialSetArray) ToRegistryCredentialSetArrayOutputWithContext(ctx context.Context) RegistryCredentialSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialSetArrayOutput)
}

// RegistryCredentialSetMapInput is an input type that accepts RegistryCredentialSetMap and RegistryCredentialSetMapOutput values.
// You can construct a concrete instance of `RegistryCredentialSetMapInput` via:
//
//	RegistryCredentialSetMap{ "key": RegistryCredentialSetArgs{...} }
type RegistryCredentialSetMapInput interface {
	pulumi.Input

	ToRegistryCredentialSetMapOutput() RegistryCredentialSetMapOutput
	ToRegistryCredentialSetMapOutputWithContext(context.Context) RegistryCredentialSetMapOutput
}

type RegistryCredentialSetMap map[string]RegistryCredentialSetInput

func (RegistryCredentialSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryCredentialSet)(nil)).Elem()
}

func (i RegistryCredentialSetMap) ToRegistryCredentialSetMapOutput() RegistryCredentialSetMapOutput {
	return i.ToRegistryCredentialSetMapOutputWithContext(context.Background())
}

func (i RegistryCredentialSetMap) ToRegistryCredentialSetMapOutputWithContext(ctx context.Context) RegistryCredentialSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryCredentialSetMapOutput)
}

type RegistryCredentialSetOutput struct{ *pulumi.OutputState }

func (RegistryCredentialSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryCredentialSet)(nil)).Elem()
}

func (o RegistryCredentialSetOutput) ToRegistryCredentialSetOutput() RegistryCredentialSetOutput {
	return o
}

func (o RegistryCredentialSetOutput) ToRegistryCredentialSetOutputWithContext(ctx context.Context) RegistryCredentialSetOutput {
	return o
}

// A `authenticationCredentials` block as defined below.
func (o RegistryCredentialSetOutput) AuthenticationCredentials() RegistryCredentialSetAuthenticationCredentialsOutput {
	return o.ApplyT(func(v *RegistryCredentialSet) RegistryCredentialSetAuthenticationCredentialsOutput {
		return v.AuthenticationCredentials
	}).(RegistryCredentialSetAuthenticationCredentialsOutput)
}

// The ID of the Container Registry. Changing this forces a new Container Registry Credential Set to be created.
func (o RegistryCredentialSetOutput) ContainerRegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryCredentialSet) pulumi.StringOutput { return v.ContainerRegistryId }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o RegistryCredentialSetOutput) Identity() RegistryCredentialSetIdentityOutput {
	return o.ApplyT(func(v *RegistryCredentialSet) RegistryCredentialSetIdentityOutput { return v.Identity }).(RegistryCredentialSetIdentityOutput)
}

// The login server for the Credential Set. Changing this forces a new Container Registry Credential Set to be created.
func (o RegistryCredentialSetOutput) LoginServer() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryCredentialSet) pulumi.StringOutput { return v.LoginServer }).(pulumi.StringOutput)
}

// The name which should be used for this Container Registry Credential Set. Changing this forces a new Container Registry Credential Set to be created.
func (o RegistryCredentialSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryCredentialSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RegistryCredentialSetArrayOutput struct{ *pulumi.OutputState }

func (RegistryCredentialSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryCredentialSet)(nil)).Elem()
}

func (o RegistryCredentialSetArrayOutput) ToRegistryCredentialSetArrayOutput() RegistryCredentialSetArrayOutput {
	return o
}

func (o RegistryCredentialSetArrayOutput) ToRegistryCredentialSetArrayOutputWithContext(ctx context.Context) RegistryCredentialSetArrayOutput {
	return o
}

func (o RegistryCredentialSetArrayOutput) Index(i pulumi.IntInput) RegistryCredentialSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryCredentialSet {
		return vs[0].([]*RegistryCredentialSet)[vs[1].(int)]
	}).(RegistryCredentialSetOutput)
}

type RegistryCredentialSetMapOutput struct{ *pulumi.OutputState }

func (RegistryCredentialSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryCredentialSet)(nil)).Elem()
}

func (o RegistryCredentialSetMapOutput) ToRegistryCredentialSetMapOutput() RegistryCredentialSetMapOutput {
	return o
}

func (o RegistryCredentialSetMapOutput) ToRegistryCredentialSetMapOutputWithContext(ctx context.Context) RegistryCredentialSetMapOutput {
	return o
}

func (o RegistryCredentialSetMapOutput) MapIndex(k pulumi.StringInput) RegistryCredentialSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryCredentialSet {
		return vs[0].(map[string]*RegistryCredentialSet)[vs[1].(string)]
	}).(RegistryCredentialSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialSetInput)(nil)).Elem(), &RegistryCredentialSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialSetArrayInput)(nil)).Elem(), RegistryCredentialSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryCredentialSetMapInput)(nil)).Elem(), RegistryCredentialSetMap{})
	pulumi.RegisterOutputType(RegistryCredentialSetOutput{})
	pulumi.RegisterOutputType(RegistryCredentialSetArrayOutput{})
	pulumi.RegisterOutputType(RegistryCredentialSetMapOutput{})
}
