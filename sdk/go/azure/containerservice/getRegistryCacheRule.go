// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"errors"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Container Registry Cache Rule.
func LookupRegistryCacheRule(ctx *pulumi.Context, args *LookupRegistryCacheRuleArgs, opts ...pulumi.InvokeOption) (*LookupRegistryCacheRuleResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	invokeOpts, optsErr := pulumi.NewInvokeOptions(opts...)
	if optsErr != nil {
		return &LookupRegistryCacheRuleResult{}, optsErr
	}
	if len(invokeOpts.DependsOn) > 0 {
		return &LookupRegistryCacheRuleResult{}, errors.New("DependsOn is not supported for direct form invoke LookupRegistryCacheRule, use LookupRegistryCacheRuleOutput instead")
	}
	if len(invokeOpts.DependsOnInputs) > 0 {
		return &LookupRegistryCacheRuleResult{}, errors.New("DependsOnInputs is not supported for direct form invoke LookupRegistryCacheRule, use LookupRegistryCacheRuleOutput instead")
	}
	var rv LookupRegistryCacheRuleResult
	err := ctx.Invoke("azure:containerservice/getRegistryCacheRule:getRegistryCacheRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistryCacheRule.
type LookupRegistryCacheRuleArgs struct {
	// The ID of the container registry where the cache rule should apply. Changing this forces a new resource to be created.
	ContainerRegistryId string `pulumi:"containerRegistryId"`
	// Specifies the name of the Container Registry Cache Rule. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
	Name string `pulumi:"name"`
}

// A collection of values returned by getRegistryCacheRule.
type LookupRegistryCacheRuleResult struct {
	ContainerRegistryId string `pulumi:"containerRegistryId"`
	// The ARM resource ID of the credential store which is associated with the cache rule.
	CredentialSetId string `pulumi:"credentialSetId"`
	// The provider-assigned unique ID for this managed resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// The name of the source repository path.
	SourceRepo string `pulumi:"sourceRepo"`
	// The name of the new repository path to store artifacts.
	TargetRepo string `pulumi:"targetRepo"`
}

func LookupRegistryCacheRuleOutput(ctx *pulumi.Context, args LookupRegistryCacheRuleOutputArgs, opts ...pulumi.InvokeOption) LookupRegistryCacheRuleResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupRegistryCacheRuleResultOutput, error) {
			args := v.(LookupRegistryCacheRuleArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupRegistryCacheRuleResult
			secret, deps, err := ctx.InvokePackageRawWithDeps("azure:containerservice/getRegistryCacheRule:getRegistryCacheRule", args, &rv, "", opts...)
			if err != nil {
				return LookupRegistryCacheRuleResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupRegistryCacheRuleResultOutput)
			output = pulumi.OutputWithDependencies(ctx.Context(), output, deps...).(LookupRegistryCacheRuleResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupRegistryCacheRuleResultOutput), nil
			}
			return output, nil
		}).(LookupRegistryCacheRuleResultOutput)
}

// A collection of arguments for invoking getRegistryCacheRule.
type LookupRegistryCacheRuleOutputArgs struct {
	// The ID of the container registry where the cache rule should apply. Changing this forces a new resource to be created.
	ContainerRegistryId pulumi.StringInput `pulumi:"containerRegistryId"`
	// Specifies the name of the Container Registry Cache Rule. Only Alphanumeric characters allowed. Changing this forces a new resource to be created.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRegistryCacheRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryCacheRuleArgs)(nil)).Elem()
}

// A collection of values returned by getRegistryCacheRule.
type LookupRegistryCacheRuleResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryCacheRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryCacheRuleResult)(nil)).Elem()
}

func (o LookupRegistryCacheRuleResultOutput) ToLookupRegistryCacheRuleResultOutput() LookupRegistryCacheRuleResultOutput {
	return o
}

func (o LookupRegistryCacheRuleResultOutput) ToLookupRegistryCacheRuleResultOutputWithContext(ctx context.Context) LookupRegistryCacheRuleResultOutput {
	return o
}

func (o LookupRegistryCacheRuleResultOutput) ContainerRegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCacheRuleResult) string { return v.ContainerRegistryId }).(pulumi.StringOutput)
}

// The ARM resource ID of the credential store which is associated with the cache rule.
func (o LookupRegistryCacheRuleResultOutput) CredentialSetId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCacheRuleResult) string { return v.CredentialSetId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRegistryCacheRuleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCacheRuleResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegistryCacheRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCacheRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the source repository path.
func (o LookupRegistryCacheRuleResultOutput) SourceRepo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCacheRuleResult) string { return v.SourceRepo }).(pulumi.StringOutput)
}

// The name of the new repository path to store artifacts.
func (o LookupRegistryCacheRuleResultOutput) TargetRepo() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryCacheRuleResult) string { return v.TargetRepo }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryCacheRuleResultOutput{})
}
