// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <!-- Note: This documentation is generated. Any manual changes will be overwritten -->
//
// Manages a Kubernetes Fleet Member.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Name:     pulumi.String("example-resources"),
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			example, err := containerservice.NewKubernetesCluster(ctx, "example", &containerservice.KubernetesClusterArgs{
//				Name:              pulumi.String("example"),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				DnsPrefix:         pulumi.String("acctestaksexample"),
//				DefaultNodePool: &containerservice.KubernetesClusterDefaultNodePoolArgs{
//					Name:      pulumi.String("example-value"),
//					NodeCount: pulumi.Int("example-value"),
//					VmSize:    pulumi.String("example-value"),
//				},
//				Identity: &containerservice.KubernetesClusterIdentityArgs{
//					Type: pulumi.String("example-value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleKubernetesFleetManager, err := containerservice.NewKubernetesFleetManager(ctx, "example", &containerservice.KubernetesFleetManagerArgs{
//				Name:              pulumi.String("example"),
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				HubProfile: &containerservice.KubernetesFleetManagerHubProfileArgs{
//					DnsPrefix: pulumi.String("val-example"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewFleetMember(ctx, "example", &containerservice.FleetMemberArgs{
//				KubernetesClusterId: example.ID(),
//				KubernetesFleetId:   exampleKubernetesFleetManager.ID(),
//				Name:                pulumi.String("example"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// An existing Kubernetes Fleet Member can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:containerservice/fleetMember:FleetMember example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/members/{memberName}
// ```
//
// * Where `{subscriptionId}` is the ID of the Azure Subscription where the Kubernetes Fleet Member exists. For example `12345678-1234-9876-4563-123456789012`.
//
// * Where `{resourceGroupName}` is the name of Resource Group where this Kubernetes Fleet Member exists. For example `example-resource-group`.
//
// * Where `{fleetName}` is the name of the Fleet. For example `fleetValue`.
//
// * Where `{memberName}` is the name of the Member. For example `memberValue`.
type FleetMember struct {
	pulumi.CustomResourceState

	// The group this member belongs to for multi-cluster update management.
	Group pulumi.StringPtrOutput `pulumi:"group"`
	// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesClusterId pulumi.StringOutput `pulumi:"kubernetesClusterId"`
	// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesFleetId pulumi.StringOutput `pulumi:"kubernetesFleetId"`
	// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewFleetMember registers a new resource with the given unique name, arguments, and options.
func NewFleetMember(ctx *pulumi.Context,
	name string, args *FleetMemberArgs, opts ...pulumi.ResourceOption) (*FleetMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KubernetesClusterId == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesClusterId'")
	}
	if args.KubernetesFleetId == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesFleetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FleetMember
	err := ctx.RegisterResource("azure:containerservice/fleetMember:FleetMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleetMember gets an existing FleetMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleetMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetMemberState, opts ...pulumi.ResourceOption) (*FleetMember, error) {
	var resource FleetMember
	err := ctx.ReadResource("azure:containerservice/fleetMember:FleetMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FleetMember resources.
type fleetMemberState struct {
	// The group this member belongs to for multi-cluster update management.
	Group *string `pulumi:"group"`
	// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesClusterId *string `pulumi:"kubernetesClusterId"`
	// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesFleetId *string `pulumi:"kubernetesFleetId"`
	// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
	Name *string `pulumi:"name"`
}

type FleetMemberState struct {
	// The group this member belongs to for multi-cluster update management.
	Group pulumi.StringPtrInput
	// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesClusterId pulumi.StringPtrInput
	// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesFleetId pulumi.StringPtrInput
	// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
	Name pulumi.StringPtrInput
}

func (FleetMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetMemberState)(nil)).Elem()
}

type fleetMemberArgs struct {
	// The group this member belongs to for multi-cluster update management.
	Group *string `pulumi:"group"`
	// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesClusterId string `pulumi:"kubernetesClusterId"`
	// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesFleetId string `pulumi:"kubernetesFleetId"`
	// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a FleetMember resource.
type FleetMemberArgs struct {
	// The group this member belongs to for multi-cluster update management.
	Group pulumi.StringPtrInput
	// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesClusterId pulumi.StringInput
	// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
	KubernetesFleetId pulumi.StringInput
	// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
	Name pulumi.StringPtrInput
}

func (FleetMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetMemberArgs)(nil)).Elem()
}

type FleetMemberInput interface {
	pulumi.Input

	ToFleetMemberOutput() FleetMemberOutput
	ToFleetMemberOutputWithContext(ctx context.Context) FleetMemberOutput
}

func (*FleetMember) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetMember)(nil)).Elem()
}

func (i *FleetMember) ToFleetMemberOutput() FleetMemberOutput {
	return i.ToFleetMemberOutputWithContext(context.Background())
}

func (i *FleetMember) ToFleetMemberOutputWithContext(ctx context.Context) FleetMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetMemberOutput)
}

// FleetMemberArrayInput is an input type that accepts FleetMemberArray and FleetMemberArrayOutput values.
// You can construct a concrete instance of `FleetMemberArrayInput` via:
//
//	FleetMemberArray{ FleetMemberArgs{...} }
type FleetMemberArrayInput interface {
	pulumi.Input

	ToFleetMemberArrayOutput() FleetMemberArrayOutput
	ToFleetMemberArrayOutputWithContext(context.Context) FleetMemberArrayOutput
}

type FleetMemberArray []FleetMemberInput

func (FleetMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FleetMember)(nil)).Elem()
}

func (i FleetMemberArray) ToFleetMemberArrayOutput() FleetMemberArrayOutput {
	return i.ToFleetMemberArrayOutputWithContext(context.Background())
}

func (i FleetMemberArray) ToFleetMemberArrayOutputWithContext(ctx context.Context) FleetMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetMemberArrayOutput)
}

// FleetMemberMapInput is an input type that accepts FleetMemberMap and FleetMemberMapOutput values.
// You can construct a concrete instance of `FleetMemberMapInput` via:
//
//	FleetMemberMap{ "key": FleetMemberArgs{...} }
type FleetMemberMapInput interface {
	pulumi.Input

	ToFleetMemberMapOutput() FleetMemberMapOutput
	ToFleetMemberMapOutputWithContext(context.Context) FleetMemberMapOutput
}

type FleetMemberMap map[string]FleetMemberInput

func (FleetMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FleetMember)(nil)).Elem()
}

func (i FleetMemberMap) ToFleetMemberMapOutput() FleetMemberMapOutput {
	return i.ToFleetMemberMapOutputWithContext(context.Background())
}

func (i FleetMemberMap) ToFleetMemberMapOutputWithContext(ctx context.Context) FleetMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetMemberMapOutput)
}

type FleetMemberOutput struct{ *pulumi.OutputState }

func (FleetMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetMember)(nil)).Elem()
}

func (o FleetMemberOutput) ToFleetMemberOutput() FleetMemberOutput {
	return o
}

func (o FleetMemberOutput) ToFleetMemberOutputWithContext(ctx context.Context) FleetMemberOutput {
	return o
}

// The group this member belongs to for multi-cluster update management.
func (o FleetMemberOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FleetMember) pulumi.StringPtrOutput { return v.Group }).(pulumi.StringPtrOutput)
}

// The ARM resource ID of the cluster that joins the Fleet. Changing this forces a new Kubernetes Fleet Member to be created.
func (o FleetMemberOutput) KubernetesClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *FleetMember) pulumi.StringOutput { return v.KubernetesClusterId }).(pulumi.StringOutput)
}

// Specifies the Kubernetes Fleet Id within which this Kubernetes Fleet Member should exist. Changing this forces a new Kubernetes Fleet Member to be created.
func (o FleetMemberOutput) KubernetesFleetId() pulumi.StringOutput {
	return o.ApplyT(func(v *FleetMember) pulumi.StringOutput { return v.KubernetesFleetId }).(pulumi.StringOutput)
}

// Specifies the name of this Kubernetes Fleet Member. Changing this forces a new Kubernetes Fleet Member to be created.
func (o FleetMemberOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FleetMember) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type FleetMemberArrayOutput struct{ *pulumi.OutputState }

func (FleetMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FleetMember)(nil)).Elem()
}

func (o FleetMemberArrayOutput) ToFleetMemberArrayOutput() FleetMemberArrayOutput {
	return o
}

func (o FleetMemberArrayOutput) ToFleetMemberArrayOutputWithContext(ctx context.Context) FleetMemberArrayOutput {
	return o
}

func (o FleetMemberArrayOutput) Index(i pulumi.IntInput) FleetMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FleetMember {
		return vs[0].([]*FleetMember)[vs[1].(int)]
	}).(FleetMemberOutput)
}

type FleetMemberMapOutput struct{ *pulumi.OutputState }

func (FleetMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FleetMember)(nil)).Elem()
}

func (o FleetMemberMapOutput) ToFleetMemberMapOutput() FleetMemberMapOutput {
	return o
}

func (o FleetMemberMapOutput) ToFleetMemberMapOutputWithContext(ctx context.Context) FleetMemberMapOutput {
	return o
}

func (o FleetMemberMapOutput) MapIndex(k pulumi.StringInput) FleetMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FleetMember {
		return vs[0].(map[string]*FleetMember)[vs[1].(string)]
	}).(FleetMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetMemberInput)(nil)).Elem(), &FleetMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetMemberArrayInput)(nil)).Elem(), FleetMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetMemberMapInput)(nil)).Elem(), FleetMemberMap{})
	pulumi.RegisterOutputType(FleetMemberOutput{})
	pulumi.RegisterOutputType(FleetMemberArrayOutput{})
	pulumi.RegisterOutputType(FleetMemberMapOutput{})
}
