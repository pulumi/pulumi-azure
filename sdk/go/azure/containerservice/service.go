// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package containerservice

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Container Service Instance
// 
// > **NOTE:** All arguments including the client secret will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
// 
// > **DEPRECATED:** [Azure Container Service (ACS) has been deprecated by Azure in favour of Azure (Managed) Kubernetes Service (AKS)](https://azure.microsoft.com/en-us/updates/azure-container-service-will-retire-on-january-31-2020/). Support for ACS will be removed in the next major version of the AzureRM Provider (2.0) - and we **strongly recommend** you consider using Azure Kubernetes Service (AKS) for new deployments.
// 
// ##Â Example Usage (DCOS)
// 
// > This content is derived from https://github.com/terraform-providers/terraform-provider-azurerm/blob/master/website/docs/r/container_service.html.markdown.
type Service struct {
	pulumi.CustomResourceState

	// A Agent Pool Profile's block as documented below.
	AgentPoolProfile ServiceAgentPoolProfileOutput `pulumi:"agentPoolProfile"`
	// A VM Diagnostics Profile block as documented below.
	DiagnosticsProfile ServiceDiagnosticsProfileOutput `pulumi:"diagnosticsProfile"`
	// A Linux Profile block as documented below.
	LinuxProfile ServiceLinuxProfileOutput `pulumi:"linuxProfile"`
	// The location where the Container Service instance should be created. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A Master Profile block as documented below.
	MasterProfile ServiceMasterProfileOutput `pulumi:"masterProfile"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
	OrchestrationPlatform pulumi.StringOutput `pulumi:"orchestrationPlatform"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A Service Principal block as documented below.
	ServicePrincipal ServiceServicePrincipalPtrOutput `pulumi:"servicePrincipal"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil || args.AgentPoolProfile == nil {
		return nil, errors.New("missing required argument 'AgentPoolProfile'")
	}
	if args == nil || args.DiagnosticsProfile == nil {
		return nil, errors.New("missing required argument 'DiagnosticsProfile'")
	}
	if args == nil || args.LinuxProfile == nil {
		return nil, errors.New("missing required argument 'LinuxProfile'")
	}
	if args == nil || args.MasterProfile == nil {
		return nil, errors.New("missing required argument 'MasterProfile'")
	}
	if args == nil || args.OrchestrationPlatform == nil {
		return nil, errors.New("missing required argument 'OrchestrationPlatform'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ServiceArgs{}
	}
	var resource Service
	err := ctx.RegisterResource("azure:containerservice/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("azure:containerservice/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// A Agent Pool Profile's block as documented below.
	AgentPoolProfile *ServiceAgentPoolProfile `pulumi:"agentPoolProfile"`
	// A VM Diagnostics Profile block as documented below.
	DiagnosticsProfile *ServiceDiagnosticsProfile `pulumi:"diagnosticsProfile"`
	// A Linux Profile block as documented below.
	LinuxProfile *ServiceLinuxProfile `pulumi:"linuxProfile"`
	// The location where the Container Service instance should be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A Master Profile block as documented below.
	MasterProfile *ServiceMasterProfile `pulumi:"masterProfile"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `pulumi:"name"`
	// Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
	OrchestrationPlatform *string `pulumi:"orchestrationPlatform"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A Service Principal block as documented below.
	ServicePrincipal *ServiceServicePrincipal `pulumi:"servicePrincipal"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

type ServiceState struct {
	// A Agent Pool Profile's block as documented below.
	AgentPoolProfile ServiceAgentPoolProfilePtrInput
	// A VM Diagnostics Profile block as documented below.
	DiagnosticsProfile ServiceDiagnosticsProfilePtrInput
	// A Linux Profile block as documented below.
	LinuxProfile ServiceLinuxProfilePtrInput
	// The location where the Container Service instance should be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A Master Profile block as documented below.
	MasterProfile ServiceMasterProfilePtrInput
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name pulumi.StringPtrInput
	// Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
	OrchestrationPlatform pulumi.StringPtrInput
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A Service Principal block as documented below.
	ServicePrincipal ServiceServicePrincipalPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// A Agent Pool Profile's block as documented below.
	AgentPoolProfile ServiceAgentPoolProfile `pulumi:"agentPoolProfile"`
	// A VM Diagnostics Profile block as documented below.
	DiagnosticsProfile ServiceDiagnosticsProfile `pulumi:"diagnosticsProfile"`
	// A Linux Profile block as documented below.
	LinuxProfile ServiceLinuxProfile `pulumi:"linuxProfile"`
	// The location where the Container Service instance should be created. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A Master Profile block as documented below.
	MasterProfile ServiceMasterProfile `pulumi:"masterProfile"`
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name *string `pulumi:"name"`
	// Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
	OrchestrationPlatform string `pulumi:"orchestrationPlatform"`
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A Service Principal block as documented below.
	ServicePrincipal *ServiceServicePrincipal `pulumi:"servicePrincipal"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// A Agent Pool Profile's block as documented below.
	AgentPoolProfile ServiceAgentPoolProfileInput
	// A VM Diagnostics Profile block as documented below.
	DiagnosticsProfile ServiceDiagnosticsProfileInput
	// A Linux Profile block as documented below.
	LinuxProfile ServiceLinuxProfileInput
	// The location where the Container Service instance should be created. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A Master Profile block as documented below.
	MasterProfile ServiceMasterProfileInput
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name pulumi.StringPtrInput
	// Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
	OrchestrationPlatform pulumi.StringInput
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A Service Principal block as documented below.
	ServicePrincipal ServiceServicePrincipalPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

