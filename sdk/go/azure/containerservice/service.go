// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Container Service Instance
// 
// ~> **Note:** All arguments including the client secret will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).
// 
// ##Â Example Usage (DCOS)
// 
// ```hcl
// resource "azurerm_resource_group" "test" {
//   name     = "acctestRG1"
//   location = "West US"
// }
// 
// resource "azurerm_container_service" "test" {
//   name                   = "acctestcontservice1"
//   location               = "${azurerm_resource_group.test.location}"
//   resource_group_name    = "${azurerm_resource_group.test.name}"
//   orchestration_platform = "DCOS"
// 
//   master_profile {
//     count      = 1
//     dns_prefix = "acctestmaster1"
//   }
// 
//   linux_profile {
//     admin_username = "acctestuser1"
// 
//     ssh_key {
//       key_data = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCqaZoyiz1qbdOQ8xEf6uEu1cCwYowo5FHtsBhqLoDnnp7KUTEBN+L2NxRIfQ781rxV6Iq5jSav6b2Q8z5KiseOlvKA/RF2wqU0UPYqQviQhLmW6THTpmrv/YkUCuzxDpsH7DUDhZcwySLKVVe0Qm3+5N2Ta6UYH3lsDf9R9wTP2K/+vAnflKebuypNlmocIvakFWoZda18FOmsOoIVXQ8HWFNCuw9ZCunMSN62QGamCe3dL5cXlkgHYv7ekJE15IA9aOJcM7e90oeTqo+7HTcWfdu0qQqPWY5ujyMw/llas8tsXY85LFqRnr3gJ02bAscjc477+X+j/gkpFoN1QEmt terraform@demo.tld"
//     }
//   }
// 
//   agent_pool_profile {
//     name       = "default"
//     count      = 1
//     dns_prefix = "acctestagent1"
//     vm_size    = "Standard_F2"
//   }
// 
//   diagnostics_profile {
//     enabled = false
//   }
// 
//   tags {
//     Environment = "Production"
//   }
// }
// ```
type Service struct {
	s *pulumi.ResourceState
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOpt) (*Service, error) {
	if args == nil || args.AgentPoolProfile == nil {
		return nil, errors.New("missing required argument 'AgentPoolProfile'")
	}
	if args == nil || args.DiagnosticsProfile == nil {
		return nil, errors.New("missing required argument 'DiagnosticsProfile'")
	}
	if args == nil || args.LinuxProfile == nil {
		return nil, errors.New("missing required argument 'LinuxProfile'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.MasterProfile == nil {
		return nil, errors.New("missing required argument 'MasterProfile'")
	}
	if args == nil || args.OrchestrationPlatform == nil {
		return nil, errors.New("missing required argument 'OrchestrationPlatform'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["agentPoolProfile"] = nil
		inputs["diagnosticsProfile"] = nil
		inputs["linuxProfile"] = nil
		inputs["location"] = nil
		inputs["masterProfile"] = nil
		inputs["name"] = nil
		inputs["orchestrationPlatform"] = nil
		inputs["resourceGroupName"] = nil
		inputs["servicePrincipal"] = nil
		inputs["tags"] = nil
	} else {
		inputs["agentPoolProfile"] = args.AgentPoolProfile
		inputs["diagnosticsProfile"] = args.DiagnosticsProfile
		inputs["linuxProfile"] = args.LinuxProfile
		inputs["location"] = args.Location
		inputs["masterProfile"] = args.MasterProfile
		inputs["name"] = args.Name
		inputs["orchestrationPlatform"] = args.OrchestrationPlatform
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["servicePrincipal"] = args.ServicePrincipal
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("azure:containerservice/service:Service", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServiceState, opts ...pulumi.ResourceOpt) (*Service, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["agentPoolProfile"] = state.AgentPoolProfile
		inputs["diagnosticsProfile"] = state.DiagnosticsProfile
		inputs["linuxProfile"] = state.LinuxProfile
		inputs["location"] = state.Location
		inputs["masterProfile"] = state.MasterProfile
		inputs["name"] = state.Name
		inputs["orchestrationPlatform"] = state.OrchestrationPlatform
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["servicePrincipal"] = state.ServicePrincipal
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:containerservice/service:Service", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Service{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Service) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Service) ID() *pulumi.IDOutput {
	return r.s.ID
}

// One or more Agent Pool Profile's block as documented below.
func (r *Service) AgentPoolProfile() *pulumi.Output {
	return r.s.State["agentPoolProfile"]
}

// A VM Diagnostics Profile block as documented below.
func (r *Service) DiagnosticsProfile() *pulumi.Output {
	return r.s.State["diagnosticsProfile"]
}

// A Linux Profile block as documented below.
func (r *Service) LinuxProfile() *pulumi.Output {
	return r.s.State["linuxProfile"]
}

// The location where the Container Service instance should be created. Changing this forces a new resource to be created.
func (r *Service) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// A Master Profile block as documented below.
func (r *Service) MasterProfile() *pulumi.Output {
	return r.s.State["masterProfile"]
}

// Unique name of the agent pool profile in the context of the subscription and resource group.
func (r *Service) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
func (r *Service) OrchestrationPlatform() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["orchestrationPlatform"])
}

// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
func (r *Service) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// A Service Principal block as documented below.
func (r *Service) ServicePrincipal() *pulumi.Output {
	return r.s.State["servicePrincipal"]
}

// A mapping of tags to assign to the resource.
func (r *Service) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Service resources.
type ServiceState struct {
	// One or more Agent Pool Profile's block as documented below.
	AgentPoolProfile interface{}
	// A VM Diagnostics Profile block as documented below.
	DiagnosticsProfile interface{}
	// A Linux Profile block as documented below.
	LinuxProfile interface{}
	// The location where the Container Service instance should be created. Changing this forces a new resource to be created.
	Location interface{}
	// A Master Profile block as documented below.
	MasterProfile interface{}
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name interface{}
	// Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
	OrchestrationPlatform interface{}
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A Service Principal block as documented below.
	ServicePrincipal interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// One or more Agent Pool Profile's block as documented below.
	AgentPoolProfile interface{}
	// A VM Diagnostics Profile block as documented below.
	DiagnosticsProfile interface{}
	// A Linux Profile block as documented below.
	LinuxProfile interface{}
	// The location where the Container Service instance should be created. Changing this forces a new resource to be created.
	Location interface{}
	// A Master Profile block as documented below.
	MasterProfile interface{}
	// Unique name of the agent pool profile in the context of the subscription and resource group.
	Name interface{}
	// Specifies the Container Orchestration Platform to use. Currently can be either `DCOS`, `Kubernetes` or `Swarm`. Changing this forces a new resource to be created.
	OrchestrationPlatform interface{}
	// Specifies the resource group where the resource exists. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// A Service Principal block as documented below.
	ServicePrincipal interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
