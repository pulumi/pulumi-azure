// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Container Registry scope map.  Scope Maps are a preview feature only available in Premium SKU Container registries.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistry, err := containerservice.NewRegistry(ctx, "exampleRegistry", &containerservice.RegistryArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Sku:               pulumi.String("Premium"),
//				AdminEnabled:      pulumi.Bool(false),
//				Georeplications: containerservice.RegistryGeoreplicationArray{
//					&containerservice.RegistryGeoreplicationArgs{
//						Location: pulumi.String("East US"),
//					},
//					&containerservice.RegistryGeoreplicationArgs{
//						Location: pulumi.String("West Europe"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewRegistryScopeMap(ctx, "exampleRegistryScopeMap", &containerservice.RegistryScopeMapArgs{
//				ContainerRegistryName: exampleRegistry.Name,
//				ResourceGroupName:     exampleResourceGroup.Name,
//				Actions: pulumi.StringArray{
//					pulumi.String("repositories/repo1/content/read"),
//					pulumi.String("repositories/repo1/content/write"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Registries can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerservice/registryScopeMap:RegistryScopeMap example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1/scopeMaps/scopemap1
//
// ```
type RegistryScopeMap struct {
	pulumi.CustomResourceState

	// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
	Actions pulumi.StringArrayOutput `pulumi:"actions"`
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName pulumi.StringOutput `pulumi:"containerRegistryName"`
	// The description of the Container Registry.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies the name of the scope map. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
}

// NewRegistryScopeMap registers a new resource with the given unique name, arguments, and options.
func NewRegistryScopeMap(ctx *pulumi.Context,
	name string, args *RegistryScopeMapArgs, opts ...pulumi.ResourceOption) (*RegistryScopeMap, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.ContainerRegistryName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerRegistryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryScopeMap
	err := ctx.RegisterResource("azure:containerservice/registryScopeMap:RegistryScopeMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryScopeMap gets an existing RegistryScopeMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryScopeMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryScopeMapState, opts ...pulumi.ResourceOption) (*RegistryScopeMap, error) {
	var resource RegistryScopeMap
	err := ctx.ReadResource("azure:containerservice/registryScopeMap:RegistryScopeMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryScopeMap resources.
type registryScopeMapState struct {
	// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
	Actions []string `pulumi:"actions"`
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName *string `pulumi:"containerRegistryName"`
	// The description of the Container Registry.
	Description *string `pulumi:"description"`
	// Specifies the name of the scope map. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
}

type RegistryScopeMapState struct {
	// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
	Actions pulumi.StringArrayInput
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName pulumi.StringPtrInput
	// The description of the Container Registry.
	Description pulumi.StringPtrInput
	// Specifies the name of the scope map. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
}

func (RegistryScopeMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryScopeMapState)(nil)).Elem()
}

type registryScopeMapArgs struct {
	// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
	Actions []string `pulumi:"actions"`
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName string `pulumi:"containerRegistryName"`
	// The description of the Container Registry.
	Description *string `pulumi:"description"`
	// Specifies the name of the scope map. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a RegistryScopeMap resource.
type RegistryScopeMapArgs struct {
	// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
	Actions pulumi.StringArrayInput
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName pulumi.StringInput
	// The description of the Container Registry.
	Description pulumi.StringPtrInput
	// Specifies the name of the scope map. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
}

func (RegistryScopeMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryScopeMapArgs)(nil)).Elem()
}

type RegistryScopeMapInput interface {
	pulumi.Input

	ToRegistryScopeMapOutput() RegistryScopeMapOutput
	ToRegistryScopeMapOutputWithContext(ctx context.Context) RegistryScopeMapOutput
}

func (*RegistryScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryScopeMap)(nil)).Elem()
}

func (i *RegistryScopeMap) ToRegistryScopeMapOutput() RegistryScopeMapOutput {
	return i.ToRegistryScopeMapOutputWithContext(context.Background())
}

func (i *RegistryScopeMap) ToRegistryScopeMapOutputWithContext(ctx context.Context) RegistryScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryScopeMapOutput)
}

// RegistryScopeMapArrayInput is an input type that accepts RegistryScopeMapArray and RegistryScopeMapArrayOutput values.
// You can construct a concrete instance of `RegistryScopeMapArrayInput` via:
//
//	RegistryScopeMapArray{ RegistryScopeMapArgs{...} }
type RegistryScopeMapArrayInput interface {
	pulumi.Input

	ToRegistryScopeMapArrayOutput() RegistryScopeMapArrayOutput
	ToRegistryScopeMapArrayOutputWithContext(context.Context) RegistryScopeMapArrayOutput
}

type RegistryScopeMapArray []RegistryScopeMapInput

func (RegistryScopeMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryScopeMap)(nil)).Elem()
}

func (i RegistryScopeMapArray) ToRegistryScopeMapArrayOutput() RegistryScopeMapArrayOutput {
	return i.ToRegistryScopeMapArrayOutputWithContext(context.Background())
}

func (i RegistryScopeMapArray) ToRegistryScopeMapArrayOutputWithContext(ctx context.Context) RegistryScopeMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryScopeMapArrayOutput)
}

// RegistryScopeMapMapInput is an input type that accepts RegistryScopeMapMap and RegistryScopeMapMapOutput values.
// You can construct a concrete instance of `RegistryScopeMapMapInput` via:
//
//	RegistryScopeMapMap{ "key": RegistryScopeMapArgs{...} }
type RegistryScopeMapMapInput interface {
	pulumi.Input

	ToRegistryScopeMapMapOutput() RegistryScopeMapMapOutput
	ToRegistryScopeMapMapOutputWithContext(context.Context) RegistryScopeMapMapOutput
}

type RegistryScopeMapMap map[string]RegistryScopeMapInput

func (RegistryScopeMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryScopeMap)(nil)).Elem()
}

func (i RegistryScopeMapMap) ToRegistryScopeMapMapOutput() RegistryScopeMapMapOutput {
	return i.ToRegistryScopeMapMapOutputWithContext(context.Background())
}

func (i RegistryScopeMapMap) ToRegistryScopeMapMapOutputWithContext(ctx context.Context) RegistryScopeMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryScopeMapMapOutput)
}

type RegistryScopeMapOutput struct{ *pulumi.OutputState }

func (RegistryScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryScopeMap)(nil)).Elem()
}

func (o RegistryScopeMapOutput) ToRegistryScopeMapOutput() RegistryScopeMapOutput {
	return o
}

func (o RegistryScopeMapOutput) ToRegistryScopeMapOutputWithContext(ctx context.Context) RegistryScopeMapOutput {
	return o
}

// A list of actions to attach to the scope map (e.g. `repo/content/read`, `repo2/content/delete`).
func (o RegistryScopeMapOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RegistryScopeMap) pulumi.StringArrayOutput { return v.Actions }).(pulumi.StringArrayOutput)
}

// The name of the Container Registry. Changing this forces a new resource to be created.
func (o RegistryScopeMapOutput) ContainerRegistryName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryScopeMap) pulumi.StringOutput { return v.ContainerRegistryName }).(pulumi.StringOutput)
}

// The description of the Container Registry.
func (o RegistryScopeMapOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryScopeMap) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies the name of the scope map. Changing this forces a new resource to be created.
func (o RegistryScopeMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryScopeMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
func (o RegistryScopeMapOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryScopeMap) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

type RegistryScopeMapArrayOutput struct{ *pulumi.OutputState }

func (RegistryScopeMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryScopeMap)(nil)).Elem()
}

func (o RegistryScopeMapArrayOutput) ToRegistryScopeMapArrayOutput() RegistryScopeMapArrayOutput {
	return o
}

func (o RegistryScopeMapArrayOutput) ToRegistryScopeMapArrayOutputWithContext(ctx context.Context) RegistryScopeMapArrayOutput {
	return o
}

func (o RegistryScopeMapArrayOutput) Index(i pulumi.IntInput) RegistryScopeMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryScopeMap {
		return vs[0].([]*RegistryScopeMap)[vs[1].(int)]
	}).(RegistryScopeMapOutput)
}

type RegistryScopeMapMapOutput struct{ *pulumi.OutputState }

func (RegistryScopeMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryScopeMap)(nil)).Elem()
}

func (o RegistryScopeMapMapOutput) ToRegistryScopeMapMapOutput() RegistryScopeMapMapOutput {
	return o
}

func (o RegistryScopeMapMapOutput) ToRegistryScopeMapMapOutputWithContext(ctx context.Context) RegistryScopeMapMapOutput {
	return o
}

func (o RegistryScopeMapMapOutput) MapIndex(k pulumi.StringInput) RegistryScopeMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryScopeMap {
		return vs[0].(map[string]*RegistryScopeMap)[vs[1].(string)]
	}).(RegistryScopeMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryScopeMapInput)(nil)).Elem(), &RegistryScopeMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryScopeMapArrayInput)(nil)).Elem(), RegistryScopeMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryScopeMapMapInput)(nil)).Elem(), RegistryScopeMapMap{})
	pulumi.RegisterOutputType(RegistryScopeMapOutput{})
	pulumi.RegisterOutputType(RegistryScopeMapArrayOutput{})
	pulumi.RegisterOutputType(RegistryScopeMapMapOutput{})
}
