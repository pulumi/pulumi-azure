// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Container Registry Task.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistry, err := containerservice.NewRegistry(ctx, "exampleRegistry", &containerservice.RegistryArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Sku:               pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewRegistryTask(ctx, "exampleRegistryTask", &containerservice.RegistryTaskArgs{
//				ContainerRegistryId: exampleRegistry.ID(),
//				Platform: &containerservice.RegistryTaskPlatformArgs{
//					Os: pulumi.String("Linux"),
//				},
//				DockerStep: &containerservice.RegistryTaskDockerStepArgs{
//					DockerfilePath:     pulumi.String("Dockerfile"),
//					ContextPath:        pulumi.String("https://github.com/<username>/<repository>#<branch>:<folder>"),
//					ContextAccessToken: pulumi.String("<github personal access token>"),
//					ImageNames: pulumi.StringArray{
//						pulumi.String("helloworld:{{.Run.ID}}"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Registry Tasks can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerservice/registryTask:RegistryTask example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/tasks/task1
//
// ```
type RegistryTask struct {
	pulumi.CustomResourceState

	// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
	AgentPoolName pulumi.StringPtrOutput `pulumi:"agentPoolName"`
	// A `agentSetting` block as defined below.
	AgentSetting RegistryTaskAgentSettingPtrOutput `pulumi:"agentSetting"`
	// A `baseImageTrigger` block as defined below.
	BaseImageTrigger RegistryTaskBaseImageTriggerPtrOutput `pulumi:"baseImageTrigger"`
	// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
	ContainerRegistryId pulumi.StringOutput `pulumi:"containerRegistryId"`
	// A `dockerStep` block as defined below.
	DockerStep RegistryTaskDockerStepPtrOutput `pulumi:"dockerStep"`
	// Should this Container Registry Task be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// A `encodedStep` block as defined below.
	EncodedStep RegistryTaskEncodedStepPtrOutput `pulumi:"encodedStep"`
	// A `fileStep` block as defined below.
	//
	// > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
	FileStep RegistryTaskFileStepPtrOutput `pulumi:"fileStep"`
	// An `identity` block as defined below.
	Identity RegistryTaskIdentityPtrOutput `pulumi:"identity"`
	// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
	IsSystemTask pulumi.BoolPtrOutput `pulumi:"isSystemTask"`
	// The template that describes the run log artifact.
	LogTemplate pulumi.StringPtrOutput `pulumi:"logTemplate"`
	// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `platform` block as defined below.
	//
	// > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
	Platform RegistryTaskPlatformPtrOutput `pulumi:"platform"`
	// One `registryCredential` block as defined below.
	RegistryCredential RegistryTaskRegistryCredentialPtrOutput `pulumi:"registryCredential"`
	// One or more `sourceTrigger` blocks as defined below.
	SourceTriggers RegistryTaskSourceTriggerArrayOutput `pulumi:"sourceTriggers"`
	// A mapping of tags which should be assigned to the Container Registry Task.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
	TimeoutInSeconds pulumi.IntPtrOutput `pulumi:"timeoutInSeconds"`
	// One or more `timerTrigger` blocks as defined below.
	TimerTriggers RegistryTaskTimerTriggerArrayOutput `pulumi:"timerTriggers"`
}

// NewRegistryTask registers a new resource with the given unique name, arguments, and options.
func NewRegistryTask(ctx *pulumi.Context,
	name string, args *RegistryTaskArgs, opts ...pulumi.ResourceOption) (*RegistryTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerRegistryId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerRegistryId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryTask
	err := ctx.RegisterResource("azure:containerservice/registryTask:RegistryTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryTask gets an existing RegistryTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryTaskState, opts ...pulumi.ResourceOption) (*RegistryTask, error) {
	var resource RegistryTask
	err := ctx.ReadResource("azure:containerservice/registryTask:RegistryTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryTask resources.
type registryTaskState struct {
	// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// A `agentSetting` block as defined below.
	AgentSetting *RegistryTaskAgentSetting `pulumi:"agentSetting"`
	// A `baseImageTrigger` block as defined below.
	BaseImageTrigger *RegistryTaskBaseImageTrigger `pulumi:"baseImageTrigger"`
	// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
	ContainerRegistryId *string `pulumi:"containerRegistryId"`
	// A `dockerStep` block as defined below.
	DockerStep *RegistryTaskDockerStep `pulumi:"dockerStep"`
	// Should this Container Registry Task be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A `encodedStep` block as defined below.
	EncodedStep *RegistryTaskEncodedStep `pulumi:"encodedStep"`
	// A `fileStep` block as defined below.
	//
	// > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
	FileStep *RegistryTaskFileStep `pulumi:"fileStep"`
	// An `identity` block as defined below.
	Identity *RegistryTaskIdentity `pulumi:"identity"`
	// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
	IsSystemTask *bool `pulumi:"isSystemTask"`
	// The template that describes the run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
	Name *string `pulumi:"name"`
	// A `platform` block as defined below.
	//
	// > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
	Platform *RegistryTaskPlatform `pulumi:"platform"`
	// One `registryCredential` block as defined below.
	RegistryCredential *RegistryTaskRegistryCredential `pulumi:"registryCredential"`
	// One or more `sourceTrigger` blocks as defined below.
	SourceTriggers []RegistryTaskSourceTrigger `pulumi:"sourceTriggers"`
	// A mapping of tags which should be assigned to the Container Registry Task.
	Tags map[string]string `pulumi:"tags"`
	// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// One or more `timerTrigger` blocks as defined below.
	TimerTriggers []RegistryTaskTimerTrigger `pulumi:"timerTriggers"`
}

type RegistryTaskState struct {
	// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
	AgentPoolName pulumi.StringPtrInput
	// A `agentSetting` block as defined below.
	AgentSetting RegistryTaskAgentSettingPtrInput
	// A `baseImageTrigger` block as defined below.
	BaseImageTrigger RegistryTaskBaseImageTriggerPtrInput
	// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
	ContainerRegistryId pulumi.StringPtrInput
	// A `dockerStep` block as defined below.
	DockerStep RegistryTaskDockerStepPtrInput
	// Should this Container Registry Task be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// A `encodedStep` block as defined below.
	EncodedStep RegistryTaskEncodedStepPtrInput
	// A `fileStep` block as defined below.
	//
	// > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
	FileStep RegistryTaskFileStepPtrInput
	// An `identity` block as defined below.
	Identity RegistryTaskIdentityPtrInput
	// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
	IsSystemTask pulumi.BoolPtrInput
	// The template that describes the run log artifact.
	LogTemplate pulumi.StringPtrInput
	// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
	Name pulumi.StringPtrInput
	// A `platform` block as defined below.
	//
	// > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
	Platform RegistryTaskPlatformPtrInput
	// One `registryCredential` block as defined below.
	RegistryCredential RegistryTaskRegistryCredentialPtrInput
	// One or more `sourceTrigger` blocks as defined below.
	SourceTriggers RegistryTaskSourceTriggerArrayInput
	// A mapping of tags which should be assigned to the Container Registry Task.
	Tags pulumi.StringMapInput
	// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
	TimeoutInSeconds pulumi.IntPtrInput
	// One or more `timerTrigger` blocks as defined below.
	TimerTriggers RegistryTaskTimerTriggerArrayInput
}

func (RegistryTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryTaskState)(nil)).Elem()
}

type registryTaskArgs struct {
	// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
	AgentPoolName *string `pulumi:"agentPoolName"`
	// A `agentSetting` block as defined below.
	AgentSetting *RegistryTaskAgentSetting `pulumi:"agentSetting"`
	// A `baseImageTrigger` block as defined below.
	BaseImageTrigger *RegistryTaskBaseImageTrigger `pulumi:"baseImageTrigger"`
	// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
	ContainerRegistryId string `pulumi:"containerRegistryId"`
	// A `dockerStep` block as defined below.
	DockerStep *RegistryTaskDockerStep `pulumi:"dockerStep"`
	// Should this Container Registry Task be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// A `encodedStep` block as defined below.
	EncodedStep *RegistryTaskEncodedStep `pulumi:"encodedStep"`
	// A `fileStep` block as defined below.
	//
	// > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
	FileStep *RegistryTaskFileStep `pulumi:"fileStep"`
	// An `identity` block as defined below.
	Identity *RegistryTaskIdentity `pulumi:"identity"`
	// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
	IsSystemTask *bool `pulumi:"isSystemTask"`
	// The template that describes the run log artifact.
	LogTemplate *string `pulumi:"logTemplate"`
	// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
	Name *string `pulumi:"name"`
	// A `platform` block as defined below.
	//
	// > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
	Platform *RegistryTaskPlatform `pulumi:"platform"`
	// One `registryCredential` block as defined below.
	RegistryCredential *RegistryTaskRegistryCredential `pulumi:"registryCredential"`
	// One or more `sourceTrigger` blocks as defined below.
	SourceTriggers []RegistryTaskSourceTrigger `pulumi:"sourceTriggers"`
	// A mapping of tags which should be assigned to the Container Registry Task.
	Tags map[string]string `pulumi:"tags"`
	// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// One or more `timerTrigger` blocks as defined below.
	TimerTriggers []RegistryTaskTimerTrigger `pulumi:"timerTriggers"`
}

// The set of arguments for constructing a RegistryTask resource.
type RegistryTaskArgs struct {
	// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
	AgentPoolName pulumi.StringPtrInput
	// A `agentSetting` block as defined below.
	AgentSetting RegistryTaskAgentSettingPtrInput
	// A `baseImageTrigger` block as defined below.
	BaseImageTrigger RegistryTaskBaseImageTriggerPtrInput
	// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
	ContainerRegistryId pulumi.StringInput
	// A `dockerStep` block as defined below.
	DockerStep RegistryTaskDockerStepPtrInput
	// Should this Container Registry Task be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// A `encodedStep` block as defined below.
	EncodedStep RegistryTaskEncodedStepPtrInput
	// A `fileStep` block as defined below.
	//
	// > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
	FileStep RegistryTaskFileStepPtrInput
	// An `identity` block as defined below.
	Identity RegistryTaskIdentityPtrInput
	// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
	IsSystemTask pulumi.BoolPtrInput
	// The template that describes the run log artifact.
	LogTemplate pulumi.StringPtrInput
	// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
	Name pulumi.StringPtrInput
	// A `platform` block as defined below.
	//
	// > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
	Platform RegistryTaskPlatformPtrInput
	// One `registryCredential` block as defined below.
	RegistryCredential RegistryTaskRegistryCredentialPtrInput
	// One or more `sourceTrigger` blocks as defined below.
	SourceTriggers RegistryTaskSourceTriggerArrayInput
	// A mapping of tags which should be assigned to the Container Registry Task.
	Tags pulumi.StringMapInput
	// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
	TimeoutInSeconds pulumi.IntPtrInput
	// One or more `timerTrigger` blocks as defined below.
	TimerTriggers RegistryTaskTimerTriggerArrayInput
}

func (RegistryTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryTaskArgs)(nil)).Elem()
}

type RegistryTaskInput interface {
	pulumi.Input

	ToRegistryTaskOutput() RegistryTaskOutput
	ToRegistryTaskOutputWithContext(ctx context.Context) RegistryTaskOutput
}

func (*RegistryTask) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryTask)(nil)).Elem()
}

func (i *RegistryTask) ToRegistryTaskOutput() RegistryTaskOutput {
	return i.ToRegistryTaskOutputWithContext(context.Background())
}

func (i *RegistryTask) ToRegistryTaskOutputWithContext(ctx context.Context) RegistryTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTaskOutput)
}

// RegistryTaskArrayInput is an input type that accepts RegistryTaskArray and RegistryTaskArrayOutput values.
// You can construct a concrete instance of `RegistryTaskArrayInput` via:
//
//	RegistryTaskArray{ RegistryTaskArgs{...} }
type RegistryTaskArrayInput interface {
	pulumi.Input

	ToRegistryTaskArrayOutput() RegistryTaskArrayOutput
	ToRegistryTaskArrayOutputWithContext(context.Context) RegistryTaskArrayOutput
}

type RegistryTaskArray []RegistryTaskInput

func (RegistryTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryTask)(nil)).Elem()
}

func (i RegistryTaskArray) ToRegistryTaskArrayOutput() RegistryTaskArrayOutput {
	return i.ToRegistryTaskArrayOutputWithContext(context.Background())
}

func (i RegistryTaskArray) ToRegistryTaskArrayOutputWithContext(ctx context.Context) RegistryTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTaskArrayOutput)
}

// RegistryTaskMapInput is an input type that accepts RegistryTaskMap and RegistryTaskMapOutput values.
// You can construct a concrete instance of `RegistryTaskMapInput` via:
//
//	RegistryTaskMap{ "key": RegistryTaskArgs{...} }
type RegistryTaskMapInput interface {
	pulumi.Input

	ToRegistryTaskMapOutput() RegistryTaskMapOutput
	ToRegistryTaskMapOutputWithContext(context.Context) RegistryTaskMapOutput
}

type RegistryTaskMap map[string]RegistryTaskInput

func (RegistryTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryTask)(nil)).Elem()
}

func (i RegistryTaskMap) ToRegistryTaskMapOutput() RegistryTaskMapOutput {
	return i.ToRegistryTaskMapOutputWithContext(context.Background())
}

func (i RegistryTaskMap) ToRegistryTaskMapOutputWithContext(ctx context.Context) RegistryTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTaskMapOutput)
}

type RegistryTaskOutput struct{ *pulumi.OutputState }

func (RegistryTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryTask)(nil)).Elem()
}

func (o RegistryTaskOutput) ToRegistryTaskOutput() RegistryTaskOutput {
	return o
}

func (o RegistryTaskOutput) ToRegistryTaskOutputWithContext(ctx context.Context) RegistryTaskOutput {
	return o
}

// The name of the dedicated Container Registry Agent Pool for this Container Registry Task.
func (o RegistryTaskOutput) AgentPoolName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryTask) pulumi.StringPtrOutput { return v.AgentPoolName }).(pulumi.StringPtrOutput)
}

// A `agentSetting` block as defined below.
func (o RegistryTaskOutput) AgentSetting() RegistryTaskAgentSettingPtrOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskAgentSettingPtrOutput { return v.AgentSetting }).(RegistryTaskAgentSettingPtrOutput)
}

// A `baseImageTrigger` block as defined below.
func (o RegistryTaskOutput) BaseImageTrigger() RegistryTaskBaseImageTriggerPtrOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskBaseImageTriggerPtrOutput { return v.BaseImageTrigger }).(RegistryTaskBaseImageTriggerPtrOutput)
}

// The ID of the Container Registry that this Container Registry Task resides in. Changing this forces a new Container Registry Task to be created.
func (o RegistryTaskOutput) ContainerRegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryTask) pulumi.StringOutput { return v.ContainerRegistryId }).(pulumi.StringOutput)
}

// A `dockerStep` block as defined below.
func (o RegistryTaskOutput) DockerStep() RegistryTaskDockerStepPtrOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskDockerStepPtrOutput { return v.DockerStep }).(RegistryTaskDockerStepPtrOutput)
}

// Should this Container Registry Task be enabled? Defaults to `true`.
func (o RegistryTaskOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistryTask) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A `encodedStep` block as defined below.
func (o RegistryTaskOutput) EncodedStep() RegistryTaskEncodedStepPtrOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskEncodedStepPtrOutput { return v.EncodedStep }).(RegistryTaskEncodedStepPtrOutput)
}

// A `fileStep` block as defined below.
//
// > **NOTE:** For non-system task (when `isSystemTask` is set to `false`), one and only one of the `dockerStep`, `encodedStep` and `fileStep` should be specified.
func (o RegistryTaskOutput) FileStep() RegistryTaskFileStepPtrOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskFileStepPtrOutput { return v.FileStep }).(RegistryTaskFileStepPtrOutput)
}

// An `identity` block as defined below.
func (o RegistryTaskOutput) Identity() RegistryTaskIdentityPtrOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskIdentityPtrOutput { return v.Identity }).(RegistryTaskIdentityPtrOutput)
}

// Whether this Container Registry Task is a system task. Changing this forces a new Container Registry Task to be created. Defaults to `false`.
func (o RegistryTaskOutput) IsSystemTask() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistryTask) pulumi.BoolPtrOutput { return v.IsSystemTask }).(pulumi.BoolPtrOutput)
}

// The template that describes the run log artifact.
func (o RegistryTaskOutput) LogTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RegistryTask) pulumi.StringPtrOutput { return v.LogTemplate }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Container Registry Task. Changing this forces a new Container Registry Task to be created.
func (o RegistryTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryTask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `platform` block as defined below.
//
// > **NOTE:** The `platform` is required for non-system task (when `isSystemTask` is set to `false`).
func (o RegistryTaskOutput) Platform() RegistryTaskPlatformPtrOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskPlatformPtrOutput { return v.Platform }).(RegistryTaskPlatformPtrOutput)
}

// One `registryCredential` block as defined below.
func (o RegistryTaskOutput) RegistryCredential() RegistryTaskRegistryCredentialPtrOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskRegistryCredentialPtrOutput { return v.RegistryCredential }).(RegistryTaskRegistryCredentialPtrOutput)
}

// One or more `sourceTrigger` blocks as defined below.
func (o RegistryTaskOutput) SourceTriggers() RegistryTaskSourceTriggerArrayOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskSourceTriggerArrayOutput { return v.SourceTriggers }).(RegistryTaskSourceTriggerArrayOutput)
}

// A mapping of tags which should be assigned to the Container Registry Task.
func (o RegistryTaskOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *RegistryTask) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The timeout of this Container Registry Task in seconds. The valid range lies from 300 to 28800. Defaults to `3600`.
func (o RegistryTaskOutput) TimeoutInSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RegistryTask) pulumi.IntPtrOutput { return v.TimeoutInSeconds }).(pulumi.IntPtrOutput)
}

// One or more `timerTrigger` blocks as defined below.
func (o RegistryTaskOutput) TimerTriggers() RegistryTaskTimerTriggerArrayOutput {
	return o.ApplyT(func(v *RegistryTask) RegistryTaskTimerTriggerArrayOutput { return v.TimerTriggers }).(RegistryTaskTimerTriggerArrayOutput)
}

type RegistryTaskArrayOutput struct{ *pulumi.OutputState }

func (RegistryTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryTask)(nil)).Elem()
}

func (o RegistryTaskArrayOutput) ToRegistryTaskArrayOutput() RegistryTaskArrayOutput {
	return o
}

func (o RegistryTaskArrayOutput) ToRegistryTaskArrayOutputWithContext(ctx context.Context) RegistryTaskArrayOutput {
	return o
}

func (o RegistryTaskArrayOutput) Index(i pulumi.IntInput) RegistryTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryTask {
		return vs[0].([]*RegistryTask)[vs[1].(int)]
	}).(RegistryTaskOutput)
}

type RegistryTaskMapOutput struct{ *pulumi.OutputState }

func (RegistryTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryTask)(nil)).Elem()
}

func (o RegistryTaskMapOutput) ToRegistryTaskMapOutput() RegistryTaskMapOutput {
	return o
}

func (o RegistryTaskMapOutput) ToRegistryTaskMapOutputWithContext(ctx context.Context) RegistryTaskMapOutput {
	return o
}

func (o RegistryTaskMapOutput) MapIndex(k pulumi.StringInput) RegistryTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryTask {
		return vs[0].(map[string]*RegistryTask)[vs[1].(string)]
	}).(RegistryTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTaskInput)(nil)).Elem(), &RegistryTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTaskArrayInput)(nil)).Elem(), RegistryTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTaskMapInput)(nil)).Elem(), RegistryTaskMap{})
	pulumi.RegisterOutputType(RegistryTaskOutput{})
	pulumi.RegisterOutputType(RegistryTaskArrayOutput{})
	pulumi.RegisterOutputType(RegistryTaskMapOutput{})
}
