// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Container Registry scope map.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/containerservice"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		example, err := containerservice.LookupRegistryScopeMap(ctx, &containerservice.LookupRegistryScopeMapArgs{
// 			Name:                  "example-scope-map",
// 			ResourceGroupName:     "example-resource-group",
// 			ContainerRegistryName: "example-registry",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("actions", example.Actions)
// 		return nil
// 	})
// }
// ```
func LookupRegistryScopeMap(ctx *pulumi.Context, args *LookupRegistryScopeMapArgs, opts ...pulumi.InvokeOption) (*LookupRegistryScopeMapResult, error) {
	var rv LookupRegistryScopeMapResult
	err := ctx.Invoke("azure:containerservice/getRegistryScopeMap:getRegistryScopeMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRegistryScopeMap.
type LookupRegistryScopeMapArgs struct {
	// The Name of the Container Registry where the token exists.
	ContainerRegistryName string `pulumi:"containerRegistryName"`
	// The name of the Container Registry token.
	Name string `pulumi:"name"`
	// The Name of the Resource Group where this Container Registry token exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getRegistryScopeMap.
type LookupRegistryScopeMapResult struct {
	// The actions for the Scope Map.
	Actions               []string `pulumi:"actions"`
	ContainerRegistryName string   `pulumi:"containerRegistryName"`
	Description           string   `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id                string `pulumi:"id"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

func LookupRegistryScopeMapOutput(ctx *pulumi.Context, args LookupRegistryScopeMapOutputArgs, opts ...pulumi.InvokeOption) LookupRegistryScopeMapResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRegistryScopeMapResult, error) {
			args := v.(LookupRegistryScopeMapArgs)
			r, err := LookupRegistryScopeMap(ctx, &args, opts...)
			return *r, err
		}).(LookupRegistryScopeMapResultOutput)
}

// A collection of arguments for invoking getRegistryScopeMap.
type LookupRegistryScopeMapOutputArgs struct {
	// The Name of the Container Registry where the token exists.
	ContainerRegistryName pulumi.StringInput `pulumi:"containerRegistryName"`
	// The name of the Container Registry token.
	Name pulumi.StringInput `pulumi:"name"`
	// The Name of the Resource Group where this Container Registry token exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupRegistryScopeMapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryScopeMapArgs)(nil)).Elem()
}

// A collection of values returned by getRegistryScopeMap.
type LookupRegistryScopeMapResultOutput struct{ *pulumi.OutputState }

func (LookupRegistryScopeMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRegistryScopeMapResult)(nil)).Elem()
}

func (o LookupRegistryScopeMapResultOutput) ToLookupRegistryScopeMapResultOutput() LookupRegistryScopeMapResultOutput {
	return o
}

func (o LookupRegistryScopeMapResultOutput) ToLookupRegistryScopeMapResultOutputWithContext(ctx context.Context) LookupRegistryScopeMapResultOutput {
	return o
}

// The actions for the Scope Map.
func (o LookupRegistryScopeMapResultOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupRegistryScopeMapResult) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

func (o LookupRegistryScopeMapResultOutput) ContainerRegistryName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryScopeMapResult) string { return v.ContainerRegistryName }).(pulumi.StringOutput)
}

func (o LookupRegistryScopeMapResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryScopeMapResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupRegistryScopeMapResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryScopeMapResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRegistryScopeMapResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryScopeMapResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRegistryScopeMapResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRegistryScopeMapResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRegistryScopeMapResultOutput{})
}
