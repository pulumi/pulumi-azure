// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <!-- Note: This documentation is generated. Any manual changes will be overwritten -->
//
// Manages a Kubernetes Fleet Manager.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewKubernetesFleetManager(ctx, "exampleKubernetesFleetManager", &containerservice.KubernetesFleetManagerArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Blocks Reference
//
// ### `hubProfile` Block
//
// The `hubProfile` block supports the following arguments:
//
// * `dnsPrefix` - (Required)
//
// In addition to the arguments defined above, the `hubProfile` block exports the following attributes:
//
// * `fqdn` -
// * `kubernetesVersion` -
//
// ## Import
//
// An existing Kubernetes Fleet Manager can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerservice/kubernetesFleetManager:KubernetesFleetManager example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}
//
// ```
//
//   - Where `{subscriptionId}` is the ID of the Azure Subscription where the Kubernetes Fleet Manager exists. For example `12345678-1234-9876-4563-123456789012`. * Where `{resourceGroupName}` is the name of Resource Group where this Kubernetes Fleet Manager exists. For example `example-resource-group`. * Where `{fleetName}` is the name of the Fleet. For example `fleetValue`.
type KubernetesFleetManager struct {
	pulumi.CustomResourceState

	// A `hubProfile` block as defined below. The FleetHubProfile configures the Fleet's hub. Changing this forces a new Kubernetes Fleet Manager to be created.
	HubProfile KubernetesFleetManagerHubProfilePtrOutput `pulumi:"hubProfile"`
	// The Azure Region where the Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of this Kubernetes Fleet Manager. Changing this forces a new Kubernetes Fleet Manager to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Kubernetes Fleet Manager.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewKubernetesFleetManager registers a new resource with the given unique name, arguments, and options.
func NewKubernetesFleetManager(ctx *pulumi.Context,
	name string, args *KubernetesFleetManagerArgs, opts ...pulumi.ResourceOption) (*KubernetesFleetManager, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KubernetesFleetManager
	err := ctx.RegisterResource("azure:containerservice/kubernetesFleetManager:KubernetesFleetManager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKubernetesFleetManager gets an existing KubernetesFleetManager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKubernetesFleetManager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KubernetesFleetManagerState, opts ...pulumi.ResourceOption) (*KubernetesFleetManager, error) {
	var resource KubernetesFleetManager
	err := ctx.ReadResource("azure:containerservice/kubernetesFleetManager:KubernetesFleetManager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KubernetesFleetManager resources.
type kubernetesFleetManagerState struct {
	// A `hubProfile` block as defined below. The FleetHubProfile configures the Fleet's hub. Changing this forces a new Kubernetes Fleet Manager to be created.
	HubProfile *KubernetesFleetManagerHubProfile `pulumi:"hubProfile"`
	// The Azure Region where the Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Kubernetes Fleet Manager. Changing this forces a new Kubernetes Fleet Manager to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Kubernetes Fleet Manager.
	Tags map[string]string `pulumi:"tags"`
}

type KubernetesFleetManagerState struct {
	// A `hubProfile` block as defined below. The FleetHubProfile configures the Fleet's hub. Changing this forces a new Kubernetes Fleet Manager to be created.
	HubProfile KubernetesFleetManagerHubProfilePtrInput
	// The Azure Region where the Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Kubernetes Fleet Manager. Changing this forces a new Kubernetes Fleet Manager to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the Kubernetes Fleet Manager.
	Tags pulumi.StringMapInput
}

func (KubernetesFleetManagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesFleetManagerState)(nil)).Elem()
}

type kubernetesFleetManagerArgs struct {
	// A `hubProfile` block as defined below. The FleetHubProfile configures the Fleet's hub. Changing this forces a new Kubernetes Fleet Manager to be created.
	HubProfile *KubernetesFleetManagerHubProfile `pulumi:"hubProfile"`
	// The Azure Region where the Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of this Kubernetes Fleet Manager. Changing this forces a new Kubernetes Fleet Manager to be created.
	Name *string `pulumi:"name"`
	// Specifies the name of the Resource Group within which this Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags which should be assigned to the Kubernetes Fleet Manager.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a KubernetesFleetManager resource.
type KubernetesFleetManagerArgs struct {
	// A `hubProfile` block as defined below. The FleetHubProfile configures the Fleet's hub. Changing this forces a new Kubernetes Fleet Manager to be created.
	HubProfile KubernetesFleetManagerHubProfilePtrInput
	// The Azure Region where the Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of this Kubernetes Fleet Manager. Changing this forces a new Kubernetes Fleet Manager to be created.
	Name pulumi.StringPtrInput
	// Specifies the name of the Resource Group within which this Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
	ResourceGroupName pulumi.StringInput
	// A mapping of tags which should be assigned to the Kubernetes Fleet Manager.
	Tags pulumi.StringMapInput
}

func (KubernetesFleetManagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kubernetesFleetManagerArgs)(nil)).Elem()
}

type KubernetesFleetManagerInput interface {
	pulumi.Input

	ToKubernetesFleetManagerOutput() KubernetesFleetManagerOutput
	ToKubernetesFleetManagerOutputWithContext(ctx context.Context) KubernetesFleetManagerOutput
}

func (*KubernetesFleetManager) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesFleetManager)(nil)).Elem()
}

func (i *KubernetesFleetManager) ToKubernetesFleetManagerOutput() KubernetesFleetManagerOutput {
	return i.ToKubernetesFleetManagerOutputWithContext(context.Background())
}

func (i *KubernetesFleetManager) ToKubernetesFleetManagerOutputWithContext(ctx context.Context) KubernetesFleetManagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesFleetManagerOutput)
}

// KubernetesFleetManagerArrayInput is an input type that accepts KubernetesFleetManagerArray and KubernetesFleetManagerArrayOutput values.
// You can construct a concrete instance of `KubernetesFleetManagerArrayInput` via:
//
//	KubernetesFleetManagerArray{ KubernetesFleetManagerArgs{...} }
type KubernetesFleetManagerArrayInput interface {
	pulumi.Input

	ToKubernetesFleetManagerArrayOutput() KubernetesFleetManagerArrayOutput
	ToKubernetesFleetManagerArrayOutputWithContext(context.Context) KubernetesFleetManagerArrayOutput
}

type KubernetesFleetManagerArray []KubernetesFleetManagerInput

func (KubernetesFleetManagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesFleetManager)(nil)).Elem()
}

func (i KubernetesFleetManagerArray) ToKubernetesFleetManagerArrayOutput() KubernetesFleetManagerArrayOutput {
	return i.ToKubernetesFleetManagerArrayOutputWithContext(context.Background())
}

func (i KubernetesFleetManagerArray) ToKubernetesFleetManagerArrayOutputWithContext(ctx context.Context) KubernetesFleetManagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesFleetManagerArrayOutput)
}

// KubernetesFleetManagerMapInput is an input type that accepts KubernetesFleetManagerMap and KubernetesFleetManagerMapOutput values.
// You can construct a concrete instance of `KubernetesFleetManagerMapInput` via:
//
//	KubernetesFleetManagerMap{ "key": KubernetesFleetManagerArgs{...} }
type KubernetesFleetManagerMapInput interface {
	pulumi.Input

	ToKubernetesFleetManagerMapOutput() KubernetesFleetManagerMapOutput
	ToKubernetesFleetManagerMapOutputWithContext(context.Context) KubernetesFleetManagerMapOutput
}

type KubernetesFleetManagerMap map[string]KubernetesFleetManagerInput

func (KubernetesFleetManagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesFleetManager)(nil)).Elem()
}

func (i KubernetesFleetManagerMap) ToKubernetesFleetManagerMapOutput() KubernetesFleetManagerMapOutput {
	return i.ToKubernetesFleetManagerMapOutputWithContext(context.Background())
}

func (i KubernetesFleetManagerMap) ToKubernetesFleetManagerMapOutputWithContext(ctx context.Context) KubernetesFleetManagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KubernetesFleetManagerMapOutput)
}

type KubernetesFleetManagerOutput struct{ *pulumi.OutputState }

func (KubernetesFleetManagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KubernetesFleetManager)(nil)).Elem()
}

func (o KubernetesFleetManagerOutput) ToKubernetesFleetManagerOutput() KubernetesFleetManagerOutput {
	return o
}

func (o KubernetesFleetManagerOutput) ToKubernetesFleetManagerOutputWithContext(ctx context.Context) KubernetesFleetManagerOutput {
	return o
}

// A `hubProfile` block as defined below. The FleetHubProfile configures the Fleet's hub. Changing this forces a new Kubernetes Fleet Manager to be created.
func (o KubernetesFleetManagerOutput) HubProfile() KubernetesFleetManagerHubProfilePtrOutput {
	return o.ApplyT(func(v *KubernetesFleetManager) KubernetesFleetManagerHubProfilePtrOutput { return v.HubProfile }).(KubernetesFleetManagerHubProfilePtrOutput)
}

// The Azure Region where the Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
func (o KubernetesFleetManagerOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesFleetManager) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of this Kubernetes Fleet Manager. Changing this forces a new Kubernetes Fleet Manager to be created.
func (o KubernetesFleetManagerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesFleetManager) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specifies the name of the Resource Group within which this Kubernetes Fleet Manager should exist. Changing this forces a new Kubernetes Fleet Manager to be created.
func (o KubernetesFleetManagerOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *KubernetesFleetManager) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags which should be assigned to the Kubernetes Fleet Manager.
func (o KubernetesFleetManagerOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *KubernetesFleetManager) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type KubernetesFleetManagerArrayOutput struct{ *pulumi.OutputState }

func (KubernetesFleetManagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KubernetesFleetManager)(nil)).Elem()
}

func (o KubernetesFleetManagerArrayOutput) ToKubernetesFleetManagerArrayOutput() KubernetesFleetManagerArrayOutput {
	return o
}

func (o KubernetesFleetManagerArrayOutput) ToKubernetesFleetManagerArrayOutputWithContext(ctx context.Context) KubernetesFleetManagerArrayOutput {
	return o
}

func (o KubernetesFleetManagerArrayOutput) Index(i pulumi.IntInput) KubernetesFleetManagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KubernetesFleetManager {
		return vs[0].([]*KubernetesFleetManager)[vs[1].(int)]
	}).(KubernetesFleetManagerOutput)
}

type KubernetesFleetManagerMapOutput struct{ *pulumi.OutputState }

func (KubernetesFleetManagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KubernetesFleetManager)(nil)).Elem()
}

func (o KubernetesFleetManagerMapOutput) ToKubernetesFleetManagerMapOutput() KubernetesFleetManagerMapOutput {
	return o
}

func (o KubernetesFleetManagerMapOutput) ToKubernetesFleetManagerMapOutputWithContext(ctx context.Context) KubernetesFleetManagerMapOutput {
	return o
}

func (o KubernetesFleetManagerMapOutput) MapIndex(k pulumi.StringInput) KubernetesFleetManagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KubernetesFleetManager {
		return vs[0].(map[string]*KubernetesFleetManager)[vs[1].(string)]
	}).(KubernetesFleetManagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesFleetManagerInput)(nil)).Elem(), &KubernetesFleetManager{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesFleetManagerArrayInput)(nil)).Elem(), KubernetesFleetManagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KubernetesFleetManagerMapInput)(nil)).Elem(), KubernetesFleetManagerMap{})
	pulumi.RegisterOutputType(KubernetesFleetManagerOutput{})
	pulumi.RegisterOutputType(KubernetesFleetManagerArrayOutput{})
	pulumi.RegisterOutputType(KubernetesFleetManagerMapOutput{})
}
