// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Kubernetes Cluster Node Pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := containerservice.GetClusterNodePool(ctx, &containerservice.GetClusterNodePoolArgs{
//				Name:                  "existing",
//				KubernetesClusterName: "existing-cluster",
//				ResourceGroupName:     "existing-resource-group",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
func GetClusterNodePool(ctx *pulumi.Context, args *GetClusterNodePoolArgs, opts ...pulumi.InvokeOption) (*GetClusterNodePoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClusterNodePoolResult
	err := ctx.Invoke("azure:containerservice/getClusterNodePool:getClusterNodePool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClusterNodePool.
type GetClusterNodePoolArgs struct {
	// The Name of the Kubernetes Cluster where this Node Pool is located.
	KubernetesClusterName string `pulumi:"kubernetesClusterName"`
	// The name of this Kubernetes Cluster Node Pool.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Kubernetes Cluster exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getClusterNodePool.
type GetClusterNodePoolResult struct {
	// Does this Node Pool have Auto-Scaling enabled?
	EnableAutoScaling bool `pulumi:"enableAutoScaling"`
	// Do nodes in this Node Pool have a Public IP Address?
	EnableNodePublicIp bool `pulumi:"enableNodePublicIp"`
	// The eviction policy used for Virtual Machines in the Virtual Machine Scale Set, when `priority` is set to `Spot`.
	EvictionPolicy string `pulumi:"evictionPolicy"`
	// The provider-assigned unique ID for this managed resource.
	Id                    string `pulumi:"id"`
	KubernetesClusterName string `pulumi:"kubernetesClusterName"`
	// The maximum number of Nodes allowed when auto-scaling is enabled.
	MaxCount int `pulumi:"maxCount"`
	// The maximum number of Pods allowed on each Node in this Node Pool.
	MaxPods int `pulumi:"maxPods"`
	// The minimum number of Nodes allowed when auto-scaling is enabled.
	MinCount int `pulumi:"minCount"`
	// The Mode for this Node Pool, specifying how these Nodes should be used (for either System or User resources).
	Mode string `pulumi:"mode"`
	Name string `pulumi:"name"`
	// The current number of Nodes in the Node Pool.
	NodeCount int `pulumi:"nodeCount"`
	// A map of Kubernetes Labels applied to each Node in this Node Pool.
	NodeLabels map[string]string `pulumi:"nodeLabels"`
	// Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
	NodePublicIpPrefixId string `pulumi:"nodePublicIpPrefixId"`
	// A map of Kubernetes Taints applied to each Node in this Node Pool.
	NodeTaints []string `pulumi:"nodeTaints"`
	// The version of Kubernetes configured on each Node in this Node Pool.
	OrchestratorVersion string `pulumi:"orchestratorVersion"`
	// The size of the OS Disk on each Node in this Node Pool.
	OsDiskSizeGb int `pulumi:"osDiskSizeGb"`
	// The type of the OS Disk on each Node in this Node Pool.
	OsDiskType string `pulumi:"osDiskType"`
	// The operating system used on each Node in this Node Pool.
	OsType string `pulumi:"osType"`
	// The priority of the Virtual Machines in the Virtual Machine Scale Set backing this Node Pool.
	Priority string `pulumi:"priority"`
	// The ID of the Proximity Placement Group where the Virtual Machine Scale Set backing this Node Pool will be placed.
	ProximityPlacementGroupId string `pulumi:"proximityPlacementGroupId"`
	ResourceGroupName         string `pulumi:"resourceGroupName"`
	// The maximum price being paid for Virtual Machines in this Scale Set. `-1` means the current on-demand price for a Virtual Machine.
	SpotMaxPrice float64 `pulumi:"spotMaxPrice"`
	// A mapping of tags assigned to the Kubernetes Cluster Node Pool.
	Tags map[string]string `pulumi:"tags"`
	// A `upgradeSettings` block as documented below.
	UpgradeSettings []GetClusterNodePoolUpgradeSetting `pulumi:"upgradeSettings"`
	// The size of the Virtual Machines used in the Virtual Machine Scale Set backing this Node Pool.
	VmSize string `pulumi:"vmSize"`
	// The ID of the Subnet in which this Node Pool exists.
	VnetSubnetId string `pulumi:"vnetSubnetId"`
	// A list of the Availability Zones where the Nodes in this Node Pool exist.
	Zones []string `pulumi:"zones"`
}

func GetClusterNodePoolOutput(ctx *pulumi.Context, args GetClusterNodePoolOutputArgs, opts ...pulumi.InvokeOption) GetClusterNodePoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetClusterNodePoolResult, error) {
			args := v.(GetClusterNodePoolArgs)
			r, err := GetClusterNodePool(ctx, &args, opts...)
			var s GetClusterNodePoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetClusterNodePoolResultOutput)
}

// A collection of arguments for invoking getClusterNodePool.
type GetClusterNodePoolOutputArgs struct {
	// The Name of the Kubernetes Cluster where this Node Pool is located.
	KubernetesClusterName pulumi.StringInput `pulumi:"kubernetesClusterName"`
	// The name of this Kubernetes Cluster Node Pool.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Kubernetes Cluster exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (GetClusterNodePoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterNodePoolArgs)(nil)).Elem()
}

// A collection of values returned by getClusterNodePool.
type GetClusterNodePoolResultOutput struct{ *pulumi.OutputState }

func (GetClusterNodePoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClusterNodePoolResult)(nil)).Elem()
}

func (o GetClusterNodePoolResultOutput) ToGetClusterNodePoolResultOutput() GetClusterNodePoolResultOutput {
	return o
}

func (o GetClusterNodePoolResultOutput) ToGetClusterNodePoolResultOutputWithContext(ctx context.Context) GetClusterNodePoolResultOutput {
	return o
}

// Does this Node Pool have Auto-Scaling enabled?
func (o GetClusterNodePoolResultOutput) EnableAutoScaling() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) bool { return v.EnableAutoScaling }).(pulumi.BoolOutput)
}

// Do nodes in this Node Pool have a Public IP Address?
func (o GetClusterNodePoolResultOutput) EnableNodePublicIp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) bool { return v.EnableNodePublicIp }).(pulumi.BoolOutput)
}

// The eviction policy used for Virtual Machines in the Virtual Machine Scale Set, when `priority` is set to `Spot`.
func (o GetClusterNodePoolResultOutput) EvictionPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.EvictionPolicy }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetClusterNodePoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClusterNodePoolResultOutput) KubernetesClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.KubernetesClusterName }).(pulumi.StringOutput)
}

// The maximum number of Nodes allowed when auto-scaling is enabled.
func (o GetClusterNodePoolResultOutput) MaxCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) int { return v.MaxCount }).(pulumi.IntOutput)
}

// The maximum number of Pods allowed on each Node in this Node Pool.
func (o GetClusterNodePoolResultOutput) MaxPods() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) int { return v.MaxPods }).(pulumi.IntOutput)
}

// The minimum number of Nodes allowed when auto-scaling is enabled.
func (o GetClusterNodePoolResultOutput) MinCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) int { return v.MinCount }).(pulumi.IntOutput)
}

// The Mode for this Node Pool, specifying how these Nodes should be used (for either System or User resources).
func (o GetClusterNodePoolResultOutput) Mode() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.Mode }).(pulumi.StringOutput)
}

func (o GetClusterNodePoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// The current number of Nodes in the Node Pool.
func (o GetClusterNodePoolResultOutput) NodeCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) int { return v.NodeCount }).(pulumi.IntOutput)
}

// A map of Kubernetes Labels applied to each Node in this Node Pool.
func (o GetClusterNodePoolResultOutput) NodeLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) map[string]string { return v.NodeLabels }).(pulumi.StringMapOutput)
}

// Resource ID for the Public IP Addresses Prefix for the nodes in this Agent Pool.
func (o GetClusterNodePoolResultOutput) NodePublicIpPrefixId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.NodePublicIpPrefixId }).(pulumi.StringOutput)
}

// A map of Kubernetes Taints applied to each Node in this Node Pool.
func (o GetClusterNodePoolResultOutput) NodeTaints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) []string { return v.NodeTaints }).(pulumi.StringArrayOutput)
}

// The version of Kubernetes configured on each Node in this Node Pool.
func (o GetClusterNodePoolResultOutput) OrchestratorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.OrchestratorVersion }).(pulumi.StringOutput)
}

// The size of the OS Disk on each Node in this Node Pool.
func (o GetClusterNodePoolResultOutput) OsDiskSizeGb() pulumi.IntOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) int { return v.OsDiskSizeGb }).(pulumi.IntOutput)
}

// The type of the OS Disk on each Node in this Node Pool.
func (o GetClusterNodePoolResultOutput) OsDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.OsDiskType }).(pulumi.StringOutput)
}

// The operating system used on each Node in this Node Pool.
func (o GetClusterNodePoolResultOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.OsType }).(pulumi.StringOutput)
}

// The priority of the Virtual Machines in the Virtual Machine Scale Set backing this Node Pool.
func (o GetClusterNodePoolResultOutput) Priority() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.Priority }).(pulumi.StringOutput)
}

// The ID of the Proximity Placement Group where the Virtual Machine Scale Set backing this Node Pool will be placed.
func (o GetClusterNodePoolResultOutput) ProximityPlacementGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.ProximityPlacementGroupId }).(pulumi.StringOutput)
}

func (o GetClusterNodePoolResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The maximum price being paid for Virtual Machines in this Scale Set. `-1` means the current on-demand price for a Virtual Machine.
func (o GetClusterNodePoolResultOutput) SpotMaxPrice() pulumi.Float64Output {
	return o.ApplyT(func(v GetClusterNodePoolResult) float64 { return v.SpotMaxPrice }).(pulumi.Float64Output)
}

// A mapping of tags assigned to the Kubernetes Cluster Node Pool.
func (o GetClusterNodePoolResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// A `upgradeSettings` block as documented below.
func (o GetClusterNodePoolResultOutput) UpgradeSettings() GetClusterNodePoolUpgradeSettingArrayOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) []GetClusterNodePoolUpgradeSetting { return v.UpgradeSettings }).(GetClusterNodePoolUpgradeSettingArrayOutput)
}

// The size of the Virtual Machines used in the Virtual Machine Scale Set backing this Node Pool.
func (o GetClusterNodePoolResultOutput) VmSize() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.VmSize }).(pulumi.StringOutput)
}

// The ID of the Subnet in which this Node Pool exists.
func (o GetClusterNodePoolResultOutput) VnetSubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) string { return v.VnetSubnetId }).(pulumi.StringOutput)
}

// A list of the Availability Zones where the Nodes in this Node Pool exist.
func (o GetClusterNodePoolResultOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClusterNodePoolResult) []string { return v.Zones }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetClusterNodePoolResultOutput{})
}
