// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an Azure Container Registry token. Tokens are a preview feature only available in Premium SKU Container registries.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistry, err := containerservice.NewRegistry(ctx, "exampleRegistry", &containerservice.RegistryArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Sku:               pulumi.String("Premium"),
//				AdminEnabled:      pulumi.Bool(false),
//				Georeplications: containerservice.RegistryGeoreplicationArray{
//					&containerservice.RegistryGeoreplicationArgs{
//						Location: pulumi.String("East US"),
//					},
//					&containerservice.RegistryGeoreplicationArgs{
//						Location: pulumi.String("West Europe"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistryScopeMap, err := containerservice.NewRegistryScopeMap(ctx, "exampleRegistryScopeMap", &containerservice.RegistryScopeMapArgs{
//				ContainerRegistryName: exampleRegistry.Name,
//				ResourceGroupName:     exampleResourceGroup.Name,
//				Actions: pulumi.StringArray{
//					pulumi.String("repositories/repo1/content/read"),
//					pulumi.String("repositories/repo1/content/write"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewRegistryToken(ctx, "exampleRegistryToken", &containerservice.RegistryTokenArgs{
//				ContainerRegistryName: exampleRegistry.Name,
//				ResourceGroupName:     exampleResourceGroup.Name,
//				ScopeMapId:            exampleRegistryScopeMap.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Registries can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerservice/registryToken:RegistryToken example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ContainerRegistry/registries/myregistry1/tokens/token1
//
// ```
type RegistryToken struct {
	pulumi.CustomResourceState

	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName pulumi.StringOutput `pulumi:"containerRegistryName"`
	// Should the Container Registry token be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Specifies the name of the token. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The ID of the Container Registry Scope Map associated with the token.
	ScopeMapId pulumi.StringOutput `pulumi:"scopeMapId"`
}

// NewRegistryToken registers a new resource with the given unique name, arguments, and options.
func NewRegistryToken(ctx *pulumi.Context,
	name string, args *RegistryTokenArgs, opts ...pulumi.ResourceOption) (*RegistryToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerRegistryName == nil {
		return nil, errors.New("invalid value for required argument 'ContainerRegistryName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.ScopeMapId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeMapId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryToken
	err := ctx.RegisterResource("azure:containerservice/registryToken:RegistryToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryToken gets an existing RegistryToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryTokenState, opts ...pulumi.ResourceOption) (*RegistryToken, error) {
	var resource RegistryToken
	err := ctx.ReadResource("azure:containerservice/registryToken:RegistryToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryToken resources.
type registryTokenState struct {
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName *string `pulumi:"containerRegistryName"`
	// Should the Container Registry token be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the name of the token. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The ID of the Container Registry Scope Map associated with the token.
	ScopeMapId *string `pulumi:"scopeMapId"`
}

type RegistryTokenState struct {
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName pulumi.StringPtrInput
	// Should the Container Registry token be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Specifies the name of the token. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The ID of the Container Registry Scope Map associated with the token.
	ScopeMapId pulumi.StringPtrInput
}

func (RegistryTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryTokenState)(nil)).Elem()
}

type registryTokenArgs struct {
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName string `pulumi:"containerRegistryName"`
	// Should the Container Registry token be enabled? Defaults to `true`.
	Enabled *bool `pulumi:"enabled"`
	// Specifies the name of the token. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The ID of the Container Registry Scope Map associated with the token.
	ScopeMapId string `pulumi:"scopeMapId"`
}

// The set of arguments for constructing a RegistryToken resource.
type RegistryTokenArgs struct {
	// The name of the Container Registry. Changing this forces a new resource to be created.
	ContainerRegistryName pulumi.StringInput
	// Should the Container Registry token be enabled? Defaults to `true`.
	Enabled pulumi.BoolPtrInput
	// Specifies the name of the token. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// The ID of the Container Registry Scope Map associated with the token.
	ScopeMapId pulumi.StringInput
}

func (RegistryTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryTokenArgs)(nil)).Elem()
}

type RegistryTokenInput interface {
	pulumi.Input

	ToRegistryTokenOutput() RegistryTokenOutput
	ToRegistryTokenOutputWithContext(ctx context.Context) RegistryTokenOutput
}

func (*RegistryToken) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryToken)(nil)).Elem()
}

func (i *RegistryToken) ToRegistryTokenOutput() RegistryTokenOutput {
	return i.ToRegistryTokenOutputWithContext(context.Background())
}

func (i *RegistryToken) ToRegistryTokenOutputWithContext(ctx context.Context) RegistryTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenOutput)
}

// RegistryTokenArrayInput is an input type that accepts RegistryTokenArray and RegistryTokenArrayOutput values.
// You can construct a concrete instance of `RegistryTokenArrayInput` via:
//
//	RegistryTokenArray{ RegistryTokenArgs{...} }
type RegistryTokenArrayInput interface {
	pulumi.Input

	ToRegistryTokenArrayOutput() RegistryTokenArrayOutput
	ToRegistryTokenArrayOutputWithContext(context.Context) RegistryTokenArrayOutput
}

type RegistryTokenArray []RegistryTokenInput

func (RegistryTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryToken)(nil)).Elem()
}

func (i RegistryTokenArray) ToRegistryTokenArrayOutput() RegistryTokenArrayOutput {
	return i.ToRegistryTokenArrayOutputWithContext(context.Background())
}

func (i RegistryTokenArray) ToRegistryTokenArrayOutputWithContext(ctx context.Context) RegistryTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenArrayOutput)
}

// RegistryTokenMapInput is an input type that accepts RegistryTokenMap and RegistryTokenMapOutput values.
// You can construct a concrete instance of `RegistryTokenMapInput` via:
//
//	RegistryTokenMap{ "key": RegistryTokenArgs{...} }
type RegistryTokenMapInput interface {
	pulumi.Input

	ToRegistryTokenMapOutput() RegistryTokenMapOutput
	ToRegistryTokenMapOutputWithContext(context.Context) RegistryTokenMapOutput
}

type RegistryTokenMap map[string]RegistryTokenInput

func (RegistryTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryToken)(nil)).Elem()
}

func (i RegistryTokenMap) ToRegistryTokenMapOutput() RegistryTokenMapOutput {
	return i.ToRegistryTokenMapOutputWithContext(context.Background())
}

func (i RegistryTokenMap) ToRegistryTokenMapOutputWithContext(ctx context.Context) RegistryTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTokenMapOutput)
}

type RegistryTokenOutput struct{ *pulumi.OutputState }

func (RegistryTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryToken)(nil)).Elem()
}

func (o RegistryTokenOutput) ToRegistryTokenOutput() RegistryTokenOutput {
	return o
}

func (o RegistryTokenOutput) ToRegistryTokenOutputWithContext(ctx context.Context) RegistryTokenOutput {
	return o
}

// The name of the Container Registry. Changing this forces a new resource to be created.
func (o RegistryTokenOutput) ContainerRegistryName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryToken) pulumi.StringOutput { return v.ContainerRegistryName }).(pulumi.StringOutput)
}

// Should the Container Registry token be enabled? Defaults to `true`.
func (o RegistryTokenOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RegistryToken) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Specifies the name of the token. Changing this forces a new resource to be created.
func (o RegistryTokenOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryToken) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Container Registry token. Changing this forces a new resource to be created.
func (o RegistryTokenOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryToken) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The ID of the Container Registry Scope Map associated with the token.
func (o RegistryTokenOutput) ScopeMapId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryToken) pulumi.StringOutput { return v.ScopeMapId }).(pulumi.StringOutput)
}

type RegistryTokenArrayOutput struct{ *pulumi.OutputState }

func (RegistryTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryToken)(nil)).Elem()
}

func (o RegistryTokenArrayOutput) ToRegistryTokenArrayOutput() RegistryTokenArrayOutput {
	return o
}

func (o RegistryTokenArrayOutput) ToRegistryTokenArrayOutputWithContext(ctx context.Context) RegistryTokenArrayOutput {
	return o
}

func (o RegistryTokenArrayOutput) Index(i pulumi.IntInput) RegistryTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryToken {
		return vs[0].([]*RegistryToken)[vs[1].(int)]
	}).(RegistryTokenOutput)
}

type RegistryTokenMapOutput struct{ *pulumi.OutputState }

func (RegistryTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryToken)(nil)).Elem()
}

func (o RegistryTokenMapOutput) ToRegistryTokenMapOutput() RegistryTokenMapOutput {
	return o
}

func (o RegistryTokenMapOutput) ToRegistryTokenMapOutputWithContext(ctx context.Context) RegistryTokenMapOutput {
	return o
}

func (o RegistryTokenMapOutput) MapIndex(k pulumi.StringInput) RegistryTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryToken {
		return vs[0].(map[string]*RegistryToken)[vs[1].(string)]
	}).(RegistryTokenOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenInput)(nil)).Elem(), &RegistryToken{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenArrayInput)(nil)).Elem(), RegistryTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTokenMapInput)(nil)).Elem(), RegistryTokenMap{})
	pulumi.RegisterOutputType(RegistryTokenOutput{})
	pulumi.RegisterOutputType(RegistryTokenArrayOutput{})
	pulumi.RegisterOutputType(RegistryTokenMapOutput{})
}
