// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Group struct {
	s *pulumi.ResourceState
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOpt) (*Group, error) {
	if args == nil || args.Containers == nil {
		return nil, errors.New("missing required argument 'Containers'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.OsType == nil {
		return nil, errors.New("missing required argument 'OsType'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["containers"] = nil
		inputs["dnsNameLabel"] = nil
		inputs["imageRegistryCredentials"] = nil
		inputs["ipAddressType"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["osType"] = nil
		inputs["resourceGroupName"] = nil
		inputs["restartPolicy"] = nil
		inputs["tags"] = nil
	} else {
		inputs["containers"] = args.Containers
		inputs["dnsNameLabel"] = args.DnsNameLabel
		inputs["imageRegistryCredentials"] = args.ImageRegistryCredentials
		inputs["ipAddressType"] = args.IpAddressType
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["osType"] = args.OsType
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["restartPolicy"] = args.RestartPolicy
		inputs["tags"] = args.Tags
	}
	inputs["fqdn"] = nil
	inputs["ipAddress"] = nil
	s, err := ctx.RegisterResource("azure:containerservice/group:Group", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *GroupState, opts ...pulumi.ResourceOpt) (*Group, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["containers"] = state.Containers
		inputs["dnsNameLabel"] = state.DnsNameLabel
		inputs["fqdn"] = state.Fqdn
		inputs["imageRegistryCredentials"] = state.ImageRegistryCredentials
		inputs["ipAddress"] = state.IpAddress
		inputs["ipAddressType"] = state.IpAddressType
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["osType"] = state.OsType
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["restartPolicy"] = state.RestartPolicy
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:containerservice/group:Group", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Group{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Group) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Group) ID() *pulumi.IDOutput {
	return r.s.ID
}

func (r *Group) Containers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["containers"])
}

func (r *Group) DnsNameLabel() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dnsNameLabel"])
}

func (r *Group) Fqdn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fqdn"])
}

func (r *Group) ImageRegistryCredentials() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["imageRegistryCredentials"])
}

func (r *Group) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

func (r *Group) IpAddressType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddressType"])
}

func (r *Group) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

func (r *Group) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Group) OsType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["osType"])
}

func (r *Group) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

func (r *Group) RestartPolicy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["restartPolicy"])
}

func (r *Group) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Group resources.
type GroupState struct {
	Containers interface{}
	DnsNameLabel interface{}
	Fqdn interface{}
	ImageRegistryCredentials interface{}
	IpAddress interface{}
	IpAddressType interface{}
	Location interface{}
	Name interface{}
	OsType interface{}
	ResourceGroupName interface{}
	RestartPolicy interface{}
	Tags interface{}
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	Containers interface{}
	DnsNameLabel interface{}
	ImageRegistryCredentials interface{}
	IpAddressType interface{}
	Location interface{}
	Name interface{}
	OsType interface{}
	ResourceGroupName interface{}
	RestartPolicy interface{}
	Tags interface{}
}
