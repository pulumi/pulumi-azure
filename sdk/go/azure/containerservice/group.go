// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages as an Azure Container Group instance.
//
// > **Note** `networkProfileId` is [deprecated](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-vnet) by Azure. For users who want to continue to manage existing `containerservice.Group` that rely on `networkProfileId`, please stay on provider versions prior to v3.16.0. Otherwise, use `subnetIds` instead.
//
// ## Example Usage
//
// This example provisions a Basic Container.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewGroup(ctx, "exampleGroup", &containerservice.GroupArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				IpAddressType:     pulumi.String("Public"),
//				DnsNameLabel:      pulumi.String("aci-label"),
//				OsType:            pulumi.String("Linux"),
//				Containers: containerservice.GroupContainerArray{
//					&containerservice.GroupContainerArgs{
//						Name:   pulumi.String("hello-world"),
//						Image:  pulumi.String("mcr.microsoft.com/azuredocs/aci-helloworld:latest"),
//						Cpu:    pulumi.Float64(0.5),
//						Memory: pulumi.Float64(1.5),
//						Ports: containerservice.GroupContainerPortArray{
//							&containerservice.GroupContainerPortArgs{
//								Port:     pulumi.Int(443),
//								Protocol: pulumi.String("TCP"),
//							},
//						},
//					},
//					&containerservice.GroupContainerArgs{
//						Name:   pulumi.String("sidecar"),
//						Image:  pulumi.String("mcr.microsoft.com/azuredocs/aci-tutorial-sidecar"),
//						Cpu:    pulumi.Float64(0.5),
//						Memory: pulumi.Float64(1.5),
//					},
//				},
//				Tags: pulumi.StringMap{
//					"environment": pulumi.String("testing"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Group's can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerservice/group:Group containerGroup1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.ContainerInstance/containerGroups/myContainerGroup1
//
// ```
type Group struct {
	pulumi.CustomResourceState

	// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
	Containers GroupContainerArrayOutput `pulumi:"containers"`
	// A `diagnostics` block as documented below. Changing this forces a new resource to be created.
	Diagnostics GroupDiagnosticsPtrOutput `pulumi:"diagnostics"`
	// A `dnsConfig` block as documented below. Changing this forces a new resource to be created.
	DnsConfig GroupDnsConfigPtrOutput `pulumi:"dnsConfig"`
	// The DNS label/name for the container group's IP. Changing this forces a new resource to be created.
	//
	// > **Note:** DNS label/name is not supported when deploying to virtual networks.
	DnsNameLabel pulumi.StringPtrOutput `pulumi:"dnsNameLabel"`
	// The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
	DnsNameLabelReusePolicy pulumi.StringPtrOutput `pulumi:"dnsNameLabelReusePolicy"`
	// Zero or more `exposedPort` blocks as defined below. Changing this forces a new resource to be created.
	//
	// > **Note:** The `exposedPort` can only contain ports that are also exposed on one or more containers in the group.
	ExposedPorts GroupExposedPortArrayOutput `pulumi:"exposedPorts"`
	// The FQDN of the container group derived from `dnsNameLabel`.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// An `identity` block as defined below.
	Identity GroupIdentityPtrOutput `pulumi:"identity"`
	// An `imageRegistryCredential` block as documented below. Changing this forces a new resource to be created.
	ImageRegistryCredentials GroupImageRegistryCredentialArrayOutput `pulumi:"imageRegistryCredentials"`
	// The definition of an init container that is part of the group as documented in the `initContainer` block below. Changing this forces a new resource to be created.
	InitContainers GroupInitContainerArrayOutput `pulumi:"initContainers"`
	// The IP address allocated to the container group.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnetIds` also needs to be set. Defaults to `Public`.
	//
	// > **Note:** `dnsNameLabel` and `osType` set to `windows` are not compatible with `Private` `ipAddressType`
	IpAddressType pulumi.StringPtrOutput `pulumi:"ipAddressType"`
	// The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
	KeyVaultKeyId pulumi.StringPtrOutput `pulumi:"keyVaultKeyId"`
	// The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named "Azure Container Instance Service" will be used instead. Make sure the identity has the proper `keyPermissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
	KeyVaultUserAssignedIdentityId pulumi.StringPtrOutput `pulumi:"keyVaultUserAssignedIdentityId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// Specifies the name of the Container Group. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// Deprecated: the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead
	NetworkProfileId pulumi.StringOutput `pulumi:"networkProfileId"`
	// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
	//
	// > **Note:** if `osType` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
	OsType pulumi.StringOutput `pulumi:"osType"`
	// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
	RestartPolicy pulumi.StringPtrOutput `pulumi:"restartPolicy"`
	// Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
	Sku pulumi.StringPtrOutput `pulumi:"sku"`
	// The subnet resource IDs for a container group. Changing this forces a new resource to be created.
	SubnetIds pulumi.StringPtrOutput `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Containers == nil {
		return nil, errors.New("invalid value for required argument 'Containers'")
	}
	if args.OsType == nil {
		return nil, errors.New("invalid value for required argument 'OsType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("azure:containerservice/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("azure:containerservice/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
	Containers []GroupContainer `pulumi:"containers"`
	// A `diagnostics` block as documented below. Changing this forces a new resource to be created.
	Diagnostics *GroupDiagnostics `pulumi:"diagnostics"`
	// A `dnsConfig` block as documented below. Changing this forces a new resource to be created.
	DnsConfig *GroupDnsConfig `pulumi:"dnsConfig"`
	// The DNS label/name for the container group's IP. Changing this forces a new resource to be created.
	//
	// > **Note:** DNS label/name is not supported when deploying to virtual networks.
	DnsNameLabel *string `pulumi:"dnsNameLabel"`
	// The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
	DnsNameLabelReusePolicy *string `pulumi:"dnsNameLabelReusePolicy"`
	// Zero or more `exposedPort` blocks as defined below. Changing this forces a new resource to be created.
	//
	// > **Note:** The `exposedPort` can only contain ports that are also exposed on one or more containers in the group.
	ExposedPorts []GroupExposedPort `pulumi:"exposedPorts"`
	// The FQDN of the container group derived from `dnsNameLabel`.
	Fqdn *string `pulumi:"fqdn"`
	// An `identity` block as defined below.
	Identity *GroupIdentity `pulumi:"identity"`
	// An `imageRegistryCredential` block as documented below. Changing this forces a new resource to be created.
	ImageRegistryCredentials []GroupImageRegistryCredential `pulumi:"imageRegistryCredentials"`
	// The definition of an init container that is part of the group as documented in the `initContainer` block below. Changing this forces a new resource to be created.
	InitContainers []GroupInitContainer `pulumi:"initContainers"`
	// The IP address allocated to the container group.
	IpAddress *string `pulumi:"ipAddress"`
	// Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnetIds` also needs to be set. Defaults to `Public`.
	//
	// > **Note:** `dnsNameLabel` and `osType` set to `windows` are not compatible with `Private` `ipAddressType`
	IpAddressType *string `pulumi:"ipAddressType"`
	// The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named "Azure Container Instance Service" will be used instead. Make sure the identity has the proper `keyPermissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
	KeyVaultUserAssignedIdentityId *string `pulumi:"keyVaultUserAssignedIdentityId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Container Group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Deprecated: the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead
	NetworkProfileId *string `pulumi:"networkProfileId"`
	// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
	//
	// > **Note:** if `osType` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
	OsType *string `pulumi:"osType"`
	// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
	RestartPolicy *string `pulumi:"restartPolicy"`
	// Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
	Sku *string `pulumi:"sku"`
	// The subnet resource IDs for a container group. Changing this forces a new resource to be created.
	SubnetIds *string `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
	Zones []string `pulumi:"zones"`
}

type GroupState struct {
	// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
	Containers GroupContainerArrayInput
	// A `diagnostics` block as documented below. Changing this forces a new resource to be created.
	Diagnostics GroupDiagnosticsPtrInput
	// A `dnsConfig` block as documented below. Changing this forces a new resource to be created.
	DnsConfig GroupDnsConfigPtrInput
	// The DNS label/name for the container group's IP. Changing this forces a new resource to be created.
	//
	// > **Note:** DNS label/name is not supported when deploying to virtual networks.
	DnsNameLabel pulumi.StringPtrInput
	// The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
	DnsNameLabelReusePolicy pulumi.StringPtrInput
	// Zero or more `exposedPort` blocks as defined below. Changing this forces a new resource to be created.
	//
	// > **Note:** The `exposedPort` can only contain ports that are also exposed on one or more containers in the group.
	ExposedPorts GroupExposedPortArrayInput
	// The FQDN of the container group derived from `dnsNameLabel`.
	Fqdn pulumi.StringPtrInput
	// An `identity` block as defined below.
	Identity GroupIdentityPtrInput
	// An `imageRegistryCredential` block as documented below. Changing this forces a new resource to be created.
	ImageRegistryCredentials GroupImageRegistryCredentialArrayInput
	// The definition of an init container that is part of the group as documented in the `initContainer` block below. Changing this forces a new resource to be created.
	InitContainers GroupInitContainerArrayInput
	// The IP address allocated to the container group.
	IpAddress pulumi.StringPtrInput
	// Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnetIds` also needs to be set. Defaults to `Public`.
	//
	// > **Note:** `dnsNameLabel` and `osType` set to `windows` are not compatible with `Private` `ipAddressType`
	IpAddressType pulumi.StringPtrInput
	// The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
	KeyVaultKeyId pulumi.StringPtrInput
	// The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named "Azure Container Instance Service" will be used instead. Make sure the identity has the proper `keyPermissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
	KeyVaultUserAssignedIdentityId pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Container Group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Deprecated: the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead
	NetworkProfileId pulumi.StringPtrInput
	// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
	//
	// > **Note:** if `osType` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
	OsType pulumi.StringPtrInput
	// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
	RestartPolicy pulumi.StringPtrInput
	// Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
	Sku pulumi.StringPtrInput
	// The subnet resource IDs for a container group. Changing this forces a new resource to be created.
	SubnetIds pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
	Containers []GroupContainer `pulumi:"containers"`
	// A `diagnostics` block as documented below. Changing this forces a new resource to be created.
	Diagnostics *GroupDiagnostics `pulumi:"diagnostics"`
	// A `dnsConfig` block as documented below. Changing this forces a new resource to be created.
	DnsConfig *GroupDnsConfig `pulumi:"dnsConfig"`
	// The DNS label/name for the container group's IP. Changing this forces a new resource to be created.
	//
	// > **Note:** DNS label/name is not supported when deploying to virtual networks.
	DnsNameLabel *string `pulumi:"dnsNameLabel"`
	// The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
	DnsNameLabelReusePolicy *string `pulumi:"dnsNameLabelReusePolicy"`
	// Zero or more `exposedPort` blocks as defined below. Changing this forces a new resource to be created.
	//
	// > **Note:** The `exposedPort` can only contain ports that are also exposed on one or more containers in the group.
	ExposedPorts []GroupExposedPort `pulumi:"exposedPorts"`
	// An `identity` block as defined below.
	Identity *GroupIdentity `pulumi:"identity"`
	// An `imageRegistryCredential` block as documented below. Changing this forces a new resource to be created.
	ImageRegistryCredentials []GroupImageRegistryCredential `pulumi:"imageRegistryCredentials"`
	// The definition of an init container that is part of the group as documented in the `initContainer` block below. Changing this forces a new resource to be created.
	InitContainers []GroupInitContainer `pulumi:"initContainers"`
	// Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnetIds` also needs to be set. Defaults to `Public`.
	//
	// > **Note:** `dnsNameLabel` and `osType` set to `windows` are not compatible with `Private` `ipAddressType`
	IpAddressType *string `pulumi:"ipAddressType"`
	// The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
	KeyVaultKeyId *string `pulumi:"keyVaultKeyId"`
	// The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named "Azure Container Instance Service" will be used instead. Make sure the identity has the proper `keyPermissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
	KeyVaultUserAssignedIdentityId *string `pulumi:"keyVaultUserAssignedIdentityId"`
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// Specifies the name of the Container Group. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// Deprecated: the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead
	NetworkProfileId *string `pulumi:"networkProfileId"`
	// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
	//
	// > **Note:** if `osType` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
	OsType string `pulumi:"osType"`
	// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
	RestartPolicy *string `pulumi:"restartPolicy"`
	// Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
	Sku *string `pulumi:"sku"`
	// The subnet resource IDs for a container group. Changing this forces a new resource to be created.
	SubnetIds *string `pulumi:"subnetIds"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
	Containers GroupContainerArrayInput
	// A `diagnostics` block as documented below. Changing this forces a new resource to be created.
	Diagnostics GroupDiagnosticsPtrInput
	// A `dnsConfig` block as documented below. Changing this forces a new resource to be created.
	DnsConfig GroupDnsConfigPtrInput
	// The DNS label/name for the container group's IP. Changing this forces a new resource to be created.
	//
	// > **Note:** DNS label/name is not supported when deploying to virtual networks.
	DnsNameLabel pulumi.StringPtrInput
	// The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
	DnsNameLabelReusePolicy pulumi.StringPtrInput
	// Zero or more `exposedPort` blocks as defined below. Changing this forces a new resource to be created.
	//
	// > **Note:** The `exposedPort` can only contain ports that are also exposed on one or more containers in the group.
	ExposedPorts GroupExposedPortArrayInput
	// An `identity` block as defined below.
	Identity GroupIdentityPtrInput
	// An `imageRegistryCredential` block as documented below. Changing this forces a new resource to be created.
	ImageRegistryCredentials GroupImageRegistryCredentialArrayInput
	// The definition of an init container that is part of the group as documented in the `initContainer` block below. Changing this forces a new resource to be created.
	InitContainers GroupInitContainerArrayInput
	// Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnetIds` also needs to be set. Defaults to `Public`.
	//
	// > **Note:** `dnsNameLabel` and `osType` set to `windows` are not compatible with `Private` `ipAddressType`
	IpAddressType pulumi.StringPtrInput
	// The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
	KeyVaultKeyId pulumi.StringPtrInput
	// The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named "Azure Container Instance Service" will be used instead. Make sure the identity has the proper `keyPermissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
	KeyVaultUserAssignedIdentityId pulumi.StringPtrInput
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// Specifies the name of the Container Group. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// Deprecated: the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead
	NetworkProfileId pulumi.StringPtrInput
	// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
	//
	// > **Note:** if `osType` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
	OsType pulumi.StringInput
	// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
	RestartPolicy pulumi.StringPtrInput
	// Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
	Sku pulumi.StringPtrInput
	// The subnet resource IDs for a container group. Changing this forces a new resource to be created.
	SubnetIds pulumi.StringPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
	Zones pulumi.StringArrayInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// The definition of a container that is part of the group as documented in the `container` block below. Changing this forces a new resource to be created.
func (o GroupOutput) Containers() GroupContainerArrayOutput {
	return o.ApplyT(func(v *Group) GroupContainerArrayOutput { return v.Containers }).(GroupContainerArrayOutput)
}

// A `diagnostics` block as documented below. Changing this forces a new resource to be created.
func (o GroupOutput) Diagnostics() GroupDiagnosticsPtrOutput {
	return o.ApplyT(func(v *Group) GroupDiagnosticsPtrOutput { return v.Diagnostics }).(GroupDiagnosticsPtrOutput)
}

// A `dnsConfig` block as documented below. Changing this forces a new resource to be created.
func (o GroupOutput) DnsConfig() GroupDnsConfigPtrOutput {
	return o.ApplyT(func(v *Group) GroupDnsConfigPtrOutput { return v.DnsConfig }).(GroupDnsConfigPtrOutput)
}

// The DNS label/name for the container group's IP. Changing this forces a new resource to be created.
//
// > **Note:** DNS label/name is not supported when deploying to virtual networks.
func (o GroupOutput) DnsNameLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.DnsNameLabel }).(pulumi.StringPtrOutput)
}

// The value representing the security enum. `Noreuse`, `ResourceGroupReuse`, `SubscriptionReuse`, `TenantReuse` or `Unsecure`. Defaults to `Unsecure`.
func (o GroupOutput) DnsNameLabelReusePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.DnsNameLabelReusePolicy }).(pulumi.StringPtrOutput)
}

// Zero or more `exposedPort` blocks as defined below. Changing this forces a new resource to be created.
//
// > **Note:** The `exposedPort` can only contain ports that are also exposed on one or more containers in the group.
func (o GroupOutput) ExposedPorts() GroupExposedPortArrayOutput {
	return o.ApplyT(func(v *Group) GroupExposedPortArrayOutput { return v.ExposedPorts }).(GroupExposedPortArrayOutput)
}

// The FQDN of the container group derived from `dnsNameLabel`.
func (o GroupOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Fqdn }).(pulumi.StringOutput)
}

// An `identity` block as defined below.
func (o GroupOutput) Identity() GroupIdentityPtrOutput {
	return o.ApplyT(func(v *Group) GroupIdentityPtrOutput { return v.Identity }).(GroupIdentityPtrOutput)
}

// An `imageRegistryCredential` block as documented below. Changing this forces a new resource to be created.
func (o GroupOutput) ImageRegistryCredentials() GroupImageRegistryCredentialArrayOutput {
	return o.ApplyT(func(v *Group) GroupImageRegistryCredentialArrayOutput { return v.ImageRegistryCredentials }).(GroupImageRegistryCredentialArrayOutput)
}

// The definition of an init container that is part of the group as documented in the `initContainer` block below. Changing this forces a new resource to be created.
func (o GroupOutput) InitContainers() GroupInitContainerArrayOutput {
	return o.ApplyT(func(v *Group) GroupInitContainerArrayOutput { return v.InitContainers }).(GroupInitContainerArrayOutput)
}

// The IP address allocated to the container group.
func (o GroupOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// Specifies the IP address type of the container. `Public`, `Private` or `None`. Changing this forces a new resource to be created. If set to `Private`, `subnetIds` also needs to be set. Defaults to `Public`.
//
// > **Note:** `dnsNameLabel` and `osType` set to `windows` are not compatible with `Private` `ipAddressType`
func (o GroupOutput) IpAddressType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.IpAddressType }).(pulumi.StringPtrOutput)
}

// The Key Vault key URI for CMK encryption. Changing this forces a new resource to be created.
func (o GroupOutput) KeyVaultKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.KeyVaultKeyId }).(pulumi.StringPtrOutput)
}

// The user assigned identity that has access to the Key Vault Key. If not specified, the RP principal named "Azure Container Instance Service" will be used instead. Make sure the identity has the proper `keyPermissions` set, at least with `Get`, `UnwrapKey`, `WrapKey` and `GetRotationPolicy`.
func (o GroupOutput) KeyVaultUserAssignedIdentityId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.KeyVaultUserAssignedIdentityId }).(pulumi.StringPtrOutput)
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (o GroupOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// Specifies the name of the Container Group. Changing this forces a new resource to be created.
func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Deprecated: the 'network_profile_id' has been removed from the latest versions of the container instance API and has been deprecated. It no longer functions and will be removed from the 4.0 AzureRM provider. Please use the 'subnet_ids' field instead
func (o GroupOutput) NetworkProfileId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.NetworkProfileId }).(pulumi.StringOutput)
}

// The OS for the container group. Allowed values are `Linux` and `Windows`. Changing this forces a new resource to be created.
//
// > **Note:** if `osType` is set to `Windows` currently only a single `container` block is supported. Windows containers are not supported in virtual networks.
func (o GroupOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.OsType }).(pulumi.StringOutput)
}

// The name of the resource group in which to create the Container Group. Changing this forces a new resource to be created.
func (o GroupOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// Restart policy for the container group. Allowed values are `Always`, `Never`, `OnFailure`. Defaults to `Always`. Changing this forces a new resource to be created.
func (o GroupOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

// Specifies the sku of the Container Group. Possible values are `Confidential`, `Dedicated` and `Standard`. Defaults to `Standard`. Changing this forces a new resource to be created.
func (o GroupOutput) Sku() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.Sku }).(pulumi.StringPtrOutput)
}

// The subnet resource IDs for a container group. Changing this forces a new resource to be created.
func (o GroupOutput) SubnetIds() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.SubnetIds }).(pulumi.StringPtrOutput)
}

// A mapping of tags to assign to the resource.
func (o GroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Group) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// A list of Availability Zones in which this Container Group is located. Changing this forces a new resource to be created.
func (o GroupOutput) Zones() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.Zones }).(pulumi.StringArrayOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
