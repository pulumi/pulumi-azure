// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// Manages a Container Connected Registry.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistry, err := containerservice.NewRegistry(ctx, "exampleRegistry", &containerservice.RegistryArgs{
//				ResourceGroupName:   exampleResourceGroup.Name,
//				Location:            exampleResourceGroup.Location,
//				Sku:                 pulumi.String("Premium"),
//				DataEndpointEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistryScopeMap, err := containerservice.NewRegistryScopeMap(ctx, "exampleRegistryScopeMap", &containerservice.RegistryScopeMapArgs{
//				ContainerRegistryName: exampleRegistry.Name,
//				ResourceGroupName:     exampleRegistry.ResourceGroupName,
//				Actions: pulumi.StringArray{
//					pulumi.String("repositories/hello-world/content/delete"),
//					pulumi.String("repositories/hello-world/content/read"),
//					pulumi.String("repositories/hello-world/content/write"),
//					pulumi.String("repositories/hello-world/metadata/read"),
//					pulumi.String("repositories/hello-world/metadata/write"),
//					pulumi.String("gateway/examplecr/config/read"),
//					pulumi.String("gateway/examplecr/config/write"),
//					pulumi.String("gateway/examplecr/message/read"),
//					pulumi.String("gateway/examplecr/message/write"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistryToken, err := containerservice.NewRegistryToken(ctx, "exampleRegistryToken", &containerservice.RegistryTokenArgs{
//				ContainerRegistryName: exampleRegistry.Name,
//				ResourceGroupName:     exampleRegistry.ResourceGroupName,
//				ScopeMapId:            exampleRegistryScopeMap.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewConnectedRegistry(ctx, "exampleConnectedRegistry", &containerservice.ConnectedRegistryArgs{
//				ContainerRegistryId: exampleRegistry.ID(),
//				SyncTokenId:         exampleRegistryToken.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Container Connected Registries can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerservice/connectedRegistry:ConnectedRegistry example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/connectedRegistries/registry1
//
// ```
type ConnectedRegistry struct {
	pulumi.CustomResourceState

	// Should the log auditing be enabled?
	AuditLogEnabled pulumi.BoolPtrOutput `pulumi:"auditLogEnabled"`
	// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
	ClientTokenIds pulumi.StringArrayOutput `pulumi:"clientTokenIds"`
	// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
	//
	// > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
	ContainerRegistryId pulumi.StringOutput `pulumi:"containerRegistryId"`
	// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
	LogLevel pulumi.StringPtrOutput `pulumi:"logLevel"`
	// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
	Mode pulumi.StringPtrOutput `pulumi:"mode"`
	// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `notification` blocks as defined below.
	Notifications ConnectedRegistryNotificationArrayOutput `pulumi:"notifications"`
	// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
	ParentRegistryId pulumi.StringPtrOutput `pulumi:"parentRegistryId"`
	// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
	SyncMessageTtl pulumi.StringPtrOutput `pulumi:"syncMessageTtl"`
	// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
	SyncSchedule pulumi.StringPtrOutput `pulumi:"syncSchedule"`
	// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
	SyncTokenId pulumi.StringOutput `pulumi:"syncTokenId"`
	// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
	SyncWindow pulumi.StringPtrOutput `pulumi:"syncWindow"`
}

// NewConnectedRegistry registers a new resource with the given unique name, arguments, and options.
func NewConnectedRegistry(ctx *pulumi.Context,
	name string, args *ConnectedRegistryArgs, opts ...pulumi.ResourceOption) (*ConnectedRegistry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerRegistryId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerRegistryId'")
	}
	if args.SyncTokenId == nil {
		return nil, errors.New("invalid value for required argument 'SyncTokenId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConnectedRegistry
	err := ctx.RegisterResource("azure:containerservice/connectedRegistry:ConnectedRegistry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectedRegistry gets an existing ConnectedRegistry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectedRegistry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectedRegistryState, opts ...pulumi.ResourceOption) (*ConnectedRegistry, error) {
	var resource ConnectedRegistry
	err := ctx.ReadResource("azure:containerservice/connectedRegistry:ConnectedRegistry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectedRegistry resources.
type connectedRegistryState struct {
	// Should the log auditing be enabled?
	AuditLogEnabled *bool `pulumi:"auditLogEnabled"`
	// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
	ClientTokenIds []string `pulumi:"clientTokenIds"`
	// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
	//
	// > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
	ContainerRegistryId *string `pulumi:"containerRegistryId"`
	// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
	LogLevel *string `pulumi:"logLevel"`
	// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
	Mode *string `pulumi:"mode"`
	// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
	Name *string `pulumi:"name"`
	// One or more `notification` blocks as defined below.
	Notifications []ConnectedRegistryNotification `pulumi:"notifications"`
	// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
	ParentRegistryId *string `pulumi:"parentRegistryId"`
	// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
	SyncMessageTtl *string `pulumi:"syncMessageTtl"`
	// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
	SyncSchedule *string `pulumi:"syncSchedule"`
	// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
	SyncTokenId *string `pulumi:"syncTokenId"`
	// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
	SyncWindow *string `pulumi:"syncWindow"`
}

type ConnectedRegistryState struct {
	// Should the log auditing be enabled?
	AuditLogEnabled pulumi.BoolPtrInput
	// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
	ClientTokenIds pulumi.StringArrayInput
	// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
	//
	// > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
	ContainerRegistryId pulumi.StringPtrInput
	// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
	LogLevel pulumi.StringPtrInput
	// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
	Mode pulumi.StringPtrInput
	// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
	Name pulumi.StringPtrInput
	// One or more `notification` blocks as defined below.
	Notifications ConnectedRegistryNotificationArrayInput
	// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
	ParentRegistryId pulumi.StringPtrInput
	// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
	SyncMessageTtl pulumi.StringPtrInput
	// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
	SyncSchedule pulumi.StringPtrInput
	// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
	SyncTokenId pulumi.StringPtrInput
	// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
	SyncWindow pulumi.StringPtrInput
}

func (ConnectedRegistryState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectedRegistryState)(nil)).Elem()
}

type connectedRegistryArgs struct {
	// Should the log auditing be enabled?
	AuditLogEnabled *bool `pulumi:"auditLogEnabled"`
	// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
	ClientTokenIds []string `pulumi:"clientTokenIds"`
	// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
	//
	// > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
	ContainerRegistryId string `pulumi:"containerRegistryId"`
	// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
	LogLevel *string `pulumi:"logLevel"`
	// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
	Mode *string `pulumi:"mode"`
	// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
	Name *string `pulumi:"name"`
	// One or more `notification` blocks as defined below.
	Notifications []ConnectedRegistryNotification `pulumi:"notifications"`
	// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
	ParentRegistryId *string `pulumi:"parentRegistryId"`
	// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
	SyncMessageTtl *string `pulumi:"syncMessageTtl"`
	// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
	SyncSchedule *string `pulumi:"syncSchedule"`
	// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
	SyncTokenId string `pulumi:"syncTokenId"`
	// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
	SyncWindow *string `pulumi:"syncWindow"`
}

// The set of arguments for constructing a ConnectedRegistry resource.
type ConnectedRegistryArgs struct {
	// Should the log auditing be enabled?
	AuditLogEnabled pulumi.BoolPtrInput
	// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
	ClientTokenIds pulumi.StringArrayInput
	// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
	//
	// > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
	ContainerRegistryId pulumi.StringInput
	// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
	LogLevel pulumi.StringPtrInput
	// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
	Mode pulumi.StringPtrInput
	// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
	Name pulumi.StringPtrInput
	// One or more `notification` blocks as defined below.
	Notifications ConnectedRegistryNotificationArrayInput
	// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
	ParentRegistryId pulumi.StringPtrInput
	// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
	SyncMessageTtl pulumi.StringPtrInput
	// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
	SyncSchedule pulumi.StringPtrInput
	// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
	SyncTokenId pulumi.StringInput
	// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
	SyncWindow pulumi.StringPtrInput
}

func (ConnectedRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectedRegistryArgs)(nil)).Elem()
}

type ConnectedRegistryInput interface {
	pulumi.Input

	ToConnectedRegistryOutput() ConnectedRegistryOutput
	ToConnectedRegistryOutputWithContext(ctx context.Context) ConnectedRegistryOutput
}

func (*ConnectedRegistry) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedRegistry)(nil)).Elem()
}

func (i *ConnectedRegistry) ToConnectedRegistryOutput() ConnectedRegistryOutput {
	return i.ToConnectedRegistryOutputWithContext(context.Background())
}

func (i *ConnectedRegistry) ToConnectedRegistryOutputWithContext(ctx context.Context) ConnectedRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedRegistryOutput)
}

func (i *ConnectedRegistry) ToOutput(ctx context.Context) pulumix.Output[*ConnectedRegistry] {
	return pulumix.Output[*ConnectedRegistry]{
		OutputState: i.ToConnectedRegistryOutputWithContext(ctx).OutputState,
	}
}

// ConnectedRegistryArrayInput is an input type that accepts ConnectedRegistryArray and ConnectedRegistryArrayOutput values.
// You can construct a concrete instance of `ConnectedRegistryArrayInput` via:
//
//	ConnectedRegistryArray{ ConnectedRegistryArgs{...} }
type ConnectedRegistryArrayInput interface {
	pulumi.Input

	ToConnectedRegistryArrayOutput() ConnectedRegistryArrayOutput
	ToConnectedRegistryArrayOutputWithContext(context.Context) ConnectedRegistryArrayOutput
}

type ConnectedRegistryArray []ConnectedRegistryInput

func (ConnectedRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectedRegistry)(nil)).Elem()
}

func (i ConnectedRegistryArray) ToConnectedRegistryArrayOutput() ConnectedRegistryArrayOutput {
	return i.ToConnectedRegistryArrayOutputWithContext(context.Background())
}

func (i ConnectedRegistryArray) ToConnectedRegistryArrayOutputWithContext(ctx context.Context) ConnectedRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedRegistryArrayOutput)
}

func (i ConnectedRegistryArray) ToOutput(ctx context.Context) pulumix.Output[[]*ConnectedRegistry] {
	return pulumix.Output[[]*ConnectedRegistry]{
		OutputState: i.ToConnectedRegistryArrayOutputWithContext(ctx).OutputState,
	}
}

// ConnectedRegistryMapInput is an input type that accepts ConnectedRegistryMap and ConnectedRegistryMapOutput values.
// You can construct a concrete instance of `ConnectedRegistryMapInput` via:
//
//	ConnectedRegistryMap{ "key": ConnectedRegistryArgs{...} }
type ConnectedRegistryMapInput interface {
	pulumi.Input

	ToConnectedRegistryMapOutput() ConnectedRegistryMapOutput
	ToConnectedRegistryMapOutputWithContext(context.Context) ConnectedRegistryMapOutput
}

type ConnectedRegistryMap map[string]ConnectedRegistryInput

func (ConnectedRegistryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectedRegistry)(nil)).Elem()
}

func (i ConnectedRegistryMap) ToConnectedRegistryMapOutput() ConnectedRegistryMapOutput {
	return i.ToConnectedRegistryMapOutputWithContext(context.Background())
}

func (i ConnectedRegistryMap) ToConnectedRegistryMapOutputWithContext(ctx context.Context) ConnectedRegistryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectedRegistryMapOutput)
}

func (i ConnectedRegistryMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConnectedRegistry] {
	return pulumix.Output[map[string]*ConnectedRegistry]{
		OutputState: i.ToConnectedRegistryMapOutputWithContext(ctx).OutputState,
	}
}

type ConnectedRegistryOutput struct{ *pulumi.OutputState }

func (ConnectedRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConnectedRegistry)(nil)).Elem()
}

func (o ConnectedRegistryOutput) ToConnectedRegistryOutput() ConnectedRegistryOutput {
	return o
}

func (o ConnectedRegistryOutput) ToConnectedRegistryOutputWithContext(ctx context.Context) ConnectedRegistryOutput {
	return o
}

func (o ConnectedRegistryOutput) ToOutput(ctx context.Context) pulumix.Output[*ConnectedRegistry] {
	return pulumix.Output[*ConnectedRegistry]{
		OutputState: o.OutputState,
	}
}

// Should the log auditing be enabled?
func (o ConnectedRegistryOutput) AuditLogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.BoolPtrOutput { return v.AuditLogEnabled }).(pulumi.BoolPtrOutput)
}

// Specifies a list of IDs of Container Registry Tokens, which are meant to be used by the clients to connect to the Connected Registry.
func (o ConnectedRegistryOutput) ClientTokenIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringArrayOutput { return v.ClientTokenIds }).(pulumi.StringArrayOutput)
}

// The ID of the Container Registry that this Connected Registry will reside in. Changing this forces a new Container Connected Registry to be created.
//
// > If `parentRegistryId` is not specified, the Connected Registry will be connected to the Container Registry identified by `containerRegistryId`.
func (o ConnectedRegistryOutput) ContainerRegistryId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringOutput { return v.ContainerRegistryId }).(pulumi.StringOutput)
}

// The verbosity of the logs. Possible values are `None`, `Debug`, `Information`, `Warning` and `Error`. Defaults to `None`.
func (o ConnectedRegistryOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringPtrOutput { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// The mode of the Connected Registry. Possible values are `Mirror`, `ReadOnly`, `ReadWrite` and `Registry`. Changing this forces a new Container Connected Registry to be created. Defaults to `ReadWrite`.
func (o ConnectedRegistryOutput) Mode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringPtrOutput { return v.Mode }).(pulumi.StringPtrOutput)
}

// The name which should be used for this Container Connected Registry. Changing this forces a new Container Connected Registry to be created.
func (o ConnectedRegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `notification` blocks as defined below.
func (o ConnectedRegistryOutput) Notifications() ConnectedRegistryNotificationArrayOutput {
	return o.ApplyT(func(v *ConnectedRegistry) ConnectedRegistryNotificationArrayOutput { return v.Notifications }).(ConnectedRegistryNotificationArrayOutput)
}

// The ID of the parent registry. This can be either a Container Registry ID or a Connected Registry ID. Changing this forces a new Container Connected Registry to be created.
func (o ConnectedRegistryOutput) ParentRegistryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringPtrOutput { return v.ParentRegistryId }).(pulumi.StringPtrOutput)
}

// The period of time (in form of ISO8601) for which a message is available to sync before it is expired. Allowed range is from `P1D` to `P90D`. Defaults to `P1D`.
func (o ConnectedRegistryOutput) SyncMessageTtl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringPtrOutput { return v.SyncMessageTtl }).(pulumi.StringPtrOutput)
}

// The cron expression indicating the schedule that the Connected Registry will sync with its parent. Defaults to `* * * * *`.
func (o ConnectedRegistryOutput) SyncSchedule() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringPtrOutput { return v.SyncSchedule }).(pulumi.StringPtrOutput)
}

// The ID of the Container Registry Token which is used for synchronizing the Connected Registry. Changing this forces a new Container Connected Registry to be created.
func (o ConnectedRegistryOutput) SyncTokenId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringOutput { return v.SyncTokenId }).(pulumi.StringOutput)
}

// The time window (in form of ISO8601) during which sync is enabled for each schedule occurrence. Allowed range is from `PT3H` to `P7D`.
func (o ConnectedRegistryOutput) SyncWindow() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ConnectedRegistry) pulumi.StringPtrOutput { return v.SyncWindow }).(pulumi.StringPtrOutput)
}

type ConnectedRegistryArrayOutput struct{ *pulumi.OutputState }

func (ConnectedRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConnectedRegistry)(nil)).Elem()
}

func (o ConnectedRegistryArrayOutput) ToConnectedRegistryArrayOutput() ConnectedRegistryArrayOutput {
	return o
}

func (o ConnectedRegistryArrayOutput) ToConnectedRegistryArrayOutputWithContext(ctx context.Context) ConnectedRegistryArrayOutput {
	return o
}

func (o ConnectedRegistryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*ConnectedRegistry] {
	return pulumix.Output[[]*ConnectedRegistry]{
		OutputState: o.OutputState,
	}
}

func (o ConnectedRegistryArrayOutput) Index(i pulumi.IntInput) ConnectedRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConnectedRegistry {
		return vs[0].([]*ConnectedRegistry)[vs[1].(int)]
	}).(ConnectedRegistryOutput)
}

type ConnectedRegistryMapOutput struct{ *pulumi.OutputState }

func (ConnectedRegistryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConnectedRegistry)(nil)).Elem()
}

func (o ConnectedRegistryMapOutput) ToConnectedRegistryMapOutput() ConnectedRegistryMapOutput {
	return o
}

func (o ConnectedRegistryMapOutput) ToConnectedRegistryMapOutputWithContext(ctx context.Context) ConnectedRegistryMapOutput {
	return o
}

func (o ConnectedRegistryMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*ConnectedRegistry] {
	return pulumix.Output[map[string]*ConnectedRegistry]{
		OutputState: o.OutputState,
	}
}

func (o ConnectedRegistryMapOutput) MapIndex(k pulumi.StringInput) ConnectedRegistryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConnectedRegistry {
		return vs[0].(map[string]*ConnectedRegistry)[vs[1].(string)]
	}).(ConnectedRegistryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectedRegistryInput)(nil)).Elem(), &ConnectedRegistry{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectedRegistryArrayInput)(nil)).Elem(), ConnectedRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectedRegistryMapInput)(nil)).Elem(), ConnectedRegistryMap{})
	pulumi.RegisterOutputType(ConnectedRegistryOutput{})
	pulumi.RegisterOutputType(ConnectedRegistryArrayOutput{})
	pulumi.RegisterOutputType(ConnectedRegistryMapOutput{})
}
