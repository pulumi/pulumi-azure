// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Container Registry Token Password.
//
// ## Import
//
// Container Registry Token Passwords can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerservice/tokenPassword:TokenPassword example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/group1/providers/Microsoft.ContainerRegistry/registries/registry1/tokens/token1/passwords/password
//
// ```
type TokenPassword struct {
	pulumi.CustomResourceState

	// The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
	ContainerRegistryTokenId pulumi.StringOutput `pulumi:"containerRegistryTokenId"`
	// One `password` block as defined below.
	Password1 TokenPasswordPassword1Output `pulumi:"password1"`
	// One `password` block as defined below.
	Password2 TokenPasswordPassword2PtrOutput `pulumi:"password2"`
}

// NewTokenPassword registers a new resource with the given unique name, arguments, and options.
func NewTokenPassword(ctx *pulumi.Context,
	name string, args *TokenPasswordArgs, opts ...pulumi.ResourceOption) (*TokenPassword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerRegistryTokenId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerRegistryTokenId'")
	}
	if args.Password1 == nil {
		return nil, errors.New("invalid value for required argument 'Password1'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TokenPassword
	err := ctx.RegisterResource("azure:containerservice/tokenPassword:TokenPassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTokenPassword gets an existing TokenPassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTokenPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TokenPasswordState, opts ...pulumi.ResourceOption) (*TokenPassword, error) {
	var resource TokenPassword
	err := ctx.ReadResource("azure:containerservice/tokenPassword:TokenPassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TokenPassword resources.
type tokenPasswordState struct {
	// The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
	ContainerRegistryTokenId *string `pulumi:"containerRegistryTokenId"`
	// One `password` block as defined below.
	Password1 *TokenPasswordPassword1 `pulumi:"password1"`
	// One `password` block as defined below.
	Password2 *TokenPasswordPassword2 `pulumi:"password2"`
}

type TokenPasswordState struct {
	// The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
	ContainerRegistryTokenId pulumi.StringPtrInput
	// One `password` block as defined below.
	Password1 TokenPasswordPassword1PtrInput
	// One `password` block as defined below.
	Password2 TokenPasswordPassword2PtrInput
}

func (TokenPasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenPasswordState)(nil)).Elem()
}

type tokenPasswordArgs struct {
	// The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
	ContainerRegistryTokenId string `pulumi:"containerRegistryTokenId"`
	// One `password` block as defined below.
	Password1 TokenPasswordPassword1 `pulumi:"password1"`
	// One `password` block as defined below.
	Password2 *TokenPasswordPassword2 `pulumi:"password2"`
}

// The set of arguments for constructing a TokenPassword resource.
type TokenPasswordArgs struct {
	// The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
	ContainerRegistryTokenId pulumi.StringInput
	// One `password` block as defined below.
	Password1 TokenPasswordPassword1Input
	// One `password` block as defined below.
	Password2 TokenPasswordPassword2PtrInput
}

func (TokenPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tokenPasswordArgs)(nil)).Elem()
}

type TokenPasswordInput interface {
	pulumi.Input

	ToTokenPasswordOutput() TokenPasswordOutput
	ToTokenPasswordOutputWithContext(ctx context.Context) TokenPasswordOutput
}

func (*TokenPassword) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenPassword)(nil)).Elem()
}

func (i *TokenPassword) ToTokenPasswordOutput() TokenPasswordOutput {
	return i.ToTokenPasswordOutputWithContext(context.Background())
}

func (i *TokenPassword) ToTokenPasswordOutputWithContext(ctx context.Context) TokenPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenPasswordOutput)
}

// TokenPasswordArrayInput is an input type that accepts TokenPasswordArray and TokenPasswordArrayOutput values.
// You can construct a concrete instance of `TokenPasswordArrayInput` via:
//
//	TokenPasswordArray{ TokenPasswordArgs{...} }
type TokenPasswordArrayInput interface {
	pulumi.Input

	ToTokenPasswordArrayOutput() TokenPasswordArrayOutput
	ToTokenPasswordArrayOutputWithContext(context.Context) TokenPasswordArrayOutput
}

type TokenPasswordArray []TokenPasswordInput

func (TokenPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TokenPassword)(nil)).Elem()
}

func (i TokenPasswordArray) ToTokenPasswordArrayOutput() TokenPasswordArrayOutput {
	return i.ToTokenPasswordArrayOutputWithContext(context.Background())
}

func (i TokenPasswordArray) ToTokenPasswordArrayOutputWithContext(ctx context.Context) TokenPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenPasswordArrayOutput)
}

// TokenPasswordMapInput is an input type that accepts TokenPasswordMap and TokenPasswordMapOutput values.
// You can construct a concrete instance of `TokenPasswordMapInput` via:
//
//	TokenPasswordMap{ "key": TokenPasswordArgs{...} }
type TokenPasswordMapInput interface {
	pulumi.Input

	ToTokenPasswordMapOutput() TokenPasswordMapOutput
	ToTokenPasswordMapOutputWithContext(context.Context) TokenPasswordMapOutput
}

type TokenPasswordMap map[string]TokenPasswordInput

func (TokenPasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TokenPassword)(nil)).Elem()
}

func (i TokenPasswordMap) ToTokenPasswordMapOutput() TokenPasswordMapOutput {
	return i.ToTokenPasswordMapOutputWithContext(context.Background())
}

func (i TokenPasswordMap) ToTokenPasswordMapOutputWithContext(ctx context.Context) TokenPasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TokenPasswordMapOutput)
}

type TokenPasswordOutput struct{ *pulumi.OutputState }

func (TokenPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TokenPassword)(nil)).Elem()
}

func (o TokenPasswordOutput) ToTokenPasswordOutput() TokenPasswordOutput {
	return o
}

func (o TokenPasswordOutput) ToTokenPasswordOutputWithContext(ctx context.Context) TokenPasswordOutput {
	return o
}

// The ID of the Container Registry Token that this Container Registry Token Password resides in. Changing this forces a new Container Registry Token Password to be created.
func (o TokenPasswordOutput) ContainerRegistryTokenId() pulumi.StringOutput {
	return o.ApplyT(func(v *TokenPassword) pulumi.StringOutput { return v.ContainerRegistryTokenId }).(pulumi.StringOutput)
}

// One `password` block as defined below.
func (o TokenPasswordOutput) Password1() TokenPasswordPassword1Output {
	return o.ApplyT(func(v *TokenPassword) TokenPasswordPassword1Output { return v.Password1 }).(TokenPasswordPassword1Output)
}

// One `password` block as defined below.
func (o TokenPasswordOutput) Password2() TokenPasswordPassword2PtrOutput {
	return o.ApplyT(func(v *TokenPassword) TokenPasswordPassword2PtrOutput { return v.Password2 }).(TokenPasswordPassword2PtrOutput)
}

type TokenPasswordArrayOutput struct{ *pulumi.OutputState }

func (TokenPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TokenPassword)(nil)).Elem()
}

func (o TokenPasswordArrayOutput) ToTokenPasswordArrayOutput() TokenPasswordArrayOutput {
	return o
}

func (o TokenPasswordArrayOutput) ToTokenPasswordArrayOutputWithContext(ctx context.Context) TokenPasswordArrayOutput {
	return o
}

func (o TokenPasswordArrayOutput) Index(i pulumi.IntInput) TokenPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TokenPassword {
		return vs[0].([]*TokenPassword)[vs[1].(int)]
	}).(TokenPasswordOutput)
}

type TokenPasswordMapOutput struct{ *pulumi.OutputState }

func (TokenPasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TokenPassword)(nil)).Elem()
}

func (o TokenPasswordMapOutput) ToTokenPasswordMapOutput() TokenPasswordMapOutput {
	return o
}

func (o TokenPasswordMapOutput) ToTokenPasswordMapOutputWithContext(ctx context.Context) TokenPasswordMapOutput {
	return o
}

func (o TokenPasswordMapOutput) MapIndex(k pulumi.StringInput) TokenPasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TokenPassword {
		return vs[0].(map[string]*TokenPassword)[vs[1].(string)]
	}).(TokenPasswordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TokenPasswordInput)(nil)).Elem(), &TokenPassword{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenPasswordArrayInput)(nil)).Elem(), TokenPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TokenPasswordMapInput)(nil)).Elem(), TokenPasswordMap{})
	pulumi.RegisterOutputType(TokenPasswordOutput{})
	pulumi.RegisterOutputType(TokenPasswordArrayOutput{})
	pulumi.RegisterOutputType(TokenPasswordMapOutput{})
}
