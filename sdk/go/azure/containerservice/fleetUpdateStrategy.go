// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Kubernetes Fleet Update Strategy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	containerservice/fleetUpdateStrategy "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/containerservice/fleetUpdateStrategy"
//	containerservice/kubernetesFleetManager "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/containerservice/kubernetesFleetManager"
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// example, err := core/resourceGroup.NewResourceGroup(ctx, "example", &core/resourceGroup.ResourceGroupArgs{
// Name: "example-rg",
// Location: "westeurope",
// })
// if err != nil {
// return err
// }
// exampleKubernetesFleetManager, err := containerservice/kubernetesFleetManager.NewKubernetesFleetManager(ctx, "example", &containerservice/kubernetesFleetManager.KubernetesFleetManagerArgs{
// Location: example.Location,
// Name: "example",
// ResourceGroupName: example.Name,
// HubProfile: map[string]interface{}{
// "dnsPrefix": "example-dns-prefix",
// },
// })
// if err != nil {
// return err
// }
// _, err = containerservice/fleetUpdateStrategy.NewFleetUpdateStrategy(ctx, "example", &containerservice/fleetUpdateStrategy.FleetUpdateStrategyArgs{
// Name: "example",
// KubernetesFleetManagerId: exampleKubernetesFleetManager.Id,
// Stages: []map[string]interface{}{
// map[string]interface{}{
// "name": "example-stage-1",
// "groups": []map[string]interface{}{
// map[string]interface{}{
// "name": "example-group-1",
// },
// },
// "afterStageWaitInSeconds": 21,
// },
// },
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Kubernetes Fleet Update Strategies can be imported using the `resource id`, e.g.
//
// ```sh
// $ pulumi import azure:containerservice/fleetUpdateStrategy:FleetUpdateStrategy example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/resourceGroup1/providers/Microsoft.ContainerService/fleets/fleet1/updateStrategies/updateStrategy1
// ```
type FleetUpdateStrategy struct {
	pulumi.CustomResourceState

	// The ID of the Fleet Manager. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	KubernetesFleetManagerId pulumi.StringOutput `pulumi:"kubernetesFleetManagerId"`
	// The name which should be used for this Kubernetes Fleet Update Strategy. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// One or more `stage` blocks as defined below.
	Stages FleetUpdateStrategyStageArrayOutput `pulumi:"stages"`
}

// NewFleetUpdateStrategy registers a new resource with the given unique name, arguments, and options.
func NewFleetUpdateStrategy(ctx *pulumi.Context,
	name string, args *FleetUpdateStrategyArgs, opts ...pulumi.ResourceOption) (*FleetUpdateStrategy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KubernetesFleetManagerId == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesFleetManagerId'")
	}
	if args.Stages == nil {
		return nil, errors.New("invalid value for required argument 'Stages'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FleetUpdateStrategy
	err := ctx.RegisterResource("azure:containerservice/fleetUpdateStrategy:FleetUpdateStrategy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFleetUpdateStrategy gets an existing FleetUpdateStrategy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFleetUpdateStrategy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FleetUpdateStrategyState, opts ...pulumi.ResourceOption) (*FleetUpdateStrategy, error) {
	var resource FleetUpdateStrategy
	err := ctx.ReadResource("azure:containerservice/fleetUpdateStrategy:FleetUpdateStrategy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FleetUpdateStrategy resources.
type fleetUpdateStrategyState struct {
	// The ID of the Fleet Manager. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	KubernetesFleetManagerId *string `pulumi:"kubernetesFleetManagerId"`
	// The name which should be used for this Kubernetes Fleet Update Strategy. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	Name *string `pulumi:"name"`
	// One or more `stage` blocks as defined below.
	Stages []FleetUpdateStrategyStage `pulumi:"stages"`
}

type FleetUpdateStrategyState struct {
	// The ID of the Fleet Manager. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	KubernetesFleetManagerId pulumi.StringPtrInput
	// The name which should be used for this Kubernetes Fleet Update Strategy. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	Name pulumi.StringPtrInput
	// One or more `stage` blocks as defined below.
	Stages FleetUpdateStrategyStageArrayInput
}

func (FleetUpdateStrategyState) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetUpdateStrategyState)(nil)).Elem()
}

type fleetUpdateStrategyArgs struct {
	// The ID of the Fleet Manager. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	KubernetesFleetManagerId string `pulumi:"kubernetesFleetManagerId"`
	// The name which should be used for this Kubernetes Fleet Update Strategy. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	Name *string `pulumi:"name"`
	// One or more `stage` blocks as defined below.
	Stages []FleetUpdateStrategyStage `pulumi:"stages"`
}

// The set of arguments for constructing a FleetUpdateStrategy resource.
type FleetUpdateStrategyArgs struct {
	// The ID of the Fleet Manager. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	KubernetesFleetManagerId pulumi.StringInput
	// The name which should be used for this Kubernetes Fleet Update Strategy. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
	Name pulumi.StringPtrInput
	// One or more `stage` blocks as defined below.
	Stages FleetUpdateStrategyStageArrayInput
}

func (FleetUpdateStrategyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fleetUpdateStrategyArgs)(nil)).Elem()
}

type FleetUpdateStrategyInput interface {
	pulumi.Input

	ToFleetUpdateStrategyOutput() FleetUpdateStrategyOutput
	ToFleetUpdateStrategyOutputWithContext(ctx context.Context) FleetUpdateStrategyOutput
}

func (*FleetUpdateStrategy) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetUpdateStrategy)(nil)).Elem()
}

func (i *FleetUpdateStrategy) ToFleetUpdateStrategyOutput() FleetUpdateStrategyOutput {
	return i.ToFleetUpdateStrategyOutputWithContext(context.Background())
}

func (i *FleetUpdateStrategy) ToFleetUpdateStrategyOutputWithContext(ctx context.Context) FleetUpdateStrategyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetUpdateStrategyOutput)
}

// FleetUpdateStrategyArrayInput is an input type that accepts FleetUpdateStrategyArray and FleetUpdateStrategyArrayOutput values.
// You can construct a concrete instance of `FleetUpdateStrategyArrayInput` via:
//
//	FleetUpdateStrategyArray{ FleetUpdateStrategyArgs{...} }
type FleetUpdateStrategyArrayInput interface {
	pulumi.Input

	ToFleetUpdateStrategyArrayOutput() FleetUpdateStrategyArrayOutput
	ToFleetUpdateStrategyArrayOutputWithContext(context.Context) FleetUpdateStrategyArrayOutput
}

type FleetUpdateStrategyArray []FleetUpdateStrategyInput

func (FleetUpdateStrategyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FleetUpdateStrategy)(nil)).Elem()
}

func (i FleetUpdateStrategyArray) ToFleetUpdateStrategyArrayOutput() FleetUpdateStrategyArrayOutput {
	return i.ToFleetUpdateStrategyArrayOutputWithContext(context.Background())
}

func (i FleetUpdateStrategyArray) ToFleetUpdateStrategyArrayOutputWithContext(ctx context.Context) FleetUpdateStrategyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetUpdateStrategyArrayOutput)
}

// FleetUpdateStrategyMapInput is an input type that accepts FleetUpdateStrategyMap and FleetUpdateStrategyMapOutput values.
// You can construct a concrete instance of `FleetUpdateStrategyMapInput` via:
//
//	FleetUpdateStrategyMap{ "key": FleetUpdateStrategyArgs{...} }
type FleetUpdateStrategyMapInput interface {
	pulumi.Input

	ToFleetUpdateStrategyMapOutput() FleetUpdateStrategyMapOutput
	ToFleetUpdateStrategyMapOutputWithContext(context.Context) FleetUpdateStrategyMapOutput
}

type FleetUpdateStrategyMap map[string]FleetUpdateStrategyInput

func (FleetUpdateStrategyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FleetUpdateStrategy)(nil)).Elem()
}

func (i FleetUpdateStrategyMap) ToFleetUpdateStrategyMapOutput() FleetUpdateStrategyMapOutput {
	return i.ToFleetUpdateStrategyMapOutputWithContext(context.Background())
}

func (i FleetUpdateStrategyMap) ToFleetUpdateStrategyMapOutputWithContext(ctx context.Context) FleetUpdateStrategyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FleetUpdateStrategyMapOutput)
}

type FleetUpdateStrategyOutput struct{ *pulumi.OutputState }

func (FleetUpdateStrategyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FleetUpdateStrategy)(nil)).Elem()
}

func (o FleetUpdateStrategyOutput) ToFleetUpdateStrategyOutput() FleetUpdateStrategyOutput {
	return o
}

func (o FleetUpdateStrategyOutput) ToFleetUpdateStrategyOutputWithContext(ctx context.Context) FleetUpdateStrategyOutput {
	return o
}

// The ID of the Fleet Manager. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
func (o FleetUpdateStrategyOutput) KubernetesFleetManagerId() pulumi.StringOutput {
	return o.ApplyT(func(v *FleetUpdateStrategy) pulumi.StringOutput { return v.KubernetesFleetManagerId }).(pulumi.StringOutput)
}

// The name which should be used for this Kubernetes Fleet Update Strategy. Changing this forces a new Kubernetes Fleet Update Strategy to be created.
func (o FleetUpdateStrategyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FleetUpdateStrategy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// One or more `stage` blocks as defined below.
func (o FleetUpdateStrategyOutput) Stages() FleetUpdateStrategyStageArrayOutput {
	return o.ApplyT(func(v *FleetUpdateStrategy) FleetUpdateStrategyStageArrayOutput { return v.Stages }).(FleetUpdateStrategyStageArrayOutput)
}

type FleetUpdateStrategyArrayOutput struct{ *pulumi.OutputState }

func (FleetUpdateStrategyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FleetUpdateStrategy)(nil)).Elem()
}

func (o FleetUpdateStrategyArrayOutput) ToFleetUpdateStrategyArrayOutput() FleetUpdateStrategyArrayOutput {
	return o
}

func (o FleetUpdateStrategyArrayOutput) ToFleetUpdateStrategyArrayOutputWithContext(ctx context.Context) FleetUpdateStrategyArrayOutput {
	return o
}

func (o FleetUpdateStrategyArrayOutput) Index(i pulumi.IntInput) FleetUpdateStrategyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FleetUpdateStrategy {
		return vs[0].([]*FleetUpdateStrategy)[vs[1].(int)]
	}).(FleetUpdateStrategyOutput)
}

type FleetUpdateStrategyMapOutput struct{ *pulumi.OutputState }

func (FleetUpdateStrategyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FleetUpdateStrategy)(nil)).Elem()
}

func (o FleetUpdateStrategyMapOutput) ToFleetUpdateStrategyMapOutput() FleetUpdateStrategyMapOutput {
	return o
}

func (o FleetUpdateStrategyMapOutput) ToFleetUpdateStrategyMapOutputWithContext(ctx context.Context) FleetUpdateStrategyMapOutput {
	return o
}

func (o FleetUpdateStrategyMapOutput) MapIndex(k pulumi.StringInput) FleetUpdateStrategyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FleetUpdateStrategy {
		return vs[0].(map[string]*FleetUpdateStrategy)[vs[1].(string)]
	}).(FleetUpdateStrategyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FleetUpdateStrategyInput)(nil)).Elem(), &FleetUpdateStrategy{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetUpdateStrategyArrayInput)(nil)).Elem(), FleetUpdateStrategyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FleetUpdateStrategyMapInput)(nil)).Elem(), FleetUpdateStrategyMap{})
	pulumi.RegisterOutputType(FleetUpdateStrategyOutput{})
	pulumi.RegisterOutputType(FleetUpdateStrategyArrayOutput{})
	pulumi.RegisterOutputType(FleetUpdateStrategyMapOutput{})
}
