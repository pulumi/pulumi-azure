// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "azure:containerservice/connectedRegistry:ConnectedRegistry":
		r = &ConnectedRegistry{}
	case "azure:containerservice/group:Group":
		r = &Group{}
	case "azure:containerservice/kubernetesCluster:KubernetesCluster":
		r = &KubernetesCluster{}
	case "azure:containerservice/kubernetesClusterExtension:KubernetesClusterExtension":
		r = &KubernetesClusterExtension{}
	case "azure:containerservice/kubernetesClusterNodePool:KubernetesClusterNodePool":
		r = &KubernetesClusterNodePool{}
	case "azure:containerservice/kubernetesFleetManager:KubernetesFleetManager":
		r = &KubernetesFleetManager{}
	case "azure:containerservice/registry:Registry":
		r = &Registry{}
	case "azure:containerservice/registryAgentPool:RegistryAgentPool":
		r = &RegistryAgentPool{}
	case "azure:containerservice/registryScopeMap:RegistryScopeMap":
		r = &RegistryScopeMap{}
	case "azure:containerservice/registryTask:RegistryTask":
		r = &RegistryTask{}
	case "azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow":
		r = &RegistryTaskScheduleRunNow{}
	case "azure:containerservice/registryToken:RegistryToken":
		r = &RegistryToken{}
	case "azure:containerservice/registryWebhook:RegistryWebhook":
		r = &RegistryWebhook{}
	case "azure:containerservice/registryWebook:RegistryWebook":
		r = &RegistryWebook{}
	case "azure:containerservice/tokenPassword:TokenPassword":
		r = &TokenPassword{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

func init() {
	version, err := azure.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/connectedRegistry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/kubernetesCluster",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/kubernetesClusterExtension",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/kubernetesClusterNodePool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/kubernetesFleetManager",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/registry",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/registryAgentPool",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/registryScopeMap",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/registryTask",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/registryTaskScheduleRunNow",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/registryToken",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/registryWebhook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/registryWebook",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"azure",
		"containerservice/tokenPassword",
		&module{version},
	)
}
