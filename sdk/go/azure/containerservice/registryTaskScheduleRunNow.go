// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Runs a Container Registry Task Schedule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistry, err := containerservice.NewRegistry(ctx, "exampleRegistry", &containerservice.RegistryArgs{
//				ResourceGroupName: exampleResourceGroup.Name,
//				Location:          exampleResourceGroup.Location,
//				Sku:               pulumi.String("Basic"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleRegistryTask, err := containerservice.NewRegistryTask(ctx, "exampleRegistryTask", &containerservice.RegistryTaskArgs{
//				ContainerRegistryId: exampleRegistry.ID(),
//				Platform: &containerservice.RegistryTaskPlatformArgs{
//					Os: pulumi.String("Linux"),
//				},
//				DockerStep: &containerservice.RegistryTaskDockerStepArgs{
//					DockerfilePath:     pulumi.String("Dockerfile"),
//					ContextPath:        pulumi.String("https://github.com/<user name>/acr-build-helloworld-node#main"),
//					ContextAccessToken: pulumi.String("<github personal access token>"),
//					ImageNames: pulumi.StringArray{
//						pulumi.String("helloworld:{{.Run.ID}}"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewRegistryTaskScheduleRunNow(ctx, "exampleRegistryTaskScheduleRunNow", &containerservice.RegistryTaskScheduleRunNowArgs{
//				ContainerRegistryTaskId: exampleRegistryTask.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type RegistryTaskScheduleRunNow struct {
	pulumi.CustomResourceState

	// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
	ContainerRegistryTaskId pulumi.StringOutput `pulumi:"containerRegistryTaskId"`
}

// NewRegistryTaskScheduleRunNow registers a new resource with the given unique name, arguments, and options.
func NewRegistryTaskScheduleRunNow(ctx *pulumi.Context,
	name string, args *RegistryTaskScheduleRunNowArgs, opts ...pulumi.ResourceOption) (*RegistryTaskScheduleRunNow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContainerRegistryTaskId == nil {
		return nil, errors.New("invalid value for required argument 'ContainerRegistryTaskId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RegistryTaskScheduleRunNow
	err := ctx.RegisterResource("azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRegistryTaskScheduleRunNow gets an existing RegistryTaskScheduleRunNow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistryTaskScheduleRunNow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RegistryTaskScheduleRunNowState, opts ...pulumi.ResourceOption) (*RegistryTaskScheduleRunNow, error) {
	var resource RegistryTaskScheduleRunNow
	err := ctx.ReadResource("azure:containerservice/registryTaskScheduleRunNow:RegistryTaskScheduleRunNow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RegistryTaskScheduleRunNow resources.
type registryTaskScheduleRunNowState struct {
	// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
	ContainerRegistryTaskId *string `pulumi:"containerRegistryTaskId"`
}

type RegistryTaskScheduleRunNowState struct {
	// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
	ContainerRegistryTaskId pulumi.StringPtrInput
}

func (RegistryTaskScheduleRunNowState) ElementType() reflect.Type {
	return reflect.TypeOf((*registryTaskScheduleRunNowState)(nil)).Elem()
}

type registryTaskScheduleRunNowArgs struct {
	// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
	ContainerRegistryTaskId string `pulumi:"containerRegistryTaskId"`
}

// The set of arguments for constructing a RegistryTaskScheduleRunNow resource.
type RegistryTaskScheduleRunNowArgs struct {
	// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
	ContainerRegistryTaskId pulumi.StringInput
}

func (RegistryTaskScheduleRunNowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*registryTaskScheduleRunNowArgs)(nil)).Elem()
}

type RegistryTaskScheduleRunNowInput interface {
	pulumi.Input

	ToRegistryTaskScheduleRunNowOutput() RegistryTaskScheduleRunNowOutput
	ToRegistryTaskScheduleRunNowOutputWithContext(ctx context.Context) RegistryTaskScheduleRunNowOutput
}

func (*RegistryTaskScheduleRunNow) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryTaskScheduleRunNow)(nil)).Elem()
}

func (i *RegistryTaskScheduleRunNow) ToRegistryTaskScheduleRunNowOutput() RegistryTaskScheduleRunNowOutput {
	return i.ToRegistryTaskScheduleRunNowOutputWithContext(context.Background())
}

func (i *RegistryTaskScheduleRunNow) ToRegistryTaskScheduleRunNowOutputWithContext(ctx context.Context) RegistryTaskScheduleRunNowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTaskScheduleRunNowOutput)
}

// RegistryTaskScheduleRunNowArrayInput is an input type that accepts RegistryTaskScheduleRunNowArray and RegistryTaskScheduleRunNowArrayOutput values.
// You can construct a concrete instance of `RegistryTaskScheduleRunNowArrayInput` via:
//
//	RegistryTaskScheduleRunNowArray{ RegistryTaskScheduleRunNowArgs{...} }
type RegistryTaskScheduleRunNowArrayInput interface {
	pulumi.Input

	ToRegistryTaskScheduleRunNowArrayOutput() RegistryTaskScheduleRunNowArrayOutput
	ToRegistryTaskScheduleRunNowArrayOutputWithContext(context.Context) RegistryTaskScheduleRunNowArrayOutput
}

type RegistryTaskScheduleRunNowArray []RegistryTaskScheduleRunNowInput

func (RegistryTaskScheduleRunNowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryTaskScheduleRunNow)(nil)).Elem()
}

func (i RegistryTaskScheduleRunNowArray) ToRegistryTaskScheduleRunNowArrayOutput() RegistryTaskScheduleRunNowArrayOutput {
	return i.ToRegistryTaskScheduleRunNowArrayOutputWithContext(context.Background())
}

func (i RegistryTaskScheduleRunNowArray) ToRegistryTaskScheduleRunNowArrayOutputWithContext(ctx context.Context) RegistryTaskScheduleRunNowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTaskScheduleRunNowArrayOutput)
}

// RegistryTaskScheduleRunNowMapInput is an input type that accepts RegistryTaskScheduleRunNowMap and RegistryTaskScheduleRunNowMapOutput values.
// You can construct a concrete instance of `RegistryTaskScheduleRunNowMapInput` via:
//
//	RegistryTaskScheduleRunNowMap{ "key": RegistryTaskScheduleRunNowArgs{...} }
type RegistryTaskScheduleRunNowMapInput interface {
	pulumi.Input

	ToRegistryTaskScheduleRunNowMapOutput() RegistryTaskScheduleRunNowMapOutput
	ToRegistryTaskScheduleRunNowMapOutputWithContext(context.Context) RegistryTaskScheduleRunNowMapOutput
}

type RegistryTaskScheduleRunNowMap map[string]RegistryTaskScheduleRunNowInput

func (RegistryTaskScheduleRunNowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryTaskScheduleRunNow)(nil)).Elem()
}

func (i RegistryTaskScheduleRunNowMap) ToRegistryTaskScheduleRunNowMapOutput() RegistryTaskScheduleRunNowMapOutput {
	return i.ToRegistryTaskScheduleRunNowMapOutputWithContext(context.Background())
}

func (i RegistryTaskScheduleRunNowMap) ToRegistryTaskScheduleRunNowMapOutputWithContext(ctx context.Context) RegistryTaskScheduleRunNowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryTaskScheduleRunNowMapOutput)
}

type RegistryTaskScheduleRunNowOutput struct{ *pulumi.OutputState }

func (RegistryTaskScheduleRunNowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RegistryTaskScheduleRunNow)(nil)).Elem()
}

func (o RegistryTaskScheduleRunNowOutput) ToRegistryTaskScheduleRunNowOutput() RegistryTaskScheduleRunNowOutput {
	return o
}

func (o RegistryTaskScheduleRunNowOutput) ToRegistryTaskScheduleRunNowOutputWithContext(ctx context.Context) RegistryTaskScheduleRunNowOutput {
	return o
}

// The ID of the Container Registry Task that to be scheduled. Changing this forces a new Container Registry Task Schedule to be created.
func (o RegistryTaskScheduleRunNowOutput) ContainerRegistryTaskId() pulumi.StringOutput {
	return o.ApplyT(func(v *RegistryTaskScheduleRunNow) pulumi.StringOutput { return v.ContainerRegistryTaskId }).(pulumi.StringOutput)
}

type RegistryTaskScheduleRunNowArrayOutput struct{ *pulumi.OutputState }

func (RegistryTaskScheduleRunNowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RegistryTaskScheduleRunNow)(nil)).Elem()
}

func (o RegistryTaskScheduleRunNowArrayOutput) ToRegistryTaskScheduleRunNowArrayOutput() RegistryTaskScheduleRunNowArrayOutput {
	return o
}

func (o RegistryTaskScheduleRunNowArrayOutput) ToRegistryTaskScheduleRunNowArrayOutputWithContext(ctx context.Context) RegistryTaskScheduleRunNowArrayOutput {
	return o
}

func (o RegistryTaskScheduleRunNowArrayOutput) Index(i pulumi.IntInput) RegistryTaskScheduleRunNowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RegistryTaskScheduleRunNow {
		return vs[0].([]*RegistryTaskScheduleRunNow)[vs[1].(int)]
	}).(RegistryTaskScheduleRunNowOutput)
}

type RegistryTaskScheduleRunNowMapOutput struct{ *pulumi.OutputState }

func (RegistryTaskScheduleRunNowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RegistryTaskScheduleRunNow)(nil)).Elem()
}

func (o RegistryTaskScheduleRunNowMapOutput) ToRegistryTaskScheduleRunNowMapOutput() RegistryTaskScheduleRunNowMapOutput {
	return o
}

func (o RegistryTaskScheduleRunNowMapOutput) ToRegistryTaskScheduleRunNowMapOutputWithContext(ctx context.Context) RegistryTaskScheduleRunNowMapOutput {
	return o
}

func (o RegistryTaskScheduleRunNowMapOutput) MapIndex(k pulumi.StringInput) RegistryTaskScheduleRunNowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RegistryTaskScheduleRunNow {
		return vs[0].(map[string]*RegistryTaskScheduleRunNow)[vs[1].(string)]
	}).(RegistryTaskScheduleRunNowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTaskScheduleRunNowInput)(nil)).Elem(), &RegistryTaskScheduleRunNow{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTaskScheduleRunNowArrayInput)(nil)).Elem(), RegistryTaskScheduleRunNowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryTaskScheduleRunNowMapInput)(nil)).Elem(), RegistryTaskScheduleRunNowMap{})
	pulumi.RegisterOutputType(RegistryTaskScheduleRunNowOutput{})
	pulumi.RegisterOutputType(RegistryTaskScheduleRunNowArrayOutput{})
	pulumi.RegisterOutputType(RegistryTaskScheduleRunNowMapOutput{})
}
