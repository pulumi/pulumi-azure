// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Manages an Azure Container Registry.
// 
// ~> **Note:** All arguments including the access key will be stored in the raw state as plain-text.
// [Read more about sensitive data in state](/docs/state/sensitive-data.html).
type Registry struct {
	s *pulumi.ResourceState
}

// NewRegistry registers a new resource with the given unique name, arguments, and options.
func NewRegistry(ctx *pulumi.Context,
	name string, args *RegistryArgs, opts ...pulumi.ResourceOpt) (*Registry, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminEnabled"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["resourceGroupName"] = nil
		inputs["sku"] = nil
		inputs["storageAccount"] = nil
		inputs["storageAccountId"] = nil
		inputs["tags"] = nil
	} else {
		inputs["adminEnabled"] = args.AdminEnabled
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["resourceGroupName"] = args.ResourceGroupName
		inputs["sku"] = args.Sku
		inputs["storageAccount"] = args.StorageAccount
		inputs["storageAccountId"] = args.StorageAccountId
		inputs["tags"] = args.Tags
	}
	inputs["adminPassword"] = nil
	inputs["adminUsername"] = nil
	inputs["loginServer"] = nil
	s, err := ctx.RegisterResource("azure:containerservice/registry:Registry", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Registry{s: s}, nil
}

// GetRegistry gets an existing Registry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRegistry(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RegistryState, opts ...pulumi.ResourceOpt) (*Registry, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminEnabled"] = state.AdminEnabled
		inputs["adminPassword"] = state.AdminPassword
		inputs["adminUsername"] = state.AdminUsername
		inputs["location"] = state.Location
		inputs["loginServer"] = state.LoginServer
		inputs["name"] = state.Name
		inputs["resourceGroupName"] = state.ResourceGroupName
		inputs["sku"] = state.Sku
		inputs["storageAccount"] = state.StorageAccount
		inputs["storageAccountId"] = state.StorageAccountId
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("azure:containerservice/registry:Registry", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Registry{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Registry) URN() *pulumi.URNOutput {
	return r.s.URN
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Registry) ID() *pulumi.IDOutput {
	return r.s.ID
}

// Specifies whether the admin user is enabled. Defaults to `false`.
func (r *Registry) AdminEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["adminEnabled"])
}

// The Password associated with the Container Registry Admin account - if the admin account is enabled.
func (r *Registry) AdminPassword() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["adminPassword"])
}

// The Username associated with the Container Registry Admin account - if the admin account is enabled.
func (r *Registry) AdminUsername() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["adminUsername"])
}

// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
func (r *Registry) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

// The URL that can be used to log into the container registry.
func (r *Registry) LoginServer() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["loginServer"])
}

// Specifies the name of the Container Registry. Changing this forces a new resource to be created.
func (r *Registry) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
func (r *Registry) ResourceGroupName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceGroupName"])
}

// The SKU name of the the container registry. Possible values are `Classic` (which was previously `Basic`), `Basic`, `Standard` and `Premium`.
func (r *Registry) Sku() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sku"])
}

func (r *Registry) StorageAccount() *pulumi.Output {
	return r.s.State["storageAccount"]
}

// The ID of a Storage Account which must be located in the same Azure Region as the Container Registry.
func (r *Registry) StorageAccountId() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["storageAccountId"])
}

// A mapping of tags to assign to the resource.
func (r *Registry) Tags() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Registry resources.
type RegistryState struct {
	// Specifies whether the admin user is enabled. Defaults to `false`.
	AdminEnabled interface{}
	// The Password associated with the Container Registry Admin account - if the admin account is enabled.
	AdminPassword interface{}
	// The Username associated with the Container Registry Admin account - if the admin account is enabled.
	AdminUsername interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// The URL that can be used to log into the container registry.
	LoginServer interface{}
	// Specifies the name of the Container Registry. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The SKU name of the the container registry. Possible values are `Classic` (which was previously `Basic`), `Basic`, `Standard` and `Premium`.
	Sku interface{}
	StorageAccount interface{}
	// The ID of a Storage Account which must be located in the same Azure Region as the Container Registry.
	StorageAccountId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a Registry resource.
type RegistryArgs struct {
	// Specifies whether the admin user is enabled. Defaults to `false`.
	AdminEnabled interface{}
	// Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.
	Location interface{}
	// Specifies the name of the Container Registry. Changing this forces a new resource to be created.
	Name interface{}
	// The name of the resource group in which to create the Container Registry. Changing this forces a new resource to be created.
	ResourceGroupName interface{}
	// The SKU name of the the container registry. Possible values are `Classic` (which was previously `Basic`), `Basic`, `Standard` and `Premium`.
	Sku interface{}
	StorageAccount interface{}
	// The ID of a Storage Account which must be located in the same Azure Region as the Container Registry.
	StorageAccountId interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
