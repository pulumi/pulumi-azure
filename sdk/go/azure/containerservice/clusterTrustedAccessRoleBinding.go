// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package containerservice

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// <!-- Note: This documentation is generated. Any manual changes will be overwritten -->
//
// Manages a Kubernetes Cluster Trusted Access Role Binding
// > **Note:** This Resource is in **Preview** to use this you must be opted into the Preview. You can do this by running `az feature register --namespace Microsoft.ContainerService --name TrustedAccessPreview` and then `az provider register -n Microsoft.ContainerService`
// .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/appinsights"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/containerservice"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/keyvault"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/machinelearning"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/storage"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleInsights, err := appinsights.NewInsights(ctx, "exampleInsights", &appinsights.InsightsArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				ApplicationType:   pulumi.String("example-value"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = core.GetClientConfig(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			exampleKeyVault, err := keyvault.NewKeyVault(ctx, "exampleKeyVault", &keyvault.KeyVaultArgs{
//				Location:                exampleResourceGroup.Location,
//				ResourceGroupName:       exampleResourceGroup.Name,
//				TenantId:                pulumi.Any(data.Azurerm_client_config.Example.Tenant_id),
//				SkuName:                 pulumi.String("example-value"),
//				SoftDeleteRetentionDays: pulumi.Int("example-value"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = keyvault.NewAccessPolicy(ctx, "exampleAccessPolicy", &keyvault.AccessPolicyArgs{
//				KeyVaultId:     exampleKeyVault.ID(),
//				TenantId:       pulumi.Any(data.Azurerm_client_config.Example.Tenant_id),
//				ObjectId:       pulumi.Any(data.Azurerm_client_config.Example.Object_id),
//				KeyPermissions: pulumi.StringArray("example-value"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleKubernetesCluster, err := containerservice.NewKubernetesCluster(ctx, "exampleKubernetesCluster", &containerservice.KubernetesClusterArgs{
//				Location:          exampleResourceGroup.Location,
//				ResourceGroupName: exampleResourceGroup.Name,
//				DnsPrefix:         pulumi.String("acctestaksexample"),
//				DefaultNodePool: &containerservice.KubernetesClusterDefaultNodePoolArgs{
//					Name:      pulumi.String("example-value"),
//					NodeCount: pulumi.Int("example-value"),
//					VmSize:    pulumi.String("example-value"),
//				},
//				Identity: &containerservice.KubernetesClusterIdentityArgs{
//					Type: pulumi.String("example-value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleAccount, err := storage.NewAccount(ctx, "exampleAccount", &storage.AccountArgs{
//				Location:               exampleResourceGroup.Location,
//				ResourceGroupName:      exampleResourceGroup.Name,
//				AccountTier:            pulumi.String("example-value"),
//				AccountReplicationType: pulumi.String("example-value"),
//			})
//			if err != nil {
//				return err
//			}
//			exampleWorkspace, err := machinelearning.NewWorkspace(ctx, "exampleWorkspace", &machinelearning.WorkspaceArgs{
//				Location:              exampleResourceGroup.Location,
//				ResourceGroupName:     exampleResourceGroup.Name,
//				KeyVaultId:            exampleKeyVault.ID(),
//				StorageAccountId:      exampleAccount.ID(),
//				ApplicationInsightsId: exampleInsights.ID(),
//				Identity: &machinelearning.WorkspaceIdentityArgs{
//					Type: pulumi.String("example-value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = containerservice.NewClusterTrustedAccessRoleBinding(ctx, "exampleClusterTrustedAccessRoleBinding", &containerservice.ClusterTrustedAccessRoleBindingArgs{
//				KubernetesClusterId: exampleKubernetesCluster.ID(),
//				Roles:               pulumi.StringArray("example-value"),
//				SourceResourceId:    exampleWorkspace.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// An existing Kubernetes Cluster Trusted Access Role Binding can be imported into Terraform using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:containerservice/clusterTrustedAccessRoleBinding:ClusterTrustedAccessRoleBinding example /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{managedClusterName}/trustedAccessRoleBindings/{trustedAccessRoleBindingName}
//
// ```
//
//   - Where `{subscriptionId}` is the ID of the Azure Subscription where the Kubernetes Cluster Trusted Access Role Binding exists. For example `12345678-1234-9876-4563-123456789012`. * Where `{resourceGroupName}` is the name of Resource Group where this Kubernetes Cluster Trusted Access Role Binding exists. For example `example-resource-group`. * Where `{managedClusterName}` is the name of the Managed Cluster. For example `managedClusterValue`. * Where `{trustedAccessRoleBindingName}` is the name of the Trusted Access Role Binding. For example `trustedAccessRoleBindingValue`.
type ClusterTrustedAccessRoleBinding struct {
	pulumi.CustomResourceState

	// Specifies the Kubernetes Cluster Id within which this Kubernetes Cluster Trusted Access Role Binding should exist. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	KubernetesClusterId pulumi.StringOutput `pulumi:"kubernetesClusterId"`
	// Specifies the name of this Kubernetes Cluster Trusted Access Role Binding. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of roles to bind, each item is a resource type qualified role name.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// The ARM resource ID of source resource that trusted access is configured for. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	SourceResourceId pulumi.StringOutput `pulumi:"sourceResourceId"`
}

// NewClusterTrustedAccessRoleBinding registers a new resource with the given unique name, arguments, and options.
func NewClusterTrustedAccessRoleBinding(ctx *pulumi.Context,
	name string, args *ClusterTrustedAccessRoleBindingArgs, opts ...pulumi.ResourceOption) (*ClusterTrustedAccessRoleBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KubernetesClusterId == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesClusterId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.SourceResourceId == nil {
		return nil, errors.New("invalid value for required argument 'SourceResourceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ClusterTrustedAccessRoleBinding
	err := ctx.RegisterResource("azure:containerservice/clusterTrustedAccessRoleBinding:ClusterTrustedAccessRoleBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClusterTrustedAccessRoleBinding gets an existing ClusterTrustedAccessRoleBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClusterTrustedAccessRoleBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterTrustedAccessRoleBindingState, opts ...pulumi.ResourceOption) (*ClusterTrustedAccessRoleBinding, error) {
	var resource ClusterTrustedAccessRoleBinding
	err := ctx.ReadResource("azure:containerservice/clusterTrustedAccessRoleBinding:ClusterTrustedAccessRoleBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ClusterTrustedAccessRoleBinding resources.
type clusterTrustedAccessRoleBindingState struct {
	// Specifies the Kubernetes Cluster Id within which this Kubernetes Cluster Trusted Access Role Binding should exist. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	KubernetesClusterId *string `pulumi:"kubernetesClusterId"`
	// Specifies the name of this Kubernetes Cluster Trusted Access Role Binding. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	Name *string `pulumi:"name"`
	// A list of roles to bind, each item is a resource type qualified role name.
	Roles []string `pulumi:"roles"`
	// The ARM resource ID of source resource that trusted access is configured for. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	SourceResourceId *string `pulumi:"sourceResourceId"`
}

type ClusterTrustedAccessRoleBindingState struct {
	// Specifies the Kubernetes Cluster Id within which this Kubernetes Cluster Trusted Access Role Binding should exist. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	KubernetesClusterId pulumi.StringPtrInput
	// Specifies the name of this Kubernetes Cluster Trusted Access Role Binding. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	Name pulumi.StringPtrInput
	// A list of roles to bind, each item is a resource type qualified role name.
	Roles pulumi.StringArrayInput
	// The ARM resource ID of source resource that trusted access is configured for. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	SourceResourceId pulumi.StringPtrInput
}

func (ClusterTrustedAccessRoleBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterTrustedAccessRoleBindingState)(nil)).Elem()
}

type clusterTrustedAccessRoleBindingArgs struct {
	// Specifies the Kubernetes Cluster Id within which this Kubernetes Cluster Trusted Access Role Binding should exist. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	KubernetesClusterId string `pulumi:"kubernetesClusterId"`
	// Specifies the name of this Kubernetes Cluster Trusted Access Role Binding. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	Name *string `pulumi:"name"`
	// A list of roles to bind, each item is a resource type qualified role name.
	Roles []string `pulumi:"roles"`
	// The ARM resource ID of source resource that trusted access is configured for. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	SourceResourceId string `pulumi:"sourceResourceId"`
}

// The set of arguments for constructing a ClusterTrustedAccessRoleBinding resource.
type ClusterTrustedAccessRoleBindingArgs struct {
	// Specifies the Kubernetes Cluster Id within which this Kubernetes Cluster Trusted Access Role Binding should exist. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	KubernetesClusterId pulumi.StringInput
	// Specifies the name of this Kubernetes Cluster Trusted Access Role Binding. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	Name pulumi.StringPtrInput
	// A list of roles to bind, each item is a resource type qualified role name.
	Roles pulumi.StringArrayInput
	// The ARM resource ID of source resource that trusted access is configured for. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
	SourceResourceId pulumi.StringInput
}

func (ClusterTrustedAccessRoleBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterTrustedAccessRoleBindingArgs)(nil)).Elem()
}

type ClusterTrustedAccessRoleBindingInput interface {
	pulumi.Input

	ToClusterTrustedAccessRoleBindingOutput() ClusterTrustedAccessRoleBindingOutput
	ToClusterTrustedAccessRoleBindingOutputWithContext(ctx context.Context) ClusterTrustedAccessRoleBindingOutput
}

func (*ClusterTrustedAccessRoleBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTrustedAccessRoleBinding)(nil)).Elem()
}

func (i *ClusterTrustedAccessRoleBinding) ToClusterTrustedAccessRoleBindingOutput() ClusterTrustedAccessRoleBindingOutput {
	return i.ToClusterTrustedAccessRoleBindingOutputWithContext(context.Background())
}

func (i *ClusterTrustedAccessRoleBinding) ToClusterTrustedAccessRoleBindingOutputWithContext(ctx context.Context) ClusterTrustedAccessRoleBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustedAccessRoleBindingOutput)
}

// ClusterTrustedAccessRoleBindingArrayInput is an input type that accepts ClusterTrustedAccessRoleBindingArray and ClusterTrustedAccessRoleBindingArrayOutput values.
// You can construct a concrete instance of `ClusterTrustedAccessRoleBindingArrayInput` via:
//
//	ClusterTrustedAccessRoleBindingArray{ ClusterTrustedAccessRoleBindingArgs{...} }
type ClusterTrustedAccessRoleBindingArrayInput interface {
	pulumi.Input

	ToClusterTrustedAccessRoleBindingArrayOutput() ClusterTrustedAccessRoleBindingArrayOutput
	ToClusterTrustedAccessRoleBindingArrayOutputWithContext(context.Context) ClusterTrustedAccessRoleBindingArrayOutput
}

type ClusterTrustedAccessRoleBindingArray []ClusterTrustedAccessRoleBindingInput

func (ClusterTrustedAccessRoleBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterTrustedAccessRoleBinding)(nil)).Elem()
}

func (i ClusterTrustedAccessRoleBindingArray) ToClusterTrustedAccessRoleBindingArrayOutput() ClusterTrustedAccessRoleBindingArrayOutput {
	return i.ToClusterTrustedAccessRoleBindingArrayOutputWithContext(context.Background())
}

func (i ClusterTrustedAccessRoleBindingArray) ToClusterTrustedAccessRoleBindingArrayOutputWithContext(ctx context.Context) ClusterTrustedAccessRoleBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustedAccessRoleBindingArrayOutput)
}

// ClusterTrustedAccessRoleBindingMapInput is an input type that accepts ClusterTrustedAccessRoleBindingMap and ClusterTrustedAccessRoleBindingMapOutput values.
// You can construct a concrete instance of `ClusterTrustedAccessRoleBindingMapInput` via:
//
//	ClusterTrustedAccessRoleBindingMap{ "key": ClusterTrustedAccessRoleBindingArgs{...} }
type ClusterTrustedAccessRoleBindingMapInput interface {
	pulumi.Input

	ToClusterTrustedAccessRoleBindingMapOutput() ClusterTrustedAccessRoleBindingMapOutput
	ToClusterTrustedAccessRoleBindingMapOutputWithContext(context.Context) ClusterTrustedAccessRoleBindingMapOutput
}

type ClusterTrustedAccessRoleBindingMap map[string]ClusterTrustedAccessRoleBindingInput

func (ClusterTrustedAccessRoleBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterTrustedAccessRoleBinding)(nil)).Elem()
}

func (i ClusterTrustedAccessRoleBindingMap) ToClusterTrustedAccessRoleBindingMapOutput() ClusterTrustedAccessRoleBindingMapOutput {
	return i.ToClusterTrustedAccessRoleBindingMapOutputWithContext(context.Background())
}

func (i ClusterTrustedAccessRoleBindingMap) ToClusterTrustedAccessRoleBindingMapOutputWithContext(ctx context.Context) ClusterTrustedAccessRoleBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterTrustedAccessRoleBindingMapOutput)
}

type ClusterTrustedAccessRoleBindingOutput struct{ *pulumi.OutputState }

func (ClusterTrustedAccessRoleBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClusterTrustedAccessRoleBinding)(nil)).Elem()
}

func (o ClusterTrustedAccessRoleBindingOutput) ToClusterTrustedAccessRoleBindingOutput() ClusterTrustedAccessRoleBindingOutput {
	return o
}

func (o ClusterTrustedAccessRoleBindingOutput) ToClusterTrustedAccessRoleBindingOutputWithContext(ctx context.Context) ClusterTrustedAccessRoleBindingOutput {
	return o
}

// Specifies the Kubernetes Cluster Id within which this Kubernetes Cluster Trusted Access Role Binding should exist. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
func (o ClusterTrustedAccessRoleBindingOutput) KubernetesClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterTrustedAccessRoleBinding) pulumi.StringOutput { return v.KubernetesClusterId }).(pulumi.StringOutput)
}

// Specifies the name of this Kubernetes Cluster Trusted Access Role Binding. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
func (o ClusterTrustedAccessRoleBindingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterTrustedAccessRoleBinding) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A list of roles to bind, each item is a resource type qualified role name.
func (o ClusterTrustedAccessRoleBindingOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ClusterTrustedAccessRoleBinding) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

// The ARM resource ID of source resource that trusted access is configured for. Changing this forces a new Kubernetes Cluster Trusted Access Role Binding to be created.
func (o ClusterTrustedAccessRoleBindingOutput) SourceResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ClusterTrustedAccessRoleBinding) pulumi.StringOutput { return v.SourceResourceId }).(pulumi.StringOutput)
}

type ClusterTrustedAccessRoleBindingArrayOutput struct{ *pulumi.OutputState }

func (ClusterTrustedAccessRoleBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ClusterTrustedAccessRoleBinding)(nil)).Elem()
}

func (o ClusterTrustedAccessRoleBindingArrayOutput) ToClusterTrustedAccessRoleBindingArrayOutput() ClusterTrustedAccessRoleBindingArrayOutput {
	return o
}

func (o ClusterTrustedAccessRoleBindingArrayOutput) ToClusterTrustedAccessRoleBindingArrayOutputWithContext(ctx context.Context) ClusterTrustedAccessRoleBindingArrayOutput {
	return o
}

func (o ClusterTrustedAccessRoleBindingArrayOutput) Index(i pulumi.IntInput) ClusterTrustedAccessRoleBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ClusterTrustedAccessRoleBinding {
		return vs[0].([]*ClusterTrustedAccessRoleBinding)[vs[1].(int)]
	}).(ClusterTrustedAccessRoleBindingOutput)
}

type ClusterTrustedAccessRoleBindingMapOutput struct{ *pulumi.OutputState }

func (ClusterTrustedAccessRoleBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ClusterTrustedAccessRoleBinding)(nil)).Elem()
}

func (o ClusterTrustedAccessRoleBindingMapOutput) ToClusterTrustedAccessRoleBindingMapOutput() ClusterTrustedAccessRoleBindingMapOutput {
	return o
}

func (o ClusterTrustedAccessRoleBindingMapOutput) ToClusterTrustedAccessRoleBindingMapOutputWithContext(ctx context.Context) ClusterTrustedAccessRoleBindingMapOutput {
	return o
}

func (o ClusterTrustedAccessRoleBindingMapOutput) MapIndex(k pulumi.StringInput) ClusterTrustedAccessRoleBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ClusterTrustedAccessRoleBinding {
		return vs[0].(map[string]*ClusterTrustedAccessRoleBinding)[vs[1].(string)]
	}).(ClusterTrustedAccessRoleBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustedAccessRoleBindingInput)(nil)).Elem(), &ClusterTrustedAccessRoleBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustedAccessRoleBindingArrayInput)(nil)).Elem(), ClusterTrustedAccessRoleBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterTrustedAccessRoleBindingMapInput)(nil)).Elem(), ClusterTrustedAccessRoleBindingMap{})
	pulumi.RegisterOutputType(ClusterTrustedAccessRoleBindingOutput{})
	pulumi.RegisterOutputType(ClusterTrustedAccessRoleBindingArrayOutput{})
	pulumi.RegisterOutputType(ClusterTrustedAccessRoleBindingMapOutput{})
}
