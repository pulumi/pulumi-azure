// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package aadb2c

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages an AAD B2C Directory.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-azure/sdk/v4/go/azure/aadb2c"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := aadb2c.NewDirectory(ctx, "example", &aadb2c.DirectoryArgs{
// 			CountryCode:           pulumi.String("US"),
// 			DataResidencyLocation: pulumi.String("United States"),
// 			DisplayName:           pulumi.String("example-b2c-tenant"),
// 			DomainName:            pulumi.String("exampleb2ctenant.onmicrosoft.com"),
// 			ResourceGroupName:     pulumi.String("example-rg"),
// 			SkuName:               pulumi.String("PremiumP1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AAD B2C Directories can be imported using the `resource id`, e.g.
//
// ```sh
//  $ pulumi import azure:aadb2c/directory:Directory example /subscriptions/12345678-1234-9876-4563-123456789012/resourceGroups/example-resource-group/providers/Microsoft.AzureActiveDirectory/b2cDirectories/directory-name
// ```
type Directory struct {
	pulumi.CustomResourceState

	// The type of billing for the AAD B2C tenant. Possible values include: `MAU` or `Auths`.
	BillingType pulumi.StringOutput `pulumi:"billingType"`
	// Country code of the B2C tenant. The `countryCode` should be valid for the specified `dataResidencyLocation`. See [official docs](https://aka.ms/B2CDataResidency) for valid country codes. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	CountryCode pulumi.StringOutput `pulumi:"countryCode"`
	// Location in which the B2C tenant is hosted and data resides. The `dataResidencyLocation` should be valid for the specified `countryCode`. See [official docs](https://aka.ms/B2CDataResidenc) for more information. Changing this forces a new AAD B2C Directory to be created.
	DataResidencyLocation pulumi.StringOutput `pulumi:"dataResidencyLocation"`
	// The initial display name of the B2C tenant. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Domain name of the B2C tenant, including the `.onmicrosoft.com` suffix. Changing this forces a new AAD B2C Directory to be created.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The date from which the billing type took effect. May not be populated until after the first billing cycle.
	EffectiveStartDate pulumi.StringOutput `pulumi:"effectiveStartDate"`
	// The name of the Resource Group where the AAD B2C Directory should exist. Changing this forces a new AAD B2C Directory to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// Billing SKU for the B2C tenant. Must be one of: `PremiumP1` or `PremiumP2` (`Standard` is not supported). See [official docs](https://aka.ms/b2cBilling) for more information.
	SkuName pulumi.StringOutput `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the AAD B2C Directory.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The Tenant ID for the AAD B2C tenant.
	TenantId pulumi.StringOutput `pulumi:"tenantId"`
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args *DirectoryArgs, opts ...pulumi.ResourceOption) (*Directory, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataResidencyLocation == nil {
		return nil, errors.New("invalid value for required argument 'DataResidencyLocation'")
	}
	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.SkuName == nil {
		return nil, errors.New("invalid value for required argument 'SkuName'")
	}
	var resource Directory
	err := ctx.RegisterResource("azure:aadb2c/directory:Directory", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDirectory gets an existing Directory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectory(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DirectoryState, opts ...pulumi.ResourceOption) (*Directory, error) {
	var resource Directory
	err := ctx.ReadResource("azure:aadb2c/directory:Directory", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Directory resources.
type directoryState struct {
	// The type of billing for the AAD B2C tenant. Possible values include: `MAU` or `Auths`.
	BillingType *string `pulumi:"billingType"`
	// Country code of the B2C tenant. The `countryCode` should be valid for the specified `dataResidencyLocation`. See [official docs](https://aka.ms/B2CDataResidency) for valid country codes. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	CountryCode *string `pulumi:"countryCode"`
	// Location in which the B2C tenant is hosted and data resides. The `dataResidencyLocation` should be valid for the specified `countryCode`. See [official docs](https://aka.ms/B2CDataResidenc) for more information. Changing this forces a new AAD B2C Directory to be created.
	DataResidencyLocation *string `pulumi:"dataResidencyLocation"`
	// The initial display name of the B2C tenant. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	DisplayName *string `pulumi:"displayName"`
	// Domain name of the B2C tenant, including the `.onmicrosoft.com` suffix. Changing this forces a new AAD B2C Directory to be created.
	DomainName *string `pulumi:"domainName"`
	// The date from which the billing type took effect. May not be populated until after the first billing cycle.
	EffectiveStartDate *string `pulumi:"effectiveStartDate"`
	// The name of the Resource Group where the AAD B2C Directory should exist. Changing this forces a new AAD B2C Directory to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// Billing SKU for the B2C tenant. Must be one of: `PremiumP1` or `PremiumP2` (`Standard` is not supported). See [official docs](https://aka.ms/b2cBilling) for more information.
	SkuName *string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the AAD B2C Directory.
	Tags map[string]string `pulumi:"tags"`
	// The Tenant ID for the AAD B2C tenant.
	TenantId *string `pulumi:"tenantId"`
}

type DirectoryState struct {
	// The type of billing for the AAD B2C tenant. Possible values include: `MAU` or `Auths`.
	BillingType pulumi.StringPtrInput
	// Country code of the B2C tenant. The `countryCode` should be valid for the specified `dataResidencyLocation`. See [official docs](https://aka.ms/B2CDataResidency) for valid country codes. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	CountryCode pulumi.StringPtrInput
	// Location in which the B2C tenant is hosted and data resides. The `dataResidencyLocation` should be valid for the specified `countryCode`. See [official docs](https://aka.ms/B2CDataResidenc) for more information. Changing this forces a new AAD B2C Directory to be created.
	DataResidencyLocation pulumi.StringPtrInput
	// The initial display name of the B2C tenant. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	DisplayName pulumi.StringPtrInput
	// Domain name of the B2C tenant, including the `.onmicrosoft.com` suffix. Changing this forces a new AAD B2C Directory to be created.
	DomainName pulumi.StringPtrInput
	// The date from which the billing type took effect. May not be populated until after the first billing cycle.
	EffectiveStartDate pulumi.StringPtrInput
	// The name of the Resource Group where the AAD B2C Directory should exist. Changing this forces a new AAD B2C Directory to be created.
	ResourceGroupName pulumi.StringPtrInput
	// Billing SKU for the B2C tenant. Must be one of: `PremiumP1` or `PremiumP2` (`Standard` is not supported). See [official docs](https://aka.ms/b2cBilling) for more information.
	SkuName pulumi.StringPtrInput
	// A mapping of tags which should be assigned to the AAD B2C Directory.
	Tags pulumi.StringMapInput
	// The Tenant ID for the AAD B2C tenant.
	TenantId pulumi.StringPtrInput
}

func (DirectoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryState)(nil)).Elem()
}

type directoryArgs struct {
	// Country code of the B2C tenant. The `countryCode` should be valid for the specified `dataResidencyLocation`. See [official docs](https://aka.ms/B2CDataResidency) for valid country codes. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	CountryCode *string `pulumi:"countryCode"`
	// Location in which the B2C tenant is hosted and data resides. The `dataResidencyLocation` should be valid for the specified `countryCode`. See [official docs](https://aka.ms/B2CDataResidenc) for more information. Changing this forces a new AAD B2C Directory to be created.
	DataResidencyLocation string `pulumi:"dataResidencyLocation"`
	// The initial display name of the B2C tenant. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	DisplayName *string `pulumi:"displayName"`
	// Domain name of the B2C tenant, including the `.onmicrosoft.com` suffix. Changing this forces a new AAD B2C Directory to be created.
	DomainName string `pulumi:"domainName"`
	// The name of the Resource Group where the AAD B2C Directory should exist. Changing this forces a new AAD B2C Directory to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Billing SKU for the B2C tenant. Must be one of: `PremiumP1` or `PremiumP2` (`Standard` is not supported). See [official docs](https://aka.ms/b2cBilling) for more information.
	SkuName string `pulumi:"skuName"`
	// A mapping of tags which should be assigned to the AAD B2C Directory.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Directory resource.
type DirectoryArgs struct {
	// Country code of the B2C tenant. The `countryCode` should be valid for the specified `dataResidencyLocation`. See [official docs](https://aka.ms/B2CDataResidency) for valid country codes. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	CountryCode pulumi.StringPtrInput
	// Location in which the B2C tenant is hosted and data resides. The `dataResidencyLocation` should be valid for the specified `countryCode`. See [official docs](https://aka.ms/B2CDataResidenc) for more information. Changing this forces a new AAD B2C Directory to be created.
	DataResidencyLocation pulumi.StringInput
	// The initial display name of the B2C tenant. Required when creating a new resource. Changing this forces a new AAD B2C Directory to be created.
	DisplayName pulumi.StringPtrInput
	// Domain name of the B2C tenant, including the `.onmicrosoft.com` suffix. Changing this forces a new AAD B2C Directory to be created.
	DomainName pulumi.StringInput
	// The name of the Resource Group where the AAD B2C Directory should exist. Changing this forces a new AAD B2C Directory to be created.
	ResourceGroupName pulumi.StringInput
	// Billing SKU for the B2C tenant. Must be one of: `PremiumP1` or `PremiumP2` (`Standard` is not supported). See [official docs](https://aka.ms/b2cBilling) for more information.
	SkuName pulumi.StringInput
	// A mapping of tags which should be assigned to the AAD B2C Directory.
	Tags pulumi.StringMapInput
}

func (DirectoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*directoryArgs)(nil)).Elem()
}

type DirectoryInput interface {
	pulumi.Input

	ToDirectoryOutput() DirectoryOutput
	ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput
}

func (*Directory) ElementType() reflect.Type {
	return reflect.TypeOf((*Directory)(nil))
}

func (i *Directory) ToDirectoryOutput() DirectoryOutput {
	return i.ToDirectoryOutputWithContext(context.Background())
}

func (i *Directory) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryOutput)
}

func (i *Directory) ToDirectoryPtrOutput() DirectoryPtrOutput {
	return i.ToDirectoryPtrOutputWithContext(context.Background())
}

func (i *Directory) ToDirectoryPtrOutputWithContext(ctx context.Context) DirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryPtrOutput)
}

type DirectoryPtrInput interface {
	pulumi.Input

	ToDirectoryPtrOutput() DirectoryPtrOutput
	ToDirectoryPtrOutputWithContext(ctx context.Context) DirectoryPtrOutput
}

type directoryPtrType DirectoryArgs

func (*directoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil))
}

func (i *directoryPtrType) ToDirectoryPtrOutput() DirectoryPtrOutput {
	return i.ToDirectoryPtrOutputWithContext(context.Background())
}

func (i *directoryPtrType) ToDirectoryPtrOutputWithContext(ctx context.Context) DirectoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryPtrOutput)
}

// DirectoryArrayInput is an input type that accepts DirectoryArray and DirectoryArrayOutput values.
// You can construct a concrete instance of `DirectoryArrayInput` via:
//
//          DirectoryArray{ DirectoryArgs{...} }
type DirectoryArrayInput interface {
	pulumi.Input

	ToDirectoryArrayOutput() DirectoryArrayOutput
	ToDirectoryArrayOutputWithContext(context.Context) DirectoryArrayOutput
}

type DirectoryArray []DirectoryInput

func (DirectoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Directory)(nil)).Elem()
}

func (i DirectoryArray) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return i.ToDirectoryArrayOutputWithContext(context.Background())
}

func (i DirectoryArray) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryArrayOutput)
}

// DirectoryMapInput is an input type that accepts DirectoryMap and DirectoryMapOutput values.
// You can construct a concrete instance of `DirectoryMapInput` via:
//
//          DirectoryMap{ "key": DirectoryArgs{...} }
type DirectoryMapInput interface {
	pulumi.Input

	ToDirectoryMapOutput() DirectoryMapOutput
	ToDirectoryMapOutputWithContext(context.Context) DirectoryMapOutput
}

type DirectoryMap map[string]DirectoryInput

func (DirectoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Directory)(nil)).Elem()
}

func (i DirectoryMap) ToDirectoryMapOutput() DirectoryMapOutput {
	return i.ToDirectoryMapOutputWithContext(context.Background())
}

func (i DirectoryMap) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DirectoryMapOutput)
}

type DirectoryOutput struct{ *pulumi.OutputState }

func (DirectoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Directory)(nil))
}

func (o DirectoryOutput) ToDirectoryOutput() DirectoryOutput {
	return o
}

func (o DirectoryOutput) ToDirectoryOutputWithContext(ctx context.Context) DirectoryOutput {
	return o
}

func (o DirectoryOutput) ToDirectoryPtrOutput() DirectoryPtrOutput {
	return o.ToDirectoryPtrOutputWithContext(context.Background())
}

func (o DirectoryOutput) ToDirectoryPtrOutputWithContext(ctx context.Context) DirectoryPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v Directory) *Directory {
		return &v
	}).(DirectoryPtrOutput)
}

type DirectoryPtrOutput struct{ *pulumi.OutputState }

func (DirectoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Directory)(nil))
}

func (o DirectoryPtrOutput) ToDirectoryPtrOutput() DirectoryPtrOutput {
	return o
}

func (o DirectoryPtrOutput) ToDirectoryPtrOutputWithContext(ctx context.Context) DirectoryPtrOutput {
	return o
}

func (o DirectoryPtrOutput) Elem() DirectoryOutput {
	return o.ApplyT(func(v *Directory) Directory {
		if v != nil {
			return *v
		}
		var ret Directory
		return ret
	}).(DirectoryOutput)
}

type DirectoryArrayOutput struct{ *pulumi.OutputState }

func (DirectoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Directory)(nil))
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutput() DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) ToDirectoryArrayOutputWithContext(ctx context.Context) DirectoryArrayOutput {
	return o
}

func (o DirectoryArrayOutput) Index(i pulumi.IntInput) DirectoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Directory {
		return vs[0].([]Directory)[vs[1].(int)]
	}).(DirectoryOutput)
}

type DirectoryMapOutput struct{ *pulumi.OutputState }

func (DirectoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]Directory)(nil))
}

func (o DirectoryMapOutput) ToDirectoryMapOutput() DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) ToDirectoryMapOutputWithContext(ctx context.Context) DirectoryMapOutput {
	return o
}

func (o DirectoryMapOutput) MapIndex(k pulumi.StringInput) DirectoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) Directory {
		return vs[0].(map[string]Directory)[vs[1].(string)]
	}).(DirectoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryInput)(nil)).Elem(), &Directory{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryPtrInput)(nil)).Elem(), &Directory{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryArrayInput)(nil)).Elem(), DirectoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DirectoryMapInput)(nil)).Elem(), DirectoryMap{})
	pulumi.RegisterOutputType(DirectoryOutput{})
	pulumi.RegisterOutputType(DirectoryPtrOutput{})
	pulumi.RegisterOutputType(DirectoryArrayOutput{})
	pulumi.RegisterOutputType(DirectoryMapOutput{})
}
