// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Virtual Desktop Host Pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/desktopvirtualization"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := desktopvirtualization.LookupHostPool(ctx, &desktopvirtualization.LookupHostPoolArgs{
//				Name:              "example-pool",
//				ResourceGroupName: "example-resources",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupHostPool(ctx *pulumi.Context, args *LookupHostPoolArgs, opts ...pulumi.InvokeOption) (*LookupHostPoolResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupHostPoolResult
	err := ctx.Invoke("azure:desktopvirtualization/getHostPool:getHostPool", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHostPool.
type LookupHostPoolArgs struct {
	// The name of the Virtual Desktop Host Pool to retrieve.
	Name string `pulumi:"name"`
	// The name of the resource group where the Virtual Desktop Host Pool exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getHostPool.
type LookupHostPoolResult struct {
	// The custom RDP properties string for the Virtual Desktop Host Pool.
	CustomRdpProperties string `pulumi:"customRdpProperties"`
	// The description for the Virtual Desktop Host Pool.
	Description string `pulumi:"description"`
	// The friendly name for the Virtual Desktop Host Pool.
	FriendlyName string `pulumi:"friendlyName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The type of load balancing performed by the Host Pool
	LoadBalancerType string `pulumi:"loadBalancerType"`
	// The location/region where the Virtual Desktop Host Pool is located.
	Location string `pulumi:"location"`
	// The maximum number of users that can have concurrent sessions on a session host.
	MaximumSessionsAllowed int    `pulumi:"maximumSessionsAllowed"`
	Name                   string `pulumi:"name"`
	// The type of personal desktop assignment in use by the Host Pool
	PersonalDesktopAssignmentType string `pulumi:"personalDesktopAssignmentType"`
	// The preferred Application Group type for the Virtual Desktop Host Pool.
	PreferredAppGroupType string `pulumi:"preferredAppGroupType"`
	ResourceGroupName     string `pulumi:"resourceGroupName"`
	// A `scheduledAgentUpdates` block as defined below.
	ScheduledAgentUpdates []GetHostPoolScheduledAgentUpdate `pulumi:"scheduledAgentUpdates"`
	// Returns `true` if the Start VM on Connection Feature is enabled.
	StartVmOnConnect bool `pulumi:"startVmOnConnect"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of the Virtual Desktop Host Pool.
	Type string `pulumi:"type"`
	// Returns `true` if the Host Pool is in Validation mode.
	ValidateEnvironment bool `pulumi:"validateEnvironment"`
}

func LookupHostPoolOutput(ctx *pulumi.Context, args LookupHostPoolOutputArgs, opts ...pulumi.InvokeOption) LookupHostPoolResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupHostPoolResult, error) {
			args := v.(LookupHostPoolArgs)
			r, err := LookupHostPool(ctx, &args, opts...)
			var s LookupHostPoolResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupHostPoolResultOutput)
}

// A collection of arguments for invoking getHostPool.
type LookupHostPoolOutputArgs struct {
	// The name of the Virtual Desktop Host Pool to retrieve.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the resource group where the Virtual Desktop Host Pool exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupHostPoolOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHostPoolArgs)(nil)).Elem()
}

// A collection of values returned by getHostPool.
type LookupHostPoolResultOutput struct{ *pulumi.OutputState }

func (LookupHostPoolResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupHostPoolResult)(nil)).Elem()
}

func (o LookupHostPoolResultOutput) ToLookupHostPoolResultOutput() LookupHostPoolResultOutput {
	return o
}

func (o LookupHostPoolResultOutput) ToLookupHostPoolResultOutputWithContext(ctx context.Context) LookupHostPoolResultOutput {
	return o
}

// The custom RDP properties string for the Virtual Desktop Host Pool.
func (o LookupHostPoolResultOutput) CustomRdpProperties() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.CustomRdpProperties }).(pulumi.StringOutput)
}

// The description for the Virtual Desktop Host Pool.
func (o LookupHostPoolResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.Description }).(pulumi.StringOutput)
}

// The friendly name for the Virtual Desktop Host Pool.
func (o LookupHostPoolResultOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.FriendlyName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupHostPoolResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.Id }).(pulumi.StringOutput)
}

// The type of load balancing performed by the Host Pool
func (o LookupHostPoolResultOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// The location/region where the Virtual Desktop Host Pool is located.
func (o LookupHostPoolResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.Location }).(pulumi.StringOutput)
}

// The maximum number of users that can have concurrent sessions on a session host.
func (o LookupHostPoolResultOutput) MaximumSessionsAllowed() pulumi.IntOutput {
	return o.ApplyT(func(v LookupHostPoolResult) int { return v.MaximumSessionsAllowed }).(pulumi.IntOutput)
}

func (o LookupHostPoolResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.Name }).(pulumi.StringOutput)
}

// The type of personal desktop assignment in use by the Host Pool
func (o LookupHostPoolResultOutput) PersonalDesktopAssignmentType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.PersonalDesktopAssignmentType }).(pulumi.StringOutput)
}

// The preferred Application Group type for the Virtual Desktop Host Pool.
func (o LookupHostPoolResultOutput) PreferredAppGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.PreferredAppGroupType }).(pulumi.StringOutput)
}

func (o LookupHostPoolResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `scheduledAgentUpdates` block as defined below.
func (o LookupHostPoolResultOutput) ScheduledAgentUpdates() GetHostPoolScheduledAgentUpdateArrayOutput {
	return o.ApplyT(func(v LookupHostPoolResult) []GetHostPoolScheduledAgentUpdate { return v.ScheduledAgentUpdates }).(GetHostPoolScheduledAgentUpdateArrayOutput)
}

// Returns `true` if the Start VM on Connection Feature is enabled.
func (o LookupHostPoolResultOutput) StartVmOnConnect() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostPoolResult) bool { return v.StartVmOnConnect }).(pulumi.BoolOutput)
}

// A mapping of tags to assign to the resource.
func (o LookupHostPoolResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupHostPoolResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the Virtual Desktop Host Pool.
func (o LookupHostPoolResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupHostPoolResult) string { return v.Type }).(pulumi.StringOutput)
}

// Returns `true` if the Host Pool is in Validation mode.
func (o LookupHostPoolResultOutput) ValidateEnvironment() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupHostPoolResult) bool { return v.ValidateEnvironment }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupHostPoolResultOutput{})
}
