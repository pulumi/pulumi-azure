// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Virtual Desktop Host Pool.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/desktopvirtualization"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleResourceGroup, err := core.NewResourceGroup(ctx, "exampleResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = desktopvirtualization.NewHostPool(ctx, "exampleHostPool", &desktopvirtualization.HostPoolArgs{
//				Location:               exampleResourceGroup.Location,
//				ResourceGroupName:      exampleResourceGroup.Name,
//				FriendlyName:           pulumi.String("pooleddepthfirst"),
//				ValidateEnvironment:    pulumi.Bool(true),
//				StartVmOnConnect:       pulumi.Bool(true),
//				CustomRdpProperties:    pulumi.String("audiocapturemode:i:1;audiomode:i:0;"),
//				Description:            pulumi.String("Acceptance Test: A pooled host pool - pooleddepthfirst"),
//				Type:                   pulumi.String("Pooled"),
//				MaximumSessionsAllowed: pulumi.Int(50),
//				LoadBalancerType:       pulumi.String("DepthFirst"),
//				ScheduledAgentUpdates: &desktopvirtualization.HostPoolScheduledAgentUpdatesArgs{
//					Enabled: pulumi.Bool(true),
//					Schedules: desktopvirtualization.HostPoolScheduledAgentUpdatesScheduleArray{
//						&desktopvirtualization.HostPoolScheduledAgentUpdatesScheduleArgs{
//							DayOfWeek: pulumi.String("Saturday"),
//							HourOfDay: pulumi.Int(2),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Desktop Host Pools can be imported using the `resource id`, e.g. text
//
// ```sh
//
//	$ pulumi import azure:desktopvirtualization/hostPool:HostPool example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/hostPools/myhostpool
//
// ```
type HostPool struct {
	pulumi.CustomResourceState

	// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
	CustomRdpProperties pulumi.StringPtrOutput `pulumi:"customRdpProperties"`
	// A description for the Virtual Desktop Host Pool.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A friendly name for the Virtual Desktop Host Pool.
	FriendlyName pulumi.StringPtrOutput `pulumi:"friendlyName"`
	// `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
	// `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
	// `Persistent` should be used if the host pool type is `Personal`
	LoadBalancerType pulumi.StringOutput `pulumi:"loadBalancerType"`
	// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
	// Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
	MaximumSessionsAllowed pulumi.IntPtrOutput `pulumi:"maximumSessionsAllowed"`
	// The name of the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`. `Direct` Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `personalDesktopAssignmentType` is required if the `type` of your Virtual Desktop Host Pool is `Personal`
	PersonalDesktopAssignmentType pulumi.StringPtrOutput `pulumi:"personalDesktopAssignmentType"`
	// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `Desktop`. Changing this forces a new resource to be created.
	PreferredAppGroupType pulumi.StringPtrOutput `pulumi:"preferredAppGroupType"`
	// The name of the resource group in which to create the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// A `scheduledAgentUpdates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
	ScheduledAgentUpdates HostPoolScheduledAgentUpdatesPtrOutput `pulumi:"scheduledAgentUpdates"`
	// Enables or disables the Start VM on Connection Feature. Defaults to `false`.
	StartVmOnConnect pulumi.BoolPtrOutput `pulumi:"startVmOnConnect"`
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
	Type pulumi.StringOutput `pulumi:"type"`
	// Allows you to test service changes before they are deployed to production. Defaults to `false`.
	ValidateEnvironment pulumi.BoolPtrOutput `pulumi:"validateEnvironment"`
}

// NewHostPool registers a new resource with the given unique name, arguments, and options.
func NewHostPool(ctx *pulumi.Context,
	name string, args *HostPoolArgs, opts ...pulumi.ResourceOption) (*HostPool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.LoadBalancerType == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerType'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostPool
	err := ctx.RegisterResource("azure:desktopvirtualization/hostPool:HostPool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostPool gets an existing HostPool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostPool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostPoolState, opts ...pulumi.ResourceOption) (*HostPool, error) {
	var resource HostPool
	err := ctx.ReadResource("azure:desktopvirtualization/hostPool:HostPool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostPool resources.
type hostPoolState struct {
	// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
	CustomRdpProperties *string `pulumi:"customRdpProperties"`
	// A description for the Virtual Desktop Host Pool.
	Description *string `pulumi:"description"`
	// A friendly name for the Virtual Desktop Host Pool.
	FriendlyName *string `pulumi:"friendlyName"`
	// `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
	// `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
	// `Persistent` should be used if the host pool type is `Personal`
	LoadBalancerType *string `pulumi:"loadBalancerType"`
	// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
	// Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
	MaximumSessionsAllowed *int `pulumi:"maximumSessionsAllowed"`
	// The name of the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`. `Direct` Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `personalDesktopAssignmentType` is required if the `type` of your Virtual Desktop Host Pool is `Personal`
	PersonalDesktopAssignmentType *string `pulumi:"personalDesktopAssignmentType"`
	// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `Desktop`. Changing this forces a new resource to be created.
	PreferredAppGroupType *string `pulumi:"preferredAppGroupType"`
	// The name of the resource group in which to create the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// A `scheduledAgentUpdates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
	ScheduledAgentUpdates *HostPoolScheduledAgentUpdates `pulumi:"scheduledAgentUpdates"`
	// Enables or disables the Start VM on Connection Feature. Defaults to `false`.
	StartVmOnConnect *bool `pulumi:"startVmOnConnect"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
	Type *string `pulumi:"type"`
	// Allows you to test service changes before they are deployed to production. Defaults to `false`.
	ValidateEnvironment *bool `pulumi:"validateEnvironment"`
}

type HostPoolState struct {
	// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
	CustomRdpProperties pulumi.StringPtrInput
	// A description for the Virtual Desktop Host Pool.
	Description pulumi.StringPtrInput
	// A friendly name for the Virtual Desktop Host Pool.
	FriendlyName pulumi.StringPtrInput
	// `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
	// `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
	// `Persistent` should be used if the host pool type is `Personal`
	LoadBalancerType pulumi.StringPtrInput
	// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
	// Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
	MaximumSessionsAllowed pulumi.IntPtrInput
	// The name of the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`. `Direct` Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `personalDesktopAssignmentType` is required if the `type` of your Virtual Desktop Host Pool is `Personal`
	PersonalDesktopAssignmentType pulumi.StringPtrInput
	// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `Desktop`. Changing this forces a new resource to be created.
	PreferredAppGroupType pulumi.StringPtrInput
	// The name of the resource group in which to create the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// A `scheduledAgentUpdates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
	ScheduledAgentUpdates HostPoolScheduledAgentUpdatesPtrInput
	// Enables or disables the Start VM on Connection Feature. Defaults to `false`.
	StartVmOnConnect pulumi.BoolPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
	Type pulumi.StringPtrInput
	// Allows you to test service changes before they are deployed to production. Defaults to `false`.
	ValidateEnvironment pulumi.BoolPtrInput
}

func (HostPoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostPoolState)(nil)).Elem()
}

type hostPoolArgs struct {
	// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
	CustomRdpProperties *string `pulumi:"customRdpProperties"`
	// A description for the Virtual Desktop Host Pool.
	Description *string `pulumi:"description"`
	// A friendly name for the Virtual Desktop Host Pool.
	FriendlyName *string `pulumi:"friendlyName"`
	// `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
	// `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
	// `Persistent` should be used if the host pool type is `Personal`
	LoadBalancerType string `pulumi:"loadBalancerType"`
	// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
	// Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
	MaximumSessionsAllowed *int `pulumi:"maximumSessionsAllowed"`
	// The name of the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`. `Direct` Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `personalDesktopAssignmentType` is required if the `type` of your Virtual Desktop Host Pool is `Personal`
	PersonalDesktopAssignmentType *string `pulumi:"personalDesktopAssignmentType"`
	// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `Desktop`. Changing this forces a new resource to be created.
	PreferredAppGroupType *string `pulumi:"preferredAppGroupType"`
	// The name of the resource group in which to create the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `scheduledAgentUpdates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
	ScheduledAgentUpdates *HostPoolScheduledAgentUpdates `pulumi:"scheduledAgentUpdates"`
	// Enables or disables the Start VM on Connection Feature. Defaults to `false`.
	StartVmOnConnect *bool `pulumi:"startVmOnConnect"`
	// A mapping of tags to assign to the resource.
	Tags map[string]string `pulumi:"tags"`
	// The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
	Type string `pulumi:"type"`
	// Allows you to test service changes before they are deployed to production. Defaults to `false`.
	ValidateEnvironment *bool `pulumi:"validateEnvironment"`
}

// The set of arguments for constructing a HostPool resource.
type HostPoolArgs struct {
	// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
	CustomRdpProperties pulumi.StringPtrInput
	// A description for the Virtual Desktop Host Pool.
	Description pulumi.StringPtrInput
	// A friendly name for the Virtual Desktop Host Pool.
	FriendlyName pulumi.StringPtrInput
	// `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
	// `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
	// `Persistent` should be used if the host pool type is `Personal`
	LoadBalancerType pulumi.StringInput
	// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
	// Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
	MaximumSessionsAllowed pulumi.IntPtrInput
	// The name of the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`. `Direct` Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
	//
	// > **NOTE:** `personalDesktopAssignmentType` is required if the `type` of your Virtual Desktop Host Pool is `Personal`
	PersonalDesktopAssignmentType pulumi.StringPtrInput
	// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `Desktop`. Changing this forces a new resource to be created.
	PreferredAppGroupType pulumi.StringPtrInput
	// The name of the resource group in which to create the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `scheduledAgentUpdates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
	ScheduledAgentUpdates HostPoolScheduledAgentUpdatesPtrInput
	// Enables or disables the Start VM on Connection Feature. Defaults to `false`.
	StartVmOnConnect pulumi.BoolPtrInput
	// A mapping of tags to assign to the resource.
	Tags pulumi.StringMapInput
	// The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
	Type pulumi.StringInput
	// Allows you to test service changes before they are deployed to production. Defaults to `false`.
	ValidateEnvironment pulumi.BoolPtrInput
}

func (HostPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostPoolArgs)(nil)).Elem()
}

type HostPoolInput interface {
	pulumi.Input

	ToHostPoolOutput() HostPoolOutput
	ToHostPoolOutputWithContext(ctx context.Context) HostPoolOutput
}

func (*HostPool) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPool)(nil)).Elem()
}

func (i *HostPool) ToHostPoolOutput() HostPoolOutput {
	return i.ToHostPoolOutputWithContext(context.Background())
}

func (i *HostPool) ToHostPoolOutputWithContext(ctx context.Context) HostPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPoolOutput)
}

// HostPoolArrayInput is an input type that accepts HostPoolArray and HostPoolArrayOutput values.
// You can construct a concrete instance of `HostPoolArrayInput` via:
//
//	HostPoolArray{ HostPoolArgs{...} }
type HostPoolArrayInput interface {
	pulumi.Input

	ToHostPoolArrayOutput() HostPoolArrayOutput
	ToHostPoolArrayOutputWithContext(context.Context) HostPoolArrayOutput
}

type HostPoolArray []HostPoolInput

func (HostPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostPool)(nil)).Elem()
}

func (i HostPoolArray) ToHostPoolArrayOutput() HostPoolArrayOutput {
	return i.ToHostPoolArrayOutputWithContext(context.Background())
}

func (i HostPoolArray) ToHostPoolArrayOutputWithContext(ctx context.Context) HostPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPoolArrayOutput)
}

// HostPoolMapInput is an input type that accepts HostPoolMap and HostPoolMapOutput values.
// You can construct a concrete instance of `HostPoolMapInput` via:
//
//	HostPoolMap{ "key": HostPoolArgs{...} }
type HostPoolMapInput interface {
	pulumi.Input

	ToHostPoolMapOutput() HostPoolMapOutput
	ToHostPoolMapOutputWithContext(context.Context) HostPoolMapOutput
}

type HostPoolMap map[string]HostPoolInput

func (HostPoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostPool)(nil)).Elem()
}

func (i HostPoolMap) ToHostPoolMapOutput() HostPoolMapOutput {
	return i.ToHostPoolMapOutputWithContext(context.Background())
}

func (i HostPoolMap) ToHostPoolMapOutputWithContext(ctx context.Context) HostPoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPoolMapOutput)
}

type HostPoolOutput struct{ *pulumi.OutputState }

func (HostPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPool)(nil)).Elem()
}

func (o HostPoolOutput) ToHostPoolOutput() HostPoolOutput {
	return o
}

func (o HostPoolOutput) ToHostPoolOutputWithContext(ctx context.Context) HostPoolOutput {
	return o
}

// A valid custom RDP properties string for the Virtual Desktop Host Pool, available properties can be [found in this article](https://docs.microsoft.com/windows-server/remote/remote-desktop-services/clients/rdp-files).
func (o HostPoolOutput) CustomRdpProperties() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringPtrOutput { return v.CustomRdpProperties }).(pulumi.StringPtrOutput)
}

// A description for the Virtual Desktop Host Pool.
func (o HostPoolOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A friendly name for the Virtual Desktop Host Pool.
func (o HostPoolOutput) FriendlyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringPtrOutput { return v.FriendlyName }).(pulumi.StringPtrOutput)
}

// `BreadthFirst` load balancing distributes new user sessions across all available session hosts in the host pool. Possible values are `BreadthFirst`, `DepthFirst` and `Persistent`.
// `DepthFirst` load balancing distributes new user sessions to an available session host with the highest number of connections but has not reached its maximum session limit threshold.
// `Persistent` should be used if the host pool type is `Personal`
func (o HostPoolOutput) LoadBalancerType() pulumi.StringOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringOutput { return v.LoadBalancerType }).(pulumi.StringOutput)
}

// The location/region where the Virtual Desktop Host Pool is located. Changing this forces a new resource to be created.
func (o HostPoolOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// A valid integer value from 0 to 999999 for the maximum number of users that have concurrent sessions on a session host.
// Should only be set if the `type` of your Virtual Desktop Host Pool is `Pooled`.
func (o HostPoolOutput) MaximumSessionsAllowed() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *HostPool) pulumi.IntPtrOutput { return v.MaximumSessionsAllowed }).(pulumi.IntPtrOutput)
}

// The name of the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
func (o HostPoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// `Automatic` assignment – The service will select an available host and assign it to an user. Possible values are `Automatic` and `Direct`. `Direct` Assignment – Admin selects a specific host to assign to an user. Changing this forces a new resource to be created.
//
// > **NOTE:** `personalDesktopAssignmentType` is required if the `type` of your Virtual Desktop Host Pool is `Personal`
func (o HostPoolOutput) PersonalDesktopAssignmentType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringPtrOutput { return v.PersonalDesktopAssignmentType }).(pulumi.StringPtrOutput)
}

// Option to specify the preferred Application Group type for the Virtual Desktop Host Pool. Valid options are `None`, `Desktop` or `RailApplications`. Default is `Desktop`. Changing this forces a new resource to be created.
func (o HostPoolOutput) PreferredAppGroupType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringPtrOutput { return v.PreferredAppGroupType }).(pulumi.StringPtrOutput)
}

// The name of the resource group in which to create the Virtual Desktop Host Pool. Changing this forces a new resource to be created.
func (o HostPoolOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A `scheduledAgentUpdates` block as defined below. This enables control of when Agent Updates will be applied to Session Hosts.
func (o HostPoolOutput) ScheduledAgentUpdates() HostPoolScheduledAgentUpdatesPtrOutput {
	return o.ApplyT(func(v *HostPool) HostPoolScheduledAgentUpdatesPtrOutput { return v.ScheduledAgentUpdates }).(HostPoolScheduledAgentUpdatesPtrOutput)
}

// Enables or disables the Start VM on Connection Feature. Defaults to `false`.
func (o HostPoolOutput) StartVmOnConnect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostPool) pulumi.BoolPtrOutput { return v.StartVmOnConnect }).(pulumi.BoolPtrOutput)
}

// A mapping of tags to assign to the resource.
func (o HostPoolOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of the Virtual Desktop Host Pool. Valid options are `Personal` or `Pooled`. Changing the type forces a new resource to be created.
func (o HostPoolOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *HostPool) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Allows you to test service changes before they are deployed to production. Defaults to `false`.
func (o HostPoolOutput) ValidateEnvironment() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostPool) pulumi.BoolPtrOutput { return v.ValidateEnvironment }).(pulumi.BoolPtrOutput)
}

type HostPoolArrayOutput struct{ *pulumi.OutputState }

func (HostPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostPool)(nil)).Elem()
}

func (o HostPoolArrayOutput) ToHostPoolArrayOutput() HostPoolArrayOutput {
	return o
}

func (o HostPoolArrayOutput) ToHostPoolArrayOutputWithContext(ctx context.Context) HostPoolArrayOutput {
	return o
}

func (o HostPoolArrayOutput) Index(i pulumi.IntInput) HostPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostPool {
		return vs[0].([]*HostPool)[vs[1].(int)]
	}).(HostPoolOutput)
}

type HostPoolMapOutput struct{ *pulumi.OutputState }

func (HostPoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostPool)(nil)).Elem()
}

func (o HostPoolMapOutput) ToHostPoolMapOutput() HostPoolMapOutput {
	return o
}

func (o HostPoolMapOutput) ToHostPoolMapOutputWithContext(ctx context.Context) HostPoolMapOutput {
	return o
}

func (o HostPoolMapOutput) MapIndex(k pulumi.StringInput) HostPoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostPool {
		return vs[0].(map[string]*HostPool)[vs[1].(string)]
	}).(HostPoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostPoolInput)(nil)).Elem(), &HostPool{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPoolArrayInput)(nil)).Elem(), HostPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPoolMapInput)(nil)).Elem(), HostPoolMap{})
	pulumi.RegisterOutputType(HostPoolOutput{})
	pulumi.RegisterOutputType(HostPoolArrayOutput{})
	pulumi.RegisterOutputType(HostPoolMapOutput{})
}
