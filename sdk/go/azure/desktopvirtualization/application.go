// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Virtual Desktop Application.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/desktopvirtualization"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := core.NewResourceGroup(ctx, "example", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			pooledbreadthfirst, err := desktopvirtualization.NewHostPool(ctx, "pooledbreadthfirst", &desktopvirtualization.HostPoolArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				Type:              pulumi.String("Pooled"),
//				LoadBalancerType:  pulumi.String("BreadthFirst"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = desktopvirtualization.NewHostPool(ctx, "personalautomatic", &desktopvirtualization.HostPoolArgs{
//				Location:                      example.Location,
//				ResourceGroupName:             example.Name,
//				Type:                          pulumi.String("Personal"),
//				PersonalDesktopAssignmentType: pulumi.String("Automatic"),
//				LoadBalancerType:              pulumi.String("BreadthFirst"),
//			})
//			if err != nil {
//				return err
//			}
//			remoteapp, err := desktopvirtualization.NewApplicationGroup(ctx, "remoteapp", &desktopvirtualization.ApplicationGroupArgs{
//				Location:          example.Location,
//				ResourceGroupName: example.Name,
//				Type:              pulumi.String("RemoteApp"),
//				HostPoolId:        pooledbreadthfirst.ID(),
//				FriendlyName:      pulumi.String("TestAppGroup"),
//				Description:       pulumi.String("Acceptance Test: An application group"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = desktopvirtualization.NewApplication(ctx, "chrome", &desktopvirtualization.ApplicationArgs{
//				ApplicationGroupId:        remoteapp.ID(),
//				FriendlyName:              pulumi.String("Google Chrome"),
//				Description:               pulumi.String("Chromium based web browser"),
//				Path:                      pulumi.String("C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"),
//				CommandLineArgumentPolicy: pulumi.String("DoNotAllow"),
//				CommandLineArguments:      pulumi.String("--incognito"),
//				ShowInPortal:              pulumi.Bool(false),
//				IconPath:                  pulumi.String("C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"),
//				IconIndex:                 pulumi.Int(0),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Virtual Desktop Application can be imported using the `resource id`, e.g.
//
// ```sh
//
//	$ pulumi import azure:desktopvirtualization/application:Application example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myGroup1/providers/Microsoft.DesktopVirtualization/applicationGroups/myapplicationgroup/applications/myapplication
//
// ```
type Application struct {
	pulumi.CustomResourceState

	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	ApplicationGroupId pulumi.StringOutput `pulumi:"applicationGroupId"`
	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
	CommandLineArgumentPolicy pulumi.StringOutput `pulumi:"commandLineArgumentPolicy"`
	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments pulumi.StringPtrOutput `pulumi:"commandLineArguments"`
	// Option to set a description for the Virtual Desktop Application.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName pulumi.StringOutput `pulumi:"friendlyName"`
	// The index of the icon you wish to use.
	IconIndex pulumi.IntPtrOutput `pulumi:"iconIndex"`
	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath pulumi.StringOutput `pulumi:"iconPath"`
	// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// The file path location of the app on the Virtual Desktop OS.
	Path pulumi.StringOutput `pulumi:"path"`
	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal pulumi.BoolPtrOutput `pulumi:"showInPortal"`
}

// NewApplication registers a new resource with the given unique name, arguments, and options.
func NewApplication(ctx *pulumi.Context,
	name string, args *ApplicationArgs, opts ...pulumi.ResourceOption) (*Application, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApplicationGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ApplicationGroupId'")
	}
	if args.CommandLineArgumentPolicy == nil {
		return nil, errors.New("invalid value for required argument 'CommandLineArgumentPolicy'")
	}
	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Application
	err := ctx.RegisterResource("azure:desktopvirtualization/application:Application", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApplication gets an existing Application resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApplication(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApplicationState, opts ...pulumi.ResourceOption) (*Application, error) {
	var resource Application
	err := ctx.ReadResource("azure:desktopvirtualization/application:Application", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Application resources.
type applicationState struct {
	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	ApplicationGroupId *string `pulumi:"applicationGroupId"`
	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
	CommandLineArgumentPolicy *string `pulumi:"commandLineArgumentPolicy"`
	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments *string `pulumi:"commandLineArguments"`
	// Option to set a description for the Virtual Desktop Application.
	Description *string `pulumi:"description"`
	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName *string `pulumi:"friendlyName"`
	// The index of the icon you wish to use.
	IconIndex *int `pulumi:"iconIndex"`
	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath *string `pulumi:"iconPath"`
	// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The file path location of the app on the Virtual Desktop OS.
	Path *string `pulumi:"path"`
	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal *bool `pulumi:"showInPortal"`
}

type ApplicationState struct {
	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	ApplicationGroupId pulumi.StringPtrInput
	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
	CommandLineArgumentPolicy pulumi.StringPtrInput
	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments pulumi.StringPtrInput
	// Option to set a description for the Virtual Desktop Application.
	Description pulumi.StringPtrInput
	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName pulumi.StringPtrInput
	// The index of the icon you wish to use.
	IconIndex pulumi.IntPtrInput
	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath pulumi.StringPtrInput
	// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The file path location of the app on the Virtual Desktop OS.
	Path pulumi.StringPtrInput
	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal pulumi.BoolPtrInput
}

func (ApplicationState) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationState)(nil)).Elem()
}

type applicationArgs struct {
	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	ApplicationGroupId string `pulumi:"applicationGroupId"`
	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
	CommandLineArgumentPolicy string `pulumi:"commandLineArgumentPolicy"`
	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments *string `pulumi:"commandLineArguments"`
	// Option to set a description for the Virtual Desktop Application.
	Description *string `pulumi:"description"`
	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName *string `pulumi:"friendlyName"`
	// The index of the icon you wish to use.
	IconIndex *int `pulumi:"iconIndex"`
	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath *string `pulumi:"iconPath"`
	// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
	Name *string `pulumi:"name"`
	// The file path location of the app on the Virtual Desktop OS.
	Path string `pulumi:"path"`
	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal *bool `pulumi:"showInPortal"`
}

// The set of arguments for constructing a Application resource.
type ApplicationArgs struct {
	// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
	ApplicationGroupId pulumi.StringInput
	// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
	CommandLineArgumentPolicy pulumi.StringInput
	// Command Line Arguments for Virtual Desktop Application.
	CommandLineArguments pulumi.StringPtrInput
	// Option to set a description for the Virtual Desktop Application.
	Description pulumi.StringPtrInput
	// Option to set a friendly name for the Virtual Desktop Application.
	FriendlyName pulumi.StringPtrInput
	// The index of the icon you wish to use.
	IconIndex pulumi.IntPtrInput
	// Specifies the path for an icon which will be used for this Virtual Desktop Application.
	IconPath pulumi.StringPtrInput
	// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
	Name pulumi.StringPtrInput
	// The file path location of the app on the Virtual Desktop OS.
	Path pulumi.StringInput
	// Specifies whether to show the RemoteApp program in the RD Web Access server.
	ShowInPortal pulumi.BoolPtrInput
}

func (ApplicationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*applicationArgs)(nil)).Elem()
}

type ApplicationInput interface {
	pulumi.Input

	ToApplicationOutput() ApplicationOutput
	ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput
}

func (*Application) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (i *Application) ToApplicationOutput() ApplicationOutput {
	return i.ToApplicationOutputWithContext(context.Background())
}

func (i *Application) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationOutput)
}

// ApplicationArrayInput is an input type that accepts ApplicationArray and ApplicationArrayOutput values.
// You can construct a concrete instance of `ApplicationArrayInput` via:
//
//	ApplicationArray{ ApplicationArgs{...} }
type ApplicationArrayInput interface {
	pulumi.Input

	ToApplicationArrayOutput() ApplicationArrayOutput
	ToApplicationArrayOutputWithContext(context.Context) ApplicationArrayOutput
}

type ApplicationArray []ApplicationInput

func (ApplicationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (i ApplicationArray) ToApplicationArrayOutput() ApplicationArrayOutput {
	return i.ToApplicationArrayOutputWithContext(context.Background())
}

func (i ApplicationArray) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationArrayOutput)
}

// ApplicationMapInput is an input type that accepts ApplicationMap and ApplicationMapOutput values.
// You can construct a concrete instance of `ApplicationMapInput` via:
//
//	ApplicationMap{ "key": ApplicationArgs{...} }
type ApplicationMapInput interface {
	pulumi.Input

	ToApplicationMapOutput() ApplicationMapOutput
	ToApplicationMapOutputWithContext(context.Context) ApplicationMapOutput
}

type ApplicationMap map[string]ApplicationInput

func (ApplicationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (i ApplicationMap) ToApplicationMapOutput() ApplicationMapOutput {
	return i.ToApplicationMapOutputWithContext(context.Background())
}

func (i ApplicationMap) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApplicationMapOutput)
}

type ApplicationOutput struct{ *pulumi.OutputState }

func (ApplicationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Application)(nil)).Elem()
}

func (o ApplicationOutput) ToApplicationOutput() ApplicationOutput {
	return o
}

func (o ApplicationOutput) ToApplicationOutputWithContext(ctx context.Context) ApplicationOutput {
	return o
}

// Resource ID for a Virtual Desktop Application Group to associate with the Virtual Desktop Application. Changing this forces a new resource to be created.
func (o ApplicationOutput) ApplicationGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.ApplicationGroupId }).(pulumi.StringOutput)
}

// Specifies whether this published application can be launched with command line arguments provided by the client, command line arguments specified at publish time, or no command line arguments at all. Possible values include: `DoNotAllow`, `Allow`, `Require`.
func (o ApplicationOutput) CommandLineArgumentPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.CommandLineArgumentPolicy }).(pulumi.StringOutput)
}

// Command Line Arguments for Virtual Desktop Application.
func (o ApplicationOutput) CommandLineArguments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.CommandLineArguments }).(pulumi.StringPtrOutput)
}

// Option to set a description for the Virtual Desktop Application.
func (o ApplicationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Option to set a friendly name for the Virtual Desktop Application.
func (o ApplicationOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.FriendlyName }).(pulumi.StringOutput)
}

// The index of the icon you wish to use.
func (o ApplicationOutput) IconIndex() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.IntPtrOutput { return v.IconIndex }).(pulumi.IntPtrOutput)
}

// Specifies the path for an icon which will be used for this Virtual Desktop Application.
func (o ApplicationOutput) IconPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.IconPath }).(pulumi.StringOutput)
}

// The name of the Virtual Desktop Application. Changing the name forces a new resource to be created.
func (o ApplicationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The file path location of the app on the Virtual Desktop OS.
func (o ApplicationOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Application) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

// Specifies whether to show the RemoteApp program in the RD Web Access server.
func (o ApplicationOutput) ShowInPortal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Application) pulumi.BoolPtrOutput { return v.ShowInPortal }).(pulumi.BoolPtrOutput)
}

type ApplicationArrayOutput struct{ *pulumi.OutputState }

func (ApplicationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Application)(nil)).Elem()
}

func (o ApplicationArrayOutput) ToApplicationArrayOutput() ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) ToApplicationArrayOutputWithContext(ctx context.Context) ApplicationArrayOutput {
	return o
}

func (o ApplicationArrayOutput) Index(i pulumi.IntInput) ApplicationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Application {
		return vs[0].([]*Application)[vs[1].(int)]
	}).(ApplicationOutput)
}

type ApplicationMapOutput struct{ *pulumi.OutputState }

func (ApplicationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Application)(nil)).Elem()
}

func (o ApplicationMapOutput) ToApplicationMapOutput() ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) ToApplicationMapOutputWithContext(ctx context.Context) ApplicationMapOutput {
	return o
}

func (o ApplicationMapOutput) MapIndex(k pulumi.StringInput) ApplicationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Application {
		return vs[0].(map[string]*Application)[vs[1].(string)]
	}).(ApplicationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationInput)(nil)).Elem(), &Application{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationArrayInput)(nil)).Elem(), ApplicationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApplicationMapInput)(nil)).Elem(), ApplicationMap{})
	pulumi.RegisterOutputType(ApplicationOutput{})
	pulumi.RegisterOutputType(ApplicationArrayOutput{})
	pulumi.RegisterOutputType(ApplicationMapOutput{})
}
