// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to access information about an existing Application Group.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v6/go/azure/desktopvirtualization"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := desktopvirtualization.LookupApplicationGroup(ctx, &desktopvirtualization.LookupApplicationGroupArgs{
//				Name:              "existing",
//				ResourceGroupName: "existing",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("id", example.Id)
//			return nil
//		})
//	}
//
// ```
//
// ## API Providers
//
// <!-- This section is generated, changes will be overwritten -->
// This data source uses the following Azure API Providers:
//
// * `Microsoft.DesktopVirtualization` - 2024-04-03
func LookupApplicationGroup(ctx *pulumi.Context, args *LookupApplicationGroupArgs, opts ...pulumi.InvokeOption) (*LookupApplicationGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApplicationGroupResult
	err := ctx.Invoke("azure:desktopvirtualization/getApplicationGroup:getApplicationGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApplicationGroup.
type LookupApplicationGroupArgs struct {
	// The name of this Application Group.
	Name string `pulumi:"name"`
	// The name of the Resource Group where the Application Group exists.
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// A collection of values returned by getApplicationGroup.
type LookupApplicationGroupResult struct {
	// The description of the Application Group.
	Description string `pulumi:"description"`
	// The friendly name of the Application Group.
	FriendlyName string `pulumi:"friendlyName"`
	// The Virtual Desktop Host Pool ID the Application Group is associated to.
	HostPoolId string `pulumi:"hostPoolId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The Azure Region where the Application Group exists.
	Location          string `pulumi:"location"`
	Name              string `pulumi:"name"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A mapping of tags assigned to the Application Group.
	Tags map[string]string `pulumi:"tags"`
	// The type of Application Group (`RemoteApp` or `Desktop`).
	Type string `pulumi:"type"`
	// The Virtual Desktop Workspace ID the Application Group is associated to.
	WorkspaceId string `pulumi:"workspaceId"`
}

func LookupApplicationGroupOutput(ctx *pulumi.Context, args LookupApplicationGroupOutputArgs, opts ...pulumi.InvokeOption) LookupApplicationGroupResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupApplicationGroupResultOutput, error) {
			args := v.(LookupApplicationGroupArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("azure:desktopvirtualization/getApplicationGroup:getApplicationGroup", args, LookupApplicationGroupResultOutput{}, options).(LookupApplicationGroupResultOutput), nil
		}).(LookupApplicationGroupResultOutput)
}

// A collection of arguments for invoking getApplicationGroup.
type LookupApplicationGroupOutputArgs struct {
	// The name of this Application Group.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the Resource Group where the Application Group exists.
	ResourceGroupName pulumi.StringInput `pulumi:"resourceGroupName"`
}

func (LookupApplicationGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationGroupArgs)(nil)).Elem()
}

// A collection of values returned by getApplicationGroup.
type LookupApplicationGroupResultOutput struct{ *pulumi.OutputState }

func (LookupApplicationGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApplicationGroupResult)(nil)).Elem()
}

func (o LookupApplicationGroupResultOutput) ToLookupApplicationGroupResultOutput() LookupApplicationGroupResultOutput {
	return o
}

func (o LookupApplicationGroupResultOutput) ToLookupApplicationGroupResultOutputWithContext(ctx context.Context) LookupApplicationGroupResultOutput {
	return o
}

// The description of the Application Group.
func (o LookupApplicationGroupResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.Description }).(pulumi.StringOutput)
}

// The friendly name of the Application Group.
func (o LookupApplicationGroupResultOutput) FriendlyName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.FriendlyName }).(pulumi.StringOutput)
}

// The Virtual Desktop Host Pool ID the Application Group is associated to.
func (o LookupApplicationGroupResultOutput) HostPoolId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.HostPoolId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupApplicationGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

// The Azure Region where the Application Group exists.
func (o LookupApplicationGroupResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.Location }).(pulumi.StringOutput)
}

func (o LookupApplicationGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupApplicationGroupResultOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the Application Group.
func (o LookupApplicationGroupResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

// The type of Application Group (`RemoteApp` or `Desktop`).
func (o LookupApplicationGroupResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.Type }).(pulumi.StringOutput)
}

// The Virtual Desktop Workspace ID the Application Group is associated to.
func (o LookupApplicationGroupResultOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApplicationGroupResult) string { return v.WorkspaceId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApplicationGroupResultOutput{})
}
