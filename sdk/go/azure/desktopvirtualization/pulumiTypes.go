// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package desktopvirtualization

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type HostPoolScheduledAgentUpdates struct {
	// Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
	//
	// > **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
	Enabled *bool `pulumi:"enabled"`
	// A `schedule` block as defined below. A maximum of two blocks can be added.
	Schedules []HostPoolScheduledAgentUpdatesSchedule `pulumi:"schedules"`
	// Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `useSessionHostTimezone` is enabled then it will override this setting. Default is `UTC`
	Timezone *string `pulumi:"timezone"`
	// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
	UseSessionHostTimezone *bool `pulumi:"useSessionHostTimezone"`
}

// HostPoolScheduledAgentUpdatesInput is an input type that accepts HostPoolScheduledAgentUpdatesArgs and HostPoolScheduledAgentUpdatesOutput values.
// You can construct a concrete instance of `HostPoolScheduledAgentUpdatesInput` via:
//
//	HostPoolScheduledAgentUpdatesArgs{...}
type HostPoolScheduledAgentUpdatesInput interface {
	pulumi.Input

	ToHostPoolScheduledAgentUpdatesOutput() HostPoolScheduledAgentUpdatesOutput
	ToHostPoolScheduledAgentUpdatesOutputWithContext(context.Context) HostPoolScheduledAgentUpdatesOutput
}

type HostPoolScheduledAgentUpdatesArgs struct {
	// Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
	//
	// > **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
	Enabled pulumi.BoolPtrInput `pulumi:"enabled"`
	// A `schedule` block as defined below. A maximum of two blocks can be added.
	Schedules HostPoolScheduledAgentUpdatesScheduleArrayInput `pulumi:"schedules"`
	// Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `useSessionHostTimezone` is enabled then it will override this setting. Default is `UTC`
	Timezone pulumi.StringPtrInput `pulumi:"timezone"`
	// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
	UseSessionHostTimezone pulumi.BoolPtrInput `pulumi:"useSessionHostTimezone"`
}

func (HostPoolScheduledAgentUpdatesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPoolScheduledAgentUpdates)(nil)).Elem()
}

func (i HostPoolScheduledAgentUpdatesArgs) ToHostPoolScheduledAgentUpdatesOutput() HostPoolScheduledAgentUpdatesOutput {
	return i.ToHostPoolScheduledAgentUpdatesOutputWithContext(context.Background())
}

func (i HostPoolScheduledAgentUpdatesArgs) ToHostPoolScheduledAgentUpdatesOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPoolScheduledAgentUpdatesOutput)
}

func (i HostPoolScheduledAgentUpdatesArgs) ToHostPoolScheduledAgentUpdatesPtrOutput() HostPoolScheduledAgentUpdatesPtrOutput {
	return i.ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(context.Background())
}

func (i HostPoolScheduledAgentUpdatesArgs) ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPoolScheduledAgentUpdatesOutput).ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(ctx)
}

// HostPoolScheduledAgentUpdatesPtrInput is an input type that accepts HostPoolScheduledAgentUpdatesArgs, HostPoolScheduledAgentUpdatesPtr and HostPoolScheduledAgentUpdatesPtrOutput values.
// You can construct a concrete instance of `HostPoolScheduledAgentUpdatesPtrInput` via:
//
//	        HostPoolScheduledAgentUpdatesArgs{...}
//
//	or:
//
//	        nil
type HostPoolScheduledAgentUpdatesPtrInput interface {
	pulumi.Input

	ToHostPoolScheduledAgentUpdatesPtrOutput() HostPoolScheduledAgentUpdatesPtrOutput
	ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(context.Context) HostPoolScheduledAgentUpdatesPtrOutput
}

type hostPoolScheduledAgentUpdatesPtrType HostPoolScheduledAgentUpdatesArgs

func HostPoolScheduledAgentUpdatesPtr(v *HostPoolScheduledAgentUpdatesArgs) HostPoolScheduledAgentUpdatesPtrInput {
	return (*hostPoolScheduledAgentUpdatesPtrType)(v)
}

func (*hostPoolScheduledAgentUpdatesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPoolScheduledAgentUpdates)(nil)).Elem()
}

func (i *hostPoolScheduledAgentUpdatesPtrType) ToHostPoolScheduledAgentUpdatesPtrOutput() HostPoolScheduledAgentUpdatesPtrOutput {
	return i.ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(context.Background())
}

func (i *hostPoolScheduledAgentUpdatesPtrType) ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPoolScheduledAgentUpdatesPtrOutput)
}

type HostPoolScheduledAgentUpdatesOutput struct{ *pulumi.OutputState }

func (HostPoolScheduledAgentUpdatesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPoolScheduledAgentUpdates)(nil)).Elem()
}

func (o HostPoolScheduledAgentUpdatesOutput) ToHostPoolScheduledAgentUpdatesOutput() HostPoolScheduledAgentUpdatesOutput {
	return o
}

func (o HostPoolScheduledAgentUpdatesOutput) ToHostPoolScheduledAgentUpdatesOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesOutput {
	return o
}

func (o HostPoolScheduledAgentUpdatesOutput) ToHostPoolScheduledAgentUpdatesPtrOutput() HostPoolScheduledAgentUpdatesPtrOutput {
	return o.ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(context.Background())
}

func (o HostPoolScheduledAgentUpdatesOutput) ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v HostPoolScheduledAgentUpdates) *HostPoolScheduledAgentUpdates {
		return &v
	}).(HostPoolScheduledAgentUpdatesPtrOutput)
}

// Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
//
// > **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
func (o HostPoolScheduledAgentUpdatesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostPoolScheduledAgentUpdates) *bool { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// A `schedule` block as defined below. A maximum of two blocks can be added.
func (o HostPoolScheduledAgentUpdatesOutput) Schedules() HostPoolScheduledAgentUpdatesScheduleArrayOutput {
	return o.ApplyT(func(v HostPoolScheduledAgentUpdates) []HostPoolScheduledAgentUpdatesSchedule { return v.Schedules }).(HostPoolScheduledAgentUpdatesScheduleArrayOutput)
}

// Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `useSessionHostTimezone` is enabled then it will override this setting. Default is `UTC`
func (o HostPoolScheduledAgentUpdatesOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostPoolScheduledAgentUpdates) *string { return v.Timezone }).(pulumi.StringPtrOutput)
}

// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
func (o HostPoolScheduledAgentUpdatesOutput) UseSessionHostTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v HostPoolScheduledAgentUpdates) *bool { return v.UseSessionHostTimezone }).(pulumi.BoolPtrOutput)
}

type HostPoolScheduledAgentUpdatesPtrOutput struct{ *pulumi.OutputState }

func (HostPoolScheduledAgentUpdatesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostPoolScheduledAgentUpdates)(nil)).Elem()
}

func (o HostPoolScheduledAgentUpdatesPtrOutput) ToHostPoolScheduledAgentUpdatesPtrOutput() HostPoolScheduledAgentUpdatesPtrOutput {
	return o
}

func (o HostPoolScheduledAgentUpdatesPtrOutput) ToHostPoolScheduledAgentUpdatesPtrOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesPtrOutput {
	return o
}

func (o HostPoolScheduledAgentUpdatesPtrOutput) Elem() HostPoolScheduledAgentUpdatesOutput {
	return o.ApplyT(func(v *HostPoolScheduledAgentUpdates) HostPoolScheduledAgentUpdates {
		if v != nil {
			return *v
		}
		var ret HostPoolScheduledAgentUpdates
		return ret
	}).(HostPoolScheduledAgentUpdatesOutput)
}

// Enables or disables scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) on session hosts. If this is enabled then up to two `schedule` blocks must be defined. Default is `false`.
//
// > **NOTE:** if `enabled` is set to `true` then at least one and a maximum of two `schedule` blocks must be provided.
func (o HostPoolScheduledAgentUpdatesPtrOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostPoolScheduledAgentUpdates) *bool {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.BoolPtrOutput)
}

// A `schedule` block as defined below. A maximum of two blocks can be added.
func (o HostPoolScheduledAgentUpdatesPtrOutput) Schedules() HostPoolScheduledAgentUpdatesScheduleArrayOutput {
	return o.ApplyT(func(v *HostPoolScheduledAgentUpdates) []HostPoolScheduledAgentUpdatesSchedule {
		if v == nil {
			return nil
		}
		return v.Schedules
	}).(HostPoolScheduledAgentUpdatesScheduleArrayOutput)
}

// Specifies the time zone in which the agent update schedule will apply, [the possible values are defined here](https://jackstromberg.com/2017/01/list-of-time-zones-consumed-by-azure/). If `useSessionHostTimezone` is enabled then it will override this setting. Default is `UTC`
func (o HostPoolScheduledAgentUpdatesPtrOutput) Timezone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostPoolScheduledAgentUpdates) *string {
		if v == nil {
			return nil
		}
		return v.Timezone
	}).(pulumi.StringPtrOutput)
}

// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host. If configured then this setting overrides `timezone`. Default is `false`.
func (o HostPoolScheduledAgentUpdatesPtrOutput) UseSessionHostTimezone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *HostPoolScheduledAgentUpdates) *bool {
		if v == nil {
			return nil
		}
		return v.UseSessionHostTimezone
	}).(pulumi.BoolPtrOutput)
}

type HostPoolScheduledAgentUpdatesSchedule struct {
	// The day of the week on which agent updates should be performed. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The hour of day the update window should start. The update is a 2 hour period following the hour provided. The value should be provided as a number between 0 and 23, with 0 being midnight and 23 being 11pm. A leading zero should not be used.
	HourOfDay int `pulumi:"hourOfDay"`
}

// HostPoolScheduledAgentUpdatesScheduleInput is an input type that accepts HostPoolScheduledAgentUpdatesScheduleArgs and HostPoolScheduledAgentUpdatesScheduleOutput values.
// You can construct a concrete instance of `HostPoolScheduledAgentUpdatesScheduleInput` via:
//
//	HostPoolScheduledAgentUpdatesScheduleArgs{...}
type HostPoolScheduledAgentUpdatesScheduleInput interface {
	pulumi.Input

	ToHostPoolScheduledAgentUpdatesScheduleOutput() HostPoolScheduledAgentUpdatesScheduleOutput
	ToHostPoolScheduledAgentUpdatesScheduleOutputWithContext(context.Context) HostPoolScheduledAgentUpdatesScheduleOutput
}

type HostPoolScheduledAgentUpdatesScheduleArgs struct {
	// The day of the week on which agent updates should be performed. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The hour of day the update window should start. The update is a 2 hour period following the hour provided. The value should be provided as a number between 0 and 23, with 0 being midnight and 23 being 11pm. A leading zero should not be used.
	HourOfDay pulumi.IntInput `pulumi:"hourOfDay"`
}

func (HostPoolScheduledAgentUpdatesScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPoolScheduledAgentUpdatesSchedule)(nil)).Elem()
}

func (i HostPoolScheduledAgentUpdatesScheduleArgs) ToHostPoolScheduledAgentUpdatesScheduleOutput() HostPoolScheduledAgentUpdatesScheduleOutput {
	return i.ToHostPoolScheduledAgentUpdatesScheduleOutputWithContext(context.Background())
}

func (i HostPoolScheduledAgentUpdatesScheduleArgs) ToHostPoolScheduledAgentUpdatesScheduleOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPoolScheduledAgentUpdatesScheduleOutput)
}

// HostPoolScheduledAgentUpdatesScheduleArrayInput is an input type that accepts HostPoolScheduledAgentUpdatesScheduleArray and HostPoolScheduledAgentUpdatesScheduleArrayOutput values.
// You can construct a concrete instance of `HostPoolScheduledAgentUpdatesScheduleArrayInput` via:
//
//	HostPoolScheduledAgentUpdatesScheduleArray{ HostPoolScheduledAgentUpdatesScheduleArgs{...} }
type HostPoolScheduledAgentUpdatesScheduleArrayInput interface {
	pulumi.Input

	ToHostPoolScheduledAgentUpdatesScheduleArrayOutput() HostPoolScheduledAgentUpdatesScheduleArrayOutput
	ToHostPoolScheduledAgentUpdatesScheduleArrayOutputWithContext(context.Context) HostPoolScheduledAgentUpdatesScheduleArrayOutput
}

type HostPoolScheduledAgentUpdatesScheduleArray []HostPoolScheduledAgentUpdatesScheduleInput

func (HostPoolScheduledAgentUpdatesScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostPoolScheduledAgentUpdatesSchedule)(nil)).Elem()
}

func (i HostPoolScheduledAgentUpdatesScheduleArray) ToHostPoolScheduledAgentUpdatesScheduleArrayOutput() HostPoolScheduledAgentUpdatesScheduleArrayOutput {
	return i.ToHostPoolScheduledAgentUpdatesScheduleArrayOutputWithContext(context.Background())
}

func (i HostPoolScheduledAgentUpdatesScheduleArray) ToHostPoolScheduledAgentUpdatesScheduleArrayOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostPoolScheduledAgentUpdatesScheduleArrayOutput)
}

type HostPoolScheduledAgentUpdatesScheduleOutput struct{ *pulumi.OutputState }

func (HostPoolScheduledAgentUpdatesScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostPoolScheduledAgentUpdatesSchedule)(nil)).Elem()
}

func (o HostPoolScheduledAgentUpdatesScheduleOutput) ToHostPoolScheduledAgentUpdatesScheduleOutput() HostPoolScheduledAgentUpdatesScheduleOutput {
	return o
}

func (o HostPoolScheduledAgentUpdatesScheduleOutput) ToHostPoolScheduledAgentUpdatesScheduleOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesScheduleOutput {
	return o
}

// The day of the week on which agent updates should be performed. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
func (o HostPoolScheduledAgentUpdatesScheduleOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v HostPoolScheduledAgentUpdatesSchedule) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The hour of day the update window should start. The update is a 2 hour period following the hour provided. The value should be provided as a number between 0 and 23, with 0 being midnight and 23 being 11pm. A leading zero should not be used.
func (o HostPoolScheduledAgentUpdatesScheduleOutput) HourOfDay() pulumi.IntOutput {
	return o.ApplyT(func(v HostPoolScheduledAgentUpdatesSchedule) int { return v.HourOfDay }).(pulumi.IntOutput)
}

type HostPoolScheduledAgentUpdatesScheduleArrayOutput struct{ *pulumi.OutputState }

func (HostPoolScheduledAgentUpdatesScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HostPoolScheduledAgentUpdatesSchedule)(nil)).Elem()
}

func (o HostPoolScheduledAgentUpdatesScheduleArrayOutput) ToHostPoolScheduledAgentUpdatesScheduleArrayOutput() HostPoolScheduledAgentUpdatesScheduleArrayOutput {
	return o
}

func (o HostPoolScheduledAgentUpdatesScheduleArrayOutput) ToHostPoolScheduledAgentUpdatesScheduleArrayOutputWithContext(ctx context.Context) HostPoolScheduledAgentUpdatesScheduleArrayOutput {
	return o
}

func (o HostPoolScheduledAgentUpdatesScheduleArrayOutput) Index(i pulumi.IntInput) HostPoolScheduledAgentUpdatesScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HostPoolScheduledAgentUpdatesSchedule {
		return vs[0].([]HostPoolScheduledAgentUpdatesSchedule)[vs[1].(int)]
	}).(HostPoolScheduledAgentUpdatesScheduleOutput)
}

type ScalingPlanHostPool struct {
	// The ID of the HostPool to assign the Scaling Plan to.
	HostpoolId string `pulumi:"hostpoolId"`
	// Specifies if the scaling plan is enabled or disabled for the HostPool.
	ScalingPlanEnabled bool `pulumi:"scalingPlanEnabled"`
}

// ScalingPlanHostPoolInput is an input type that accepts ScalingPlanHostPoolArgs and ScalingPlanHostPoolOutput values.
// You can construct a concrete instance of `ScalingPlanHostPoolInput` via:
//
//	ScalingPlanHostPoolArgs{...}
type ScalingPlanHostPoolInput interface {
	pulumi.Input

	ToScalingPlanHostPoolOutput() ScalingPlanHostPoolOutput
	ToScalingPlanHostPoolOutputWithContext(context.Context) ScalingPlanHostPoolOutput
}

type ScalingPlanHostPoolArgs struct {
	// The ID of the HostPool to assign the Scaling Plan to.
	HostpoolId pulumi.StringInput `pulumi:"hostpoolId"`
	// Specifies if the scaling plan is enabled or disabled for the HostPool.
	ScalingPlanEnabled pulumi.BoolInput `pulumi:"scalingPlanEnabled"`
}

func (ScalingPlanHostPoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingPlanHostPool)(nil)).Elem()
}

func (i ScalingPlanHostPoolArgs) ToScalingPlanHostPoolOutput() ScalingPlanHostPoolOutput {
	return i.ToScalingPlanHostPoolOutputWithContext(context.Background())
}

func (i ScalingPlanHostPoolArgs) ToScalingPlanHostPoolOutputWithContext(ctx context.Context) ScalingPlanHostPoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPlanHostPoolOutput)
}

// ScalingPlanHostPoolArrayInput is an input type that accepts ScalingPlanHostPoolArray and ScalingPlanHostPoolArrayOutput values.
// You can construct a concrete instance of `ScalingPlanHostPoolArrayInput` via:
//
//	ScalingPlanHostPoolArray{ ScalingPlanHostPoolArgs{...} }
type ScalingPlanHostPoolArrayInput interface {
	pulumi.Input

	ToScalingPlanHostPoolArrayOutput() ScalingPlanHostPoolArrayOutput
	ToScalingPlanHostPoolArrayOutputWithContext(context.Context) ScalingPlanHostPoolArrayOutput
}

type ScalingPlanHostPoolArray []ScalingPlanHostPoolInput

func (ScalingPlanHostPoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingPlanHostPool)(nil)).Elem()
}

func (i ScalingPlanHostPoolArray) ToScalingPlanHostPoolArrayOutput() ScalingPlanHostPoolArrayOutput {
	return i.ToScalingPlanHostPoolArrayOutputWithContext(context.Background())
}

func (i ScalingPlanHostPoolArray) ToScalingPlanHostPoolArrayOutputWithContext(ctx context.Context) ScalingPlanHostPoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPlanHostPoolArrayOutput)
}

type ScalingPlanHostPoolOutput struct{ *pulumi.OutputState }

func (ScalingPlanHostPoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingPlanHostPool)(nil)).Elem()
}

func (o ScalingPlanHostPoolOutput) ToScalingPlanHostPoolOutput() ScalingPlanHostPoolOutput {
	return o
}

func (o ScalingPlanHostPoolOutput) ToScalingPlanHostPoolOutputWithContext(ctx context.Context) ScalingPlanHostPoolOutput {
	return o
}

// The ID of the HostPool to assign the Scaling Plan to.
func (o ScalingPlanHostPoolOutput) HostpoolId() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanHostPool) string { return v.HostpoolId }).(pulumi.StringOutput)
}

// Specifies if the scaling plan is enabled or disabled for the HostPool.
func (o ScalingPlanHostPoolOutput) ScalingPlanEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ScalingPlanHostPool) bool { return v.ScalingPlanEnabled }).(pulumi.BoolOutput)
}

type ScalingPlanHostPoolArrayOutput struct{ *pulumi.OutputState }

func (ScalingPlanHostPoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingPlanHostPool)(nil)).Elem()
}

func (o ScalingPlanHostPoolArrayOutput) ToScalingPlanHostPoolArrayOutput() ScalingPlanHostPoolArrayOutput {
	return o
}

func (o ScalingPlanHostPoolArrayOutput) ToScalingPlanHostPoolArrayOutputWithContext(ctx context.Context) ScalingPlanHostPoolArrayOutput {
	return o
}

func (o ScalingPlanHostPoolArrayOutput) Index(i pulumi.IntInput) ScalingPlanHostPoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingPlanHostPool {
		return vs[0].([]ScalingPlanHostPool)[vs[1].(int)]
	}).(ScalingPlanHostPoolOutput)
}

type ScalingPlanSchedule struct {
	// A list of Days of the Week on which this schedule will be used. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
	DaysOfWeeks []string `pulumi:"daysOfWeeks"`
	// The name of the schedule.
	Name string `pulumi:"name"`
	// The load Balancing Algorithm to use during Off-Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
	OffPeakLoadBalancingAlgorithm string `pulumi:"offPeakLoadBalancingAlgorithm"`
	// The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in "HH:MM" format.
	OffPeakStartTime string `pulumi:"offPeakStartTime"`
	// The load Balancing Algorithm to use during Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
	PeakLoadBalancingAlgorithm string `pulumi:"peakLoadBalancingAlgorithm"`
	// The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	PeakStartTime string `pulumi:"peakStartTime"`
	// This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
	RampDownCapacityThresholdPercent int `pulumi:"rampDownCapacityThresholdPercent"`
	// Whether users will be forced to log-off session hosts once the `rampDownWaitTimeMinutes` value has been exceeded during the Ramp-Down period. Possible
	RampDownForceLogoffUsers bool `pulumi:"rampDownForceLogoffUsers"`
	// The load Balancing Algorithm to use during the Ramp-Down period. Possible values are `DepthFirst` and `BreadthFirst`.
	RampDownLoadBalancingAlgorithm string `pulumi:"rampDownLoadBalancingAlgorithm"`
	// The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
	RampDownMinimumHostsPercent int `pulumi:"rampDownMinimumHostsPercent"`
	// The notification message to send to users during Ramp-Down period when they are required to log-off.
	RampDownNotificationMessage string `pulumi:"rampDownNotificationMessage"`
	// The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	RampDownStartTime string `pulumi:"rampDownStartTime"`
	// Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are `ZeroSessions` and `ZeroActiveSessions`.
	RampDownStopHostsWhen string `pulumi:"rampDownStopHostsWhen"`
	// The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
	RampDownWaitTimeMinutes int `pulumi:"rampDownWaitTimeMinutes"`
	// This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as `60%` and your total host pool capacity is `100` sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of `60` sessions.
	RampUpCapacityThresholdPercent *int `pulumi:"rampUpCapacityThresholdPercent"`
	// The load Balancing Algorithm to use during the Ramp-Up period. Possible values are `DepthFirst` and `BreadthFirst`.
	RampUpLoadBalancingAlgorithm string `pulumi:"rampUpLoadBalancingAlgorithm"`
	// Specifies the minimum percentage of session host virtual machines to start during ramp-up for peak hours. For example, if Minimum percentage of hosts is specified as `10%` and total number of session hosts in your host pool is `10`, autoscale will ensure a minimum of `1` session host is available to take user connections.
	RampUpMinimumHostsPercent *int `pulumi:"rampUpMinimumHostsPercent"`
	// The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	RampUpStartTime string `pulumi:"rampUpStartTime"`
}

// ScalingPlanScheduleInput is an input type that accepts ScalingPlanScheduleArgs and ScalingPlanScheduleOutput values.
// You can construct a concrete instance of `ScalingPlanScheduleInput` via:
//
//	ScalingPlanScheduleArgs{...}
type ScalingPlanScheduleInput interface {
	pulumi.Input

	ToScalingPlanScheduleOutput() ScalingPlanScheduleOutput
	ToScalingPlanScheduleOutputWithContext(context.Context) ScalingPlanScheduleOutput
}

type ScalingPlanScheduleArgs struct {
	// A list of Days of the Week on which this schedule will be used. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
	DaysOfWeeks pulumi.StringArrayInput `pulumi:"daysOfWeeks"`
	// The name of the schedule.
	Name pulumi.StringInput `pulumi:"name"`
	// The load Balancing Algorithm to use during Off-Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
	OffPeakLoadBalancingAlgorithm pulumi.StringInput `pulumi:"offPeakLoadBalancingAlgorithm"`
	// The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in "HH:MM" format.
	OffPeakStartTime pulumi.StringInput `pulumi:"offPeakStartTime"`
	// The load Balancing Algorithm to use during Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
	PeakLoadBalancingAlgorithm pulumi.StringInput `pulumi:"peakLoadBalancingAlgorithm"`
	// The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	PeakStartTime pulumi.StringInput `pulumi:"peakStartTime"`
	// This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
	RampDownCapacityThresholdPercent pulumi.IntInput `pulumi:"rampDownCapacityThresholdPercent"`
	// Whether users will be forced to log-off session hosts once the `rampDownWaitTimeMinutes` value has been exceeded during the Ramp-Down period. Possible
	RampDownForceLogoffUsers pulumi.BoolInput `pulumi:"rampDownForceLogoffUsers"`
	// The load Balancing Algorithm to use during the Ramp-Down period. Possible values are `DepthFirst` and `BreadthFirst`.
	RampDownLoadBalancingAlgorithm pulumi.StringInput `pulumi:"rampDownLoadBalancingAlgorithm"`
	// The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
	RampDownMinimumHostsPercent pulumi.IntInput `pulumi:"rampDownMinimumHostsPercent"`
	// The notification message to send to users during Ramp-Down period when they are required to log-off.
	RampDownNotificationMessage pulumi.StringInput `pulumi:"rampDownNotificationMessage"`
	// The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	RampDownStartTime pulumi.StringInput `pulumi:"rampDownStartTime"`
	// Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are `ZeroSessions` and `ZeroActiveSessions`.
	RampDownStopHostsWhen pulumi.StringInput `pulumi:"rampDownStopHostsWhen"`
	// The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
	RampDownWaitTimeMinutes pulumi.IntInput `pulumi:"rampDownWaitTimeMinutes"`
	// This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as `60%` and your total host pool capacity is `100` sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of `60` sessions.
	RampUpCapacityThresholdPercent pulumi.IntPtrInput `pulumi:"rampUpCapacityThresholdPercent"`
	// The load Balancing Algorithm to use during the Ramp-Up period. Possible values are `DepthFirst` and `BreadthFirst`.
	RampUpLoadBalancingAlgorithm pulumi.StringInput `pulumi:"rampUpLoadBalancingAlgorithm"`
	// Specifies the minimum percentage of session host virtual machines to start during ramp-up for peak hours. For example, if Minimum percentage of hosts is specified as `10%` and total number of session hosts in your host pool is `10`, autoscale will ensure a minimum of `1` session host is available to take user connections.
	RampUpMinimumHostsPercent pulumi.IntPtrInput `pulumi:"rampUpMinimumHostsPercent"`
	// The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
	RampUpStartTime pulumi.StringInput `pulumi:"rampUpStartTime"`
}

func (ScalingPlanScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingPlanSchedule)(nil)).Elem()
}

func (i ScalingPlanScheduleArgs) ToScalingPlanScheduleOutput() ScalingPlanScheduleOutput {
	return i.ToScalingPlanScheduleOutputWithContext(context.Background())
}

func (i ScalingPlanScheduleArgs) ToScalingPlanScheduleOutputWithContext(ctx context.Context) ScalingPlanScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPlanScheduleOutput)
}

// ScalingPlanScheduleArrayInput is an input type that accepts ScalingPlanScheduleArray and ScalingPlanScheduleArrayOutput values.
// You can construct a concrete instance of `ScalingPlanScheduleArrayInput` via:
//
//	ScalingPlanScheduleArray{ ScalingPlanScheduleArgs{...} }
type ScalingPlanScheduleArrayInput interface {
	pulumi.Input

	ToScalingPlanScheduleArrayOutput() ScalingPlanScheduleArrayOutput
	ToScalingPlanScheduleArrayOutputWithContext(context.Context) ScalingPlanScheduleArrayOutput
}

type ScalingPlanScheduleArray []ScalingPlanScheduleInput

func (ScalingPlanScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingPlanSchedule)(nil)).Elem()
}

func (i ScalingPlanScheduleArray) ToScalingPlanScheduleArrayOutput() ScalingPlanScheduleArrayOutput {
	return i.ToScalingPlanScheduleArrayOutputWithContext(context.Background())
}

func (i ScalingPlanScheduleArray) ToScalingPlanScheduleArrayOutputWithContext(ctx context.Context) ScalingPlanScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPlanScheduleArrayOutput)
}

type ScalingPlanScheduleOutput struct{ *pulumi.OutputState }

func (ScalingPlanScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScalingPlanSchedule)(nil)).Elem()
}

func (o ScalingPlanScheduleOutput) ToScalingPlanScheduleOutput() ScalingPlanScheduleOutput {
	return o
}

func (o ScalingPlanScheduleOutput) ToScalingPlanScheduleOutputWithContext(ctx context.Context) ScalingPlanScheduleOutput {
	return o
}

// A list of Days of the Week on which this schedule will be used. Possible values are `Monday`, `Tuesday`, `Wednesday`, `Thursday`, `Friday`, `Saturday`, and `Sunday`
func (o ScalingPlanScheduleOutput) DaysOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) []string { return v.DaysOfWeeks }).(pulumi.StringArrayOutput)
}

// The name of the schedule.
func (o ScalingPlanScheduleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.Name }).(pulumi.StringOutput)
}

// The load Balancing Algorithm to use during Off-Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
func (o ScalingPlanScheduleOutput) OffPeakLoadBalancingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.OffPeakLoadBalancingAlgorithm }).(pulumi.StringOutput)
}

// The time at which Off-Peak scaling will begin. This is also the end-time for the Ramp-Down period. The time must be specified in "HH:MM" format.
func (o ScalingPlanScheduleOutput) OffPeakStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.OffPeakStartTime }).(pulumi.StringOutput)
}

// The load Balancing Algorithm to use during Peak Hours. Possible values are `DepthFirst` and `BreadthFirst`.
func (o ScalingPlanScheduleOutput) PeakLoadBalancingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.PeakLoadBalancingAlgorithm }).(pulumi.StringOutput)
}

// The time at which Peak scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
func (o ScalingPlanScheduleOutput) PeakStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.PeakStartTime }).(pulumi.StringOutput)
}

// This is the value in percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-down and off-peak hours. For example, if capacity threshold is specified as 60% and your total host pool capacity is 100 sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of 60 sessions.
func (o ScalingPlanScheduleOutput) RampDownCapacityThresholdPercent() pulumi.IntOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) int { return v.RampDownCapacityThresholdPercent }).(pulumi.IntOutput)
}

// Whether users will be forced to log-off session hosts once the `rampDownWaitTimeMinutes` value has been exceeded during the Ramp-Down period. Possible
func (o ScalingPlanScheduleOutput) RampDownForceLogoffUsers() pulumi.BoolOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) bool { return v.RampDownForceLogoffUsers }).(pulumi.BoolOutput)
}

// The load Balancing Algorithm to use during the Ramp-Down period. Possible values are `DepthFirst` and `BreadthFirst`.
func (o ScalingPlanScheduleOutput) RampDownLoadBalancingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.RampDownLoadBalancingAlgorithm }).(pulumi.StringOutput)
}

// The minimum percentage of session host virtual machines that you would like to get to for ramp-down and off-peak hours. For example, if Minimum percentage of hosts is specified as 10% and total number of session hosts in your host pool is 10, autoscale will ensure a minimum of 1 session host is available to take user connections.
func (o ScalingPlanScheduleOutput) RampDownMinimumHostsPercent() pulumi.IntOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) int { return v.RampDownMinimumHostsPercent }).(pulumi.IntOutput)
}

// The notification message to send to users during Ramp-Down period when they are required to log-off.
func (o ScalingPlanScheduleOutput) RampDownNotificationMessage() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.RampDownNotificationMessage }).(pulumi.StringOutput)
}

// The time at which Ramp-Down scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
func (o ScalingPlanScheduleOutput) RampDownStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.RampDownStartTime }).(pulumi.StringOutput)
}

// Controls Session Host shutdown behaviour during Ramp-Down period. Session Hosts can either be shutdown when all sessions on the Session Host have ended, or when there are no Active sessions left on the Session Host. Possible values are `ZeroSessions` and `ZeroActiveSessions`.
func (o ScalingPlanScheduleOutput) RampDownStopHostsWhen() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.RampDownStopHostsWhen }).(pulumi.StringOutput)
}

// The number of minutes during Ramp-Down period that autoscale will wait after setting the session host VMs to drain mode, notifying any currently signed in users to save their work before forcing the users to logoff. Once all user sessions on the session host VM have been logged off, Autoscale will shut down the VM.
func (o ScalingPlanScheduleOutput) RampDownWaitTimeMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) int { return v.RampDownWaitTimeMinutes }).(pulumi.IntOutput)
}

// This is the value of percentage of used host pool capacity that will be considered to evaluate whether to turn on/off virtual machines during the ramp-up and peak hours. For example, if capacity threshold is specified as `60%` and your total host pool capacity is `100` sessions, autoscale will turn on additional session hosts once the host pool exceeds a load of `60` sessions.
func (o ScalingPlanScheduleOutput) RampUpCapacityThresholdPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) *int { return v.RampUpCapacityThresholdPercent }).(pulumi.IntPtrOutput)
}

// The load Balancing Algorithm to use during the Ramp-Up period. Possible values are `DepthFirst` and `BreadthFirst`.
func (o ScalingPlanScheduleOutput) RampUpLoadBalancingAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.RampUpLoadBalancingAlgorithm }).(pulumi.StringOutput)
}

// Specifies the minimum percentage of session host virtual machines to start during ramp-up for peak hours. For example, if Minimum percentage of hosts is specified as `10%` and total number of session hosts in your host pool is `10`, autoscale will ensure a minimum of `1` session host is available to take user connections.
func (o ScalingPlanScheduleOutput) RampUpMinimumHostsPercent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) *int { return v.RampUpMinimumHostsPercent }).(pulumi.IntPtrOutput)
}

// The time at which Ramp-Up scaling will begin. This is also the end-time for the Ramp-Up period. The time must be specified in "HH:MM" format.
func (o ScalingPlanScheduleOutput) RampUpStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v ScalingPlanSchedule) string { return v.RampUpStartTime }).(pulumi.StringOutput)
}

type ScalingPlanScheduleArrayOutput struct{ *pulumi.OutputState }

func (ScalingPlanScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScalingPlanSchedule)(nil)).Elem()
}

func (o ScalingPlanScheduleArrayOutput) ToScalingPlanScheduleArrayOutput() ScalingPlanScheduleArrayOutput {
	return o
}

func (o ScalingPlanScheduleArrayOutput) ToScalingPlanScheduleArrayOutputWithContext(ctx context.Context) ScalingPlanScheduleArrayOutput {
	return o
}

func (o ScalingPlanScheduleArrayOutput) Index(i pulumi.IntInput) ScalingPlanScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScalingPlanSchedule {
		return vs[0].([]ScalingPlanSchedule)[vs[1].(int)]
	}).(ScalingPlanScheduleOutput)
}

type GetHostPoolScheduledAgentUpdate struct {
	// Are scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) enabled on session hosts.
	Enabled bool `pulumi:"enabled"`
	// A `schedule` block as defined below.
	Schedules []GetHostPoolScheduledAgentUpdateSchedule `pulumi:"schedules"`
	// The time zone in which the agent update schedule will apply.
	Timezone string `pulumi:"timezone"`
	// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host.
	UseSessionHostTimezone bool `pulumi:"useSessionHostTimezone"`
}

// GetHostPoolScheduledAgentUpdateInput is an input type that accepts GetHostPoolScheduledAgentUpdateArgs and GetHostPoolScheduledAgentUpdateOutput values.
// You can construct a concrete instance of `GetHostPoolScheduledAgentUpdateInput` via:
//
//	GetHostPoolScheduledAgentUpdateArgs{...}
type GetHostPoolScheduledAgentUpdateInput interface {
	pulumi.Input

	ToGetHostPoolScheduledAgentUpdateOutput() GetHostPoolScheduledAgentUpdateOutput
	ToGetHostPoolScheduledAgentUpdateOutputWithContext(context.Context) GetHostPoolScheduledAgentUpdateOutput
}

type GetHostPoolScheduledAgentUpdateArgs struct {
	// Are scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) enabled on session hosts.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// A `schedule` block as defined below.
	Schedules GetHostPoolScheduledAgentUpdateScheduleArrayInput `pulumi:"schedules"`
	// The time zone in which the agent update schedule will apply.
	Timezone pulumi.StringInput `pulumi:"timezone"`
	// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host.
	UseSessionHostTimezone pulumi.BoolInput `pulumi:"useSessionHostTimezone"`
}

func (GetHostPoolScheduledAgentUpdateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostPoolScheduledAgentUpdate)(nil)).Elem()
}

func (i GetHostPoolScheduledAgentUpdateArgs) ToGetHostPoolScheduledAgentUpdateOutput() GetHostPoolScheduledAgentUpdateOutput {
	return i.ToGetHostPoolScheduledAgentUpdateOutputWithContext(context.Background())
}

func (i GetHostPoolScheduledAgentUpdateArgs) ToGetHostPoolScheduledAgentUpdateOutputWithContext(ctx context.Context) GetHostPoolScheduledAgentUpdateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHostPoolScheduledAgentUpdateOutput)
}

// GetHostPoolScheduledAgentUpdateArrayInput is an input type that accepts GetHostPoolScheduledAgentUpdateArray and GetHostPoolScheduledAgentUpdateArrayOutput values.
// You can construct a concrete instance of `GetHostPoolScheduledAgentUpdateArrayInput` via:
//
//	GetHostPoolScheduledAgentUpdateArray{ GetHostPoolScheduledAgentUpdateArgs{...} }
type GetHostPoolScheduledAgentUpdateArrayInput interface {
	pulumi.Input

	ToGetHostPoolScheduledAgentUpdateArrayOutput() GetHostPoolScheduledAgentUpdateArrayOutput
	ToGetHostPoolScheduledAgentUpdateArrayOutputWithContext(context.Context) GetHostPoolScheduledAgentUpdateArrayOutput
}

type GetHostPoolScheduledAgentUpdateArray []GetHostPoolScheduledAgentUpdateInput

func (GetHostPoolScheduledAgentUpdateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHostPoolScheduledAgentUpdate)(nil)).Elem()
}

func (i GetHostPoolScheduledAgentUpdateArray) ToGetHostPoolScheduledAgentUpdateArrayOutput() GetHostPoolScheduledAgentUpdateArrayOutput {
	return i.ToGetHostPoolScheduledAgentUpdateArrayOutputWithContext(context.Background())
}

func (i GetHostPoolScheduledAgentUpdateArray) ToGetHostPoolScheduledAgentUpdateArrayOutputWithContext(ctx context.Context) GetHostPoolScheduledAgentUpdateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHostPoolScheduledAgentUpdateArrayOutput)
}

type GetHostPoolScheduledAgentUpdateOutput struct{ *pulumi.OutputState }

func (GetHostPoolScheduledAgentUpdateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostPoolScheduledAgentUpdate)(nil)).Elem()
}

func (o GetHostPoolScheduledAgentUpdateOutput) ToGetHostPoolScheduledAgentUpdateOutput() GetHostPoolScheduledAgentUpdateOutput {
	return o
}

func (o GetHostPoolScheduledAgentUpdateOutput) ToGetHostPoolScheduledAgentUpdateOutputWithContext(ctx context.Context) GetHostPoolScheduledAgentUpdateOutput {
	return o
}

// Are scheduled updates of the AVD agent components (RDAgent, Geneva Monitoring agent, and side-by-side stack) enabled on session hosts.
func (o GetHostPoolScheduledAgentUpdateOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostPoolScheduledAgentUpdate) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// A `schedule` block as defined below.
func (o GetHostPoolScheduledAgentUpdateOutput) Schedules() GetHostPoolScheduledAgentUpdateScheduleArrayOutput {
	return o.ApplyT(func(v GetHostPoolScheduledAgentUpdate) []GetHostPoolScheduledAgentUpdateSchedule { return v.Schedules }).(GetHostPoolScheduledAgentUpdateScheduleArrayOutput)
}

// The time zone in which the agent update schedule will apply.
func (o GetHostPoolScheduledAgentUpdateOutput) Timezone() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostPoolScheduledAgentUpdate) string { return v.Timezone }).(pulumi.StringOutput)
}

// Specifies whether scheduled agent updates should be applied based on the timezone of the affected session host.
func (o GetHostPoolScheduledAgentUpdateOutput) UseSessionHostTimezone() pulumi.BoolOutput {
	return o.ApplyT(func(v GetHostPoolScheduledAgentUpdate) bool { return v.UseSessionHostTimezone }).(pulumi.BoolOutput)
}

type GetHostPoolScheduledAgentUpdateArrayOutput struct{ *pulumi.OutputState }

func (GetHostPoolScheduledAgentUpdateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHostPoolScheduledAgentUpdate)(nil)).Elem()
}

func (o GetHostPoolScheduledAgentUpdateArrayOutput) ToGetHostPoolScheduledAgentUpdateArrayOutput() GetHostPoolScheduledAgentUpdateArrayOutput {
	return o
}

func (o GetHostPoolScheduledAgentUpdateArrayOutput) ToGetHostPoolScheduledAgentUpdateArrayOutputWithContext(ctx context.Context) GetHostPoolScheduledAgentUpdateArrayOutput {
	return o
}

func (o GetHostPoolScheduledAgentUpdateArrayOutput) Index(i pulumi.IntInput) GetHostPoolScheduledAgentUpdateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHostPoolScheduledAgentUpdate {
		return vs[0].([]GetHostPoolScheduledAgentUpdate)[vs[1].(int)]
	}).(GetHostPoolScheduledAgentUpdateOutput)
}

type GetHostPoolScheduledAgentUpdateSchedule struct {
	// The day of the week on which agent updates should be performed.
	DayOfWeek string `pulumi:"dayOfWeek"`
	// The hour of day the update window should start.
	HourOfDay int `pulumi:"hourOfDay"`
}

// GetHostPoolScheduledAgentUpdateScheduleInput is an input type that accepts GetHostPoolScheduledAgentUpdateScheduleArgs and GetHostPoolScheduledAgentUpdateScheduleOutput values.
// You can construct a concrete instance of `GetHostPoolScheduledAgentUpdateScheduleInput` via:
//
//	GetHostPoolScheduledAgentUpdateScheduleArgs{...}
type GetHostPoolScheduledAgentUpdateScheduleInput interface {
	pulumi.Input

	ToGetHostPoolScheduledAgentUpdateScheduleOutput() GetHostPoolScheduledAgentUpdateScheduleOutput
	ToGetHostPoolScheduledAgentUpdateScheduleOutputWithContext(context.Context) GetHostPoolScheduledAgentUpdateScheduleOutput
}

type GetHostPoolScheduledAgentUpdateScheduleArgs struct {
	// The day of the week on which agent updates should be performed.
	DayOfWeek pulumi.StringInput `pulumi:"dayOfWeek"`
	// The hour of day the update window should start.
	HourOfDay pulumi.IntInput `pulumi:"hourOfDay"`
}

func (GetHostPoolScheduledAgentUpdateScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostPoolScheduledAgentUpdateSchedule)(nil)).Elem()
}

func (i GetHostPoolScheduledAgentUpdateScheduleArgs) ToGetHostPoolScheduledAgentUpdateScheduleOutput() GetHostPoolScheduledAgentUpdateScheduleOutput {
	return i.ToGetHostPoolScheduledAgentUpdateScheduleOutputWithContext(context.Background())
}

func (i GetHostPoolScheduledAgentUpdateScheduleArgs) ToGetHostPoolScheduledAgentUpdateScheduleOutputWithContext(ctx context.Context) GetHostPoolScheduledAgentUpdateScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHostPoolScheduledAgentUpdateScheduleOutput)
}

// GetHostPoolScheduledAgentUpdateScheduleArrayInput is an input type that accepts GetHostPoolScheduledAgentUpdateScheduleArray and GetHostPoolScheduledAgentUpdateScheduleArrayOutput values.
// You can construct a concrete instance of `GetHostPoolScheduledAgentUpdateScheduleArrayInput` via:
//
//	GetHostPoolScheduledAgentUpdateScheduleArray{ GetHostPoolScheduledAgentUpdateScheduleArgs{...} }
type GetHostPoolScheduledAgentUpdateScheduleArrayInput interface {
	pulumi.Input

	ToGetHostPoolScheduledAgentUpdateScheduleArrayOutput() GetHostPoolScheduledAgentUpdateScheduleArrayOutput
	ToGetHostPoolScheduledAgentUpdateScheduleArrayOutputWithContext(context.Context) GetHostPoolScheduledAgentUpdateScheduleArrayOutput
}

type GetHostPoolScheduledAgentUpdateScheduleArray []GetHostPoolScheduledAgentUpdateScheduleInput

func (GetHostPoolScheduledAgentUpdateScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHostPoolScheduledAgentUpdateSchedule)(nil)).Elem()
}

func (i GetHostPoolScheduledAgentUpdateScheduleArray) ToGetHostPoolScheduledAgentUpdateScheduleArrayOutput() GetHostPoolScheduledAgentUpdateScheduleArrayOutput {
	return i.ToGetHostPoolScheduledAgentUpdateScheduleArrayOutputWithContext(context.Background())
}

func (i GetHostPoolScheduledAgentUpdateScheduleArray) ToGetHostPoolScheduledAgentUpdateScheduleArrayOutputWithContext(ctx context.Context) GetHostPoolScheduledAgentUpdateScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHostPoolScheduledAgentUpdateScheduleArrayOutput)
}

type GetHostPoolScheduledAgentUpdateScheduleOutput struct{ *pulumi.OutputState }

func (GetHostPoolScheduledAgentUpdateScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHostPoolScheduledAgentUpdateSchedule)(nil)).Elem()
}

func (o GetHostPoolScheduledAgentUpdateScheduleOutput) ToGetHostPoolScheduledAgentUpdateScheduleOutput() GetHostPoolScheduledAgentUpdateScheduleOutput {
	return o
}

func (o GetHostPoolScheduledAgentUpdateScheduleOutput) ToGetHostPoolScheduledAgentUpdateScheduleOutputWithContext(ctx context.Context) GetHostPoolScheduledAgentUpdateScheduleOutput {
	return o
}

// The day of the week on which agent updates should be performed.
func (o GetHostPoolScheduledAgentUpdateScheduleOutput) DayOfWeek() pulumi.StringOutput {
	return o.ApplyT(func(v GetHostPoolScheduledAgentUpdateSchedule) string { return v.DayOfWeek }).(pulumi.StringOutput)
}

// The hour of day the update window should start.
func (o GetHostPoolScheduledAgentUpdateScheduleOutput) HourOfDay() pulumi.IntOutput {
	return o.ApplyT(func(v GetHostPoolScheduledAgentUpdateSchedule) int { return v.HourOfDay }).(pulumi.IntOutput)
}

type GetHostPoolScheduledAgentUpdateScheduleArrayOutput struct{ *pulumi.OutputState }

func (GetHostPoolScheduledAgentUpdateScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHostPoolScheduledAgentUpdateSchedule)(nil)).Elem()
}

func (o GetHostPoolScheduledAgentUpdateScheduleArrayOutput) ToGetHostPoolScheduledAgentUpdateScheduleArrayOutput() GetHostPoolScheduledAgentUpdateScheduleArrayOutput {
	return o
}

func (o GetHostPoolScheduledAgentUpdateScheduleArrayOutput) ToGetHostPoolScheduledAgentUpdateScheduleArrayOutputWithContext(ctx context.Context) GetHostPoolScheduledAgentUpdateScheduleArrayOutput {
	return o
}

func (o GetHostPoolScheduledAgentUpdateScheduleArrayOutput) Index(i pulumi.IntInput) GetHostPoolScheduledAgentUpdateScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHostPoolScheduledAgentUpdateSchedule {
		return vs[0].([]GetHostPoolScheduledAgentUpdateSchedule)[vs[1].(int)]
	}).(GetHostPoolScheduledAgentUpdateScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostPoolScheduledAgentUpdatesInput)(nil)).Elem(), HostPoolScheduledAgentUpdatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPoolScheduledAgentUpdatesPtrInput)(nil)).Elem(), HostPoolScheduledAgentUpdatesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPoolScheduledAgentUpdatesScheduleInput)(nil)).Elem(), HostPoolScheduledAgentUpdatesScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostPoolScheduledAgentUpdatesScheduleArrayInput)(nil)).Elem(), HostPoolScheduledAgentUpdatesScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPlanHostPoolInput)(nil)).Elem(), ScalingPlanHostPoolArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPlanHostPoolArrayInput)(nil)).Elem(), ScalingPlanHostPoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPlanScheduleInput)(nil)).Elem(), ScalingPlanScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPlanScheduleArrayInput)(nil)).Elem(), ScalingPlanScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHostPoolScheduledAgentUpdateInput)(nil)).Elem(), GetHostPoolScheduledAgentUpdateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHostPoolScheduledAgentUpdateArrayInput)(nil)).Elem(), GetHostPoolScheduledAgentUpdateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHostPoolScheduledAgentUpdateScheduleInput)(nil)).Elem(), GetHostPoolScheduledAgentUpdateScheduleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHostPoolScheduledAgentUpdateScheduleArrayInput)(nil)).Elem(), GetHostPoolScheduledAgentUpdateScheduleArray{})
	pulumi.RegisterOutputType(HostPoolScheduledAgentUpdatesOutput{})
	pulumi.RegisterOutputType(HostPoolScheduledAgentUpdatesPtrOutput{})
	pulumi.RegisterOutputType(HostPoolScheduledAgentUpdatesScheduleOutput{})
	pulumi.RegisterOutputType(HostPoolScheduledAgentUpdatesScheduleArrayOutput{})
	pulumi.RegisterOutputType(ScalingPlanHostPoolOutput{})
	pulumi.RegisterOutputType(ScalingPlanHostPoolArrayOutput{})
	pulumi.RegisterOutputType(ScalingPlanScheduleOutput{})
	pulumi.RegisterOutputType(ScalingPlanScheduleArrayOutput{})
	pulumi.RegisterOutputType(GetHostPoolScheduledAgentUpdateOutput{})
	pulumi.RegisterOutputType(GetHostPoolScheduledAgentUpdateArrayOutput{})
	pulumi.RegisterOutputType(GetHostPoolScheduledAgentUpdateScheduleOutput{})
	pulumi.RegisterOutputType(GetHostPoolScheduledAgentUpdateScheduleArrayOutput{})
}
