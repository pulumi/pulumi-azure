// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domainservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/domainservices"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			deployResourceGroup, err := core.NewResourceGroup(ctx, "deployResourceGroup", &core.ResourceGroupArgs{
//				Location: pulumi.String("West Europe"),
//			})
//			if err != nil {
//				return err
//			}
//			deployVirtualNetwork, err := network.NewVirtualNetwork(ctx, "deployVirtualNetwork", &network.VirtualNetworkArgs{
//				Location:          deployResourceGroup.Location,
//				ResourceGroupName: deployResourceGroup.Name,
//				AddressSpaces: pulumi.StringArray{
//					pulumi.String("10.0.1.0/16"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			deploySubnet, err := network.NewSubnet(ctx, "deploySubnet", &network.SubnetArgs{
//				ResourceGroupName:  deployResourceGroup.Name,
//				VirtualNetworkName: deployVirtualNetwork.Name,
//				AddressPrefixes: pulumi.StringArray{
//					pulumi.String("10.0.1.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			deployNetworkSecurityGroup, err := network.NewNetworkSecurityGroup(ctx, "deployNetworkSecurityGroup", &network.NetworkSecurityGroupArgs{
//				Location:          deployResourceGroup.Location,
//				ResourceGroupName: deployResourceGroup.Name,
//				SecurityRules: network.NetworkSecurityGroupSecurityRuleArray{
//					&network.NetworkSecurityGroupSecurityRuleArgs{
//						Name:                     pulumi.String("AllowSyncWithAzureAD"),
//						Priority:                 pulumi.Int(101),
//						Direction:                pulumi.String("Inbound"),
//						Access:                   pulumi.String("Allow"),
//						Protocol:                 pulumi.String("Tcp"),
//						SourcePortRange:          pulumi.String("*"),
//						DestinationPortRange:     pulumi.String("443"),
//						SourceAddressPrefix:      pulumi.String("AzureActiveDirectoryDomainServices"),
//						DestinationAddressPrefix: pulumi.String("*"),
//					},
//					&network.NetworkSecurityGroupSecurityRuleArgs{
//						Name:                     pulumi.String("AllowRD"),
//						Priority:                 pulumi.Int(201),
//						Direction:                pulumi.String("Inbound"),
//						Access:                   pulumi.String("Allow"),
//						Protocol:                 pulumi.String("Tcp"),
//						SourcePortRange:          pulumi.String("*"),
//						DestinationPortRange:     pulumi.String("3389"),
//						SourceAddressPrefix:      pulumi.String("CorpNetSaw"),
//						DestinationAddressPrefix: pulumi.String("*"),
//					},
//					&network.NetworkSecurityGroupSecurityRuleArgs{
//						Name:                     pulumi.String("AllowPSRemoting"),
//						Priority:                 pulumi.Int(301),
//						Direction:                pulumi.String("Inbound"),
//						Access:                   pulumi.String("Allow"),
//						Protocol:                 pulumi.String("Tcp"),
//						SourcePortRange:          pulumi.String("*"),
//						DestinationPortRange:     pulumi.String("5986"),
//						SourceAddressPrefix:      pulumi.String("AzureActiveDirectoryDomainServices"),
//						DestinationAddressPrefix: pulumi.String("*"),
//					},
//					&network.NetworkSecurityGroupSecurityRuleArgs{
//						Name:                     pulumi.String("AllowLDAPS"),
//						Priority:                 pulumi.Int(401),
//						Direction:                pulumi.String("Inbound"),
//						Access:                   pulumi.String("Allow"),
//						Protocol:                 pulumi.String("Tcp"),
//						SourcePortRange:          pulumi.String("*"),
//						DestinationPortRange:     pulumi.String("636"),
//						SourceAddressPrefix:      pulumi.String("*"),
//						DestinationAddressPrefix: pulumi.String("*"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			deploySubnetNetworkSecurityGroupAssociation, err := network.NewSubnetNetworkSecurityGroupAssociation(ctx, "deploySubnetNetworkSecurityGroupAssociation", &network.SubnetNetworkSecurityGroupAssociationArgs{
//				SubnetId:               deploySubnet.ID(),
//				NetworkSecurityGroupId: deployNetworkSecurityGroup.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			dcAdmins, err := azuread.NewGroup(ctx, "dcAdmins", &azuread.GroupArgs{
//				DisplayName:     pulumi.String("AAD DC Administrators"),
//				SecurityEnabled: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			adminUser, err := azuread.NewUser(ctx, "adminUser", &azuread.UserArgs{
//				UserPrincipalName: pulumi.String("dc-admin@hashicorp-example.com"),
//				DisplayName:       pulumi.String("DC Administrator"),
//				Password:          pulumi.String("Pa55w0Rd!!1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = azuread.NewGroupMember(ctx, "adminGroupMember", &azuread.GroupMemberArgs{
//				GroupObjectId:  dcAdmins.ObjectId,
//				MemberObjectId: adminUser.ObjectId,
//			})
//			if err != nil {
//				return err
//			}
//			exampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, "exampleServicePrincipal", &azuread.ServicePrincipalArgs{
//				ApplicationId: pulumi.String("2565bd9d-da50-47d4-8b85-4c97f669dc36"),
//			})
//			if err != nil {
//				return err
//			}
//			aadds, err := core.NewResourceGroup(ctx, "aadds", &core.ResourceGroupArgs{
//				Location: pulumi.String("westeurope"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = domainservices.NewService(ctx, "exampleService", &domainservices.ServiceArgs{
//				Location:            aadds.Location,
//				ResourceGroupName:   aadds.Name,
//				DomainName:          pulumi.String("widgetslogin.net"),
//				Sku:                 pulumi.String("Enterprise"),
//				FilteredSyncEnabled: pulumi.Bool(false),
//				InitialReplicaSet: &domainservices.ServiceInitialReplicaSetArgs{
//					SubnetId: deploySubnet.ID(),
//				},
//				Notifications: &domainservices.ServiceNotificationsArgs{
//					AdditionalRecipients: pulumi.StringArray{
//						pulumi.String("notifyA@example.net"),
//						pulumi.String("notifyB@example.org"),
//					},
//					NotifyDcAdmins:     pulumi.Bool(true),
//					NotifyGlobalAdmins: pulumi.Bool(true),
//				},
//				Security: &domainservices.ServiceSecurityArgs{
//					SyncKerberosPasswords: pulumi.Bool(true),
//					SyncNtlmPasswords:     pulumi.Bool(true),
//					SyncOnPremPasswords:   pulumi.Bool(true),
//				},
//				Tags: pulumi.StringMap{
//					"Environment": pulumi.String("prod"),
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleServicePrincipal,
//				deploySubnetNetworkSecurityGroupAssociation,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Domain Services can be imported using the resource ID, together with the Replica Set ID that you wish to designate as the initial replica set, e.g.
//
// ```sh
//
//	$ pulumi import azure:domainservices/service:Service example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AAD/domainServices/instance1/initialReplicaSetId/00000000-0000-0000-0000-000000000000
//
// ```
type Service struct {
	pulumi.CustomResourceState

	// A unique ID for the managed domain deployment.
	DeploymentId pulumi.StringOutput `pulumi:"deploymentId"`
	// The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
	DomainConfigurationType pulumi.StringPtrOutput `pulumi:"domainConfigurationType"`
	// The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
	FilteredSyncEnabled pulumi.BoolPtrOutput `pulumi:"filteredSyncEnabled"`
	// An `initialReplicaSet` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
	InitialReplicaSet ServiceInitialReplicaSetOutput `pulumi:"initialReplicaSet"`
	// The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
	Name pulumi.StringOutput `pulumi:"name"`
	// A `notifications` block as defined below.
	Notifications ServiceNotificationsOutput `pulumi:"notifications"`
	// The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringOutput `pulumi:"resourceGroupName"`
	// The Azure resource ID for the domain service.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// A `secureLdap` block as defined below.
	SecureLdap ServiceSecureLdapOutput `pulumi:"secureLdap"`
	// A `security` block as defined below.
	Security ServiceSecurityOutput `pulumi:"security"`
	// The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
	Sku       pulumi.StringOutput `pulumi:"sku"`
	SyncOwner pulumi.StringOutput `pulumi:"syncOwner"`
	// A mapping of tags assigned to the resource.
	Tags     pulumi.StringMapOutput `pulumi:"tags"`
	TenantId pulumi.StringOutput    `pulumi:"tenantId"`
	Version  pulumi.IntOutput       `pulumi:"version"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.InitialReplicaSet == nil {
		return nil, errors.New("invalid value for required argument 'InitialReplicaSet'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	if args.Sku == nil {
		return nil, errors.New("invalid value for required argument 'Sku'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("azure:domainservices/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("azure:domainservices/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// A unique ID for the managed domain deployment.
	DeploymentId *string `pulumi:"deploymentId"`
	// The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
	DomainConfigurationType *string `pulumi:"domainConfigurationType"`
	// The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
	DomainName *string `pulumi:"domainName"`
	// Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
	FilteredSyncEnabled *bool `pulumi:"filteredSyncEnabled"`
	// An `initialReplicaSet` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
	InitialReplicaSet *ServiceInitialReplicaSet `pulumi:"initialReplicaSet"`
	// The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `notifications` block as defined below.
	Notifications *ServiceNotifications `pulumi:"notifications"`
	// The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
	ResourceGroupName *string `pulumi:"resourceGroupName"`
	// The Azure resource ID for the domain service.
	ResourceId *string `pulumi:"resourceId"`
	// A `secureLdap` block as defined below.
	SecureLdap *ServiceSecureLdap `pulumi:"secureLdap"`
	// A `security` block as defined below.
	Security *ServiceSecurity `pulumi:"security"`
	// The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
	Sku       *string `pulumi:"sku"`
	SyncOwner *string `pulumi:"syncOwner"`
	// A mapping of tags assigned to the resource.
	Tags     map[string]string `pulumi:"tags"`
	TenantId *string           `pulumi:"tenantId"`
	Version  *int              `pulumi:"version"`
}

type ServiceState struct {
	// A unique ID for the managed domain deployment.
	DeploymentId pulumi.StringPtrInput
	// The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
	DomainConfigurationType pulumi.StringPtrInput
	// The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
	DomainName pulumi.StringPtrInput
	// Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
	FilteredSyncEnabled pulumi.BoolPtrInput
	// An `initialReplicaSet` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
	InitialReplicaSet ServiceInitialReplicaSetPtrInput
	// The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `notifications` block as defined below.
	Notifications ServiceNotificationsPtrInput
	// The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringPtrInput
	// The Azure resource ID for the domain service.
	ResourceId pulumi.StringPtrInput
	// A `secureLdap` block as defined below.
	SecureLdap ServiceSecureLdapPtrInput
	// A `security` block as defined below.
	Security ServiceSecurityPtrInput
	// The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
	Sku       pulumi.StringPtrInput
	SyncOwner pulumi.StringPtrInput
	// A mapping of tags assigned to the resource.
	Tags     pulumi.StringMapInput
	TenantId pulumi.StringPtrInput
	Version  pulumi.IntPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
	DomainConfigurationType *string `pulumi:"domainConfigurationType"`
	// The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
	DomainName string `pulumi:"domainName"`
	// Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
	FilteredSyncEnabled *bool `pulumi:"filteredSyncEnabled"`
	// An `initialReplicaSet` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
	InitialReplicaSet ServiceInitialReplicaSet `pulumi:"initialReplicaSet"`
	// The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
	Name *string `pulumi:"name"`
	// A `notifications` block as defined below.
	Notifications *ServiceNotifications `pulumi:"notifications"`
	// The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// A `secureLdap` block as defined below.
	SecureLdap *ServiceSecureLdap `pulumi:"secureLdap"`
	// A `security` block as defined below.
	Security *ServiceSecurity `pulumi:"security"`
	// The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
	Sku string `pulumi:"sku"`
	// A mapping of tags assigned to the resource.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
	DomainConfigurationType pulumi.StringPtrInput
	// The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
	DomainName pulumi.StringInput
	// Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
	FilteredSyncEnabled pulumi.BoolPtrInput
	// An `initialReplicaSet` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
	InitialReplicaSet ServiceInitialReplicaSetInput
	// The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
	Name pulumi.StringPtrInput
	// A `notifications` block as defined below.
	Notifications ServiceNotificationsPtrInput
	// The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
	ResourceGroupName pulumi.StringInput
	// A `secureLdap` block as defined below.
	SecureLdap ServiceSecureLdapPtrInput
	// A `security` block as defined below.
	Security ServiceSecurityPtrInput
	// The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
	Sku pulumi.StringInput
	// A mapping of tags assigned to the resource.
	Tags pulumi.StringMapInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// A unique ID for the managed domain deployment.
func (o ServiceOutput) DeploymentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.DeploymentId }).(pulumi.StringOutput)
}

// The configuration type of this Active Directory Domain. Possible values are `FullySynced` and `ResourceTrusting`. Changing this forces a new resource to be created.
func (o ServiceOutput) DomainConfigurationType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.StringPtrOutput { return v.DomainConfigurationType }).(pulumi.StringPtrOutput)
}

// The Active Directory domain to use. See [official documentation](https://docs.microsoft.com/azure/active-directory-domain-services/tutorial-create-instance#create-a-managed-domain) for constraints and recommendations. Changing this forces a new resource to be created.
func (o ServiceOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.DomainName }).(pulumi.StringOutput)
}

// Whether to enable group-based filtered sync (also called scoped synchronisation). Defaults to `false`.
func (o ServiceOutput) FilteredSyncEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Service) pulumi.BoolPtrOutput { return v.FilteredSyncEnabled }).(pulumi.BoolPtrOutput)
}

// An `initialReplicaSet` block as defined below. The initial replica set inherits the same location as the Domain Service resource.
func (o ServiceOutput) InitialReplicaSet() ServiceInitialReplicaSetOutput {
	return o.ApplyT(func(v *Service) ServiceInitialReplicaSetOutput { return v.InitialReplicaSet }).(ServiceInitialReplicaSetOutput)
}

// The Azure location where the Domain Service exists. Changing this forces a new resource to be created.
func (o ServiceOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The display name for your managed Active Directory Domain Service resource. Changing this forces a new resource to be created.
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// A `notifications` block as defined below.
func (o ServiceOutput) Notifications() ServiceNotificationsOutput {
	return o.ApplyT(func(v *Service) ServiceNotificationsOutput { return v.Notifications }).(ServiceNotificationsOutput)
}

// The name of the Resource Group in which the Domain Service should exist. Changing this forces a new resource to be created.
func (o ServiceOutput) ResourceGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ResourceGroupName }).(pulumi.StringOutput)
}

// The Azure resource ID for the domain service.
func (o ServiceOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// A `secureLdap` block as defined below.
func (o ServiceOutput) SecureLdap() ServiceSecureLdapOutput {
	return o.ApplyT(func(v *Service) ServiceSecureLdapOutput { return v.SecureLdap }).(ServiceSecureLdapOutput)
}

// A `security` block as defined below.
func (o ServiceOutput) Security() ServiceSecurityOutput {
	return o.ApplyT(func(v *Service) ServiceSecurityOutput { return v.Security }).(ServiceSecurityOutput)
}

// The SKU to use when provisioning the Domain Service resource. One of `Standard`, `Enterprise` or `Premium`.
func (o ServiceOutput) Sku() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Sku }).(pulumi.StringOutput)
}

func (o ServiceOutput) SyncOwner() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.SyncOwner }).(pulumi.StringOutput)
}

// A mapping of tags assigned to the resource.
func (o ServiceOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Service) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o ServiceOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.TenantId }).(pulumi.StringOutput)
}

func (o ServiceOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v *Service) pulumi.IntOutput { return v.Version }).(pulumi.IntOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
