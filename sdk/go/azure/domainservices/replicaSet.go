// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package domainservices

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Replica Set for an Active Directory Domain Service.
//
// ## Import
//
// Domain Service Replica Sets can be imported using the resource ID of the parent Domain Service and the Replica Set ID, e.g.
//
// ```sh
//  $ pulumi import azure:domainservices/replicaSet:ReplicaSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AAD/domainServices/instance1/replicaSets/00000000-0000-0000-0000-000000000000
// ```
type ReplicaSet struct {
	pulumi.CustomResourceState

	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses pulumi.StringArrayOutput `pulumi:"domainControllerIpAddresses"`
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringOutput `pulumi:"domainServiceId"`
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress pulumi.StringOutput `pulumi:"externalAccessIpAddress"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The current service status for the replica set.
	ServiceStatus pulumi.StringOutput `pulumi:"serviceStatus"`
	// The ID of the subnet in which to place this Replica Set.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewReplicaSet registers a new resource with the given unique name, arguments, and options.
func NewReplicaSet(ctx *pulumi.Context,
	name string, args *ReplicaSetArgs, opts ...pulumi.ResourceOption) (*ReplicaSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainServiceId == nil {
		return nil, errors.New("invalid value for required argument 'DomainServiceId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	var resource ReplicaSet
	err := ctx.RegisterResource("azure:domainservices/replicaSet:ReplicaSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicaSet gets an existing ReplicaSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicaSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicaSetState, opts ...pulumi.ResourceOption) (*ReplicaSet, error) {
	var resource ReplicaSet
	err := ctx.ReadResource("azure:domainservices/replicaSet:ReplicaSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicaSet resources.
type replicaSetState struct {
	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses []string `pulumi:"domainControllerIpAddresses"`
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId *string `pulumi:"domainServiceId"`
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress *string `pulumi:"externalAccessIpAddress"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The current service status for the replica set.
	ServiceStatus *string `pulumi:"serviceStatus"`
	// The ID of the subnet in which to place this Replica Set.
	SubnetId *string `pulumi:"subnetId"`
}

type ReplicaSetState struct {
	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses pulumi.StringArrayInput
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringPtrInput
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress pulumi.StringPtrInput
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The current service status for the replica set.
	ServiceStatus pulumi.StringPtrInput
	// The ID of the subnet in which to place this Replica Set.
	SubnetId pulumi.StringPtrInput
}

func (ReplicaSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSetState)(nil)).Elem()
}

type replicaSetArgs struct {
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId string `pulumi:"domainServiceId"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The ID of the subnet in which to place this Replica Set.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a ReplicaSet resource.
type ReplicaSetArgs struct {
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringInput
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The ID of the subnet in which to place this Replica Set.
	SubnetId pulumi.StringInput
}

func (ReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSetArgs)(nil)).Elem()
}

type ReplicaSetInput interface {
	pulumi.Input

	ToReplicaSetOutput() ReplicaSetOutput
	ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput
}

func (*ReplicaSet) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSet)(nil))
}

func (i *ReplicaSet) ToReplicaSetOutput() ReplicaSetOutput {
	return i.ToReplicaSetOutputWithContext(context.Background())
}

func (i *ReplicaSet) ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetOutput)
}

func (i *ReplicaSet) ToReplicaSetPtrOutput() ReplicaSetPtrOutput {
	return i.ToReplicaSetPtrOutputWithContext(context.Background())
}

func (i *ReplicaSet) ToReplicaSetPtrOutputWithContext(ctx context.Context) ReplicaSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetPtrOutput)
}

type ReplicaSetPtrInput interface {
	pulumi.Input

	ToReplicaSetPtrOutput() ReplicaSetPtrOutput
	ToReplicaSetPtrOutputWithContext(ctx context.Context) ReplicaSetPtrOutput
}

type replicaSetPtrType ReplicaSetArgs

func (*replicaSetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSet)(nil))
}

func (i *replicaSetPtrType) ToReplicaSetPtrOutput() ReplicaSetPtrOutput {
	return i.ToReplicaSetPtrOutputWithContext(context.Background())
}

func (i *replicaSetPtrType) ToReplicaSetPtrOutputWithContext(ctx context.Context) ReplicaSetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetPtrOutput)
}

// ReplicaSetArrayInput is an input type that accepts ReplicaSetArray and ReplicaSetArrayOutput values.
// You can construct a concrete instance of `ReplicaSetArrayInput` via:
//
//          ReplicaSetArray{ ReplicaSetArgs{...} }
type ReplicaSetArrayInput interface {
	pulumi.Input

	ToReplicaSetArrayOutput() ReplicaSetArrayOutput
	ToReplicaSetArrayOutputWithContext(context.Context) ReplicaSetArrayOutput
}

type ReplicaSetArray []ReplicaSetInput

func (ReplicaSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaSet)(nil)).Elem()
}

func (i ReplicaSetArray) ToReplicaSetArrayOutput() ReplicaSetArrayOutput {
	return i.ToReplicaSetArrayOutputWithContext(context.Background())
}

func (i ReplicaSetArray) ToReplicaSetArrayOutputWithContext(ctx context.Context) ReplicaSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetArrayOutput)
}

// ReplicaSetMapInput is an input type that accepts ReplicaSetMap and ReplicaSetMapOutput values.
// You can construct a concrete instance of `ReplicaSetMapInput` via:
//
//          ReplicaSetMap{ "key": ReplicaSetArgs{...} }
type ReplicaSetMapInput interface {
	pulumi.Input

	ToReplicaSetMapOutput() ReplicaSetMapOutput
	ToReplicaSetMapOutputWithContext(context.Context) ReplicaSetMapOutput
}

type ReplicaSetMap map[string]ReplicaSetInput

func (ReplicaSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaSet)(nil)).Elem()
}

func (i ReplicaSetMap) ToReplicaSetMapOutput() ReplicaSetMapOutput {
	return i.ToReplicaSetMapOutputWithContext(context.Background())
}

func (i ReplicaSetMap) ToReplicaSetMapOutputWithContext(ctx context.Context) ReplicaSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetMapOutput)
}

type ReplicaSetOutput struct{ *pulumi.OutputState }

func (ReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReplicaSet)(nil))
}

func (o ReplicaSetOutput) ToReplicaSetOutput() ReplicaSetOutput {
	return o
}

func (o ReplicaSetOutput) ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput {
	return o
}

func (o ReplicaSetOutput) ToReplicaSetPtrOutput() ReplicaSetPtrOutput {
	return o.ToReplicaSetPtrOutputWithContext(context.Background())
}

func (o ReplicaSetOutput) ToReplicaSetPtrOutputWithContext(ctx context.Context) ReplicaSetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ReplicaSet) *ReplicaSet {
		return &v
	}).(ReplicaSetPtrOutput)
}

type ReplicaSetPtrOutput struct{ *pulumi.OutputState }

func (ReplicaSetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSet)(nil))
}

func (o ReplicaSetPtrOutput) ToReplicaSetPtrOutput() ReplicaSetPtrOutput {
	return o
}

func (o ReplicaSetPtrOutput) ToReplicaSetPtrOutputWithContext(ctx context.Context) ReplicaSetPtrOutput {
	return o
}

func (o ReplicaSetPtrOutput) Elem() ReplicaSetOutput {
	return o.ApplyT(func(v *ReplicaSet) ReplicaSet {
		if v != nil {
			return *v
		}
		var ret ReplicaSet
		return ret
	}).(ReplicaSetOutput)
}

type ReplicaSetArrayOutput struct{ *pulumi.OutputState }

func (ReplicaSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ReplicaSet)(nil))
}

func (o ReplicaSetArrayOutput) ToReplicaSetArrayOutput() ReplicaSetArrayOutput {
	return o
}

func (o ReplicaSetArrayOutput) ToReplicaSetArrayOutputWithContext(ctx context.Context) ReplicaSetArrayOutput {
	return o
}

func (o ReplicaSetArrayOutput) Index(i pulumi.IntInput) ReplicaSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ReplicaSet {
		return vs[0].([]ReplicaSet)[vs[1].(int)]
	}).(ReplicaSetOutput)
}

type ReplicaSetMapOutput struct{ *pulumi.OutputState }

func (ReplicaSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ReplicaSet)(nil))
}

func (o ReplicaSetMapOutput) ToReplicaSetMapOutput() ReplicaSetMapOutput {
	return o
}

func (o ReplicaSetMapOutput) ToReplicaSetMapOutputWithContext(ctx context.Context) ReplicaSetMapOutput {
	return o
}

func (o ReplicaSetMapOutput) MapIndex(k pulumi.StringInput) ReplicaSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ReplicaSet {
		return vs[0].(map[string]ReplicaSet)[vs[1].(string)]
	}).(ReplicaSetOutput)
}

func init() {
	pulumi.RegisterOutputType(ReplicaSetOutput{})
	pulumi.RegisterOutputType(ReplicaSetPtrOutput{})
	pulumi.RegisterOutputType(ReplicaSetArrayOutput{})
	pulumi.RegisterOutputType(ReplicaSetMapOutput{})
}
