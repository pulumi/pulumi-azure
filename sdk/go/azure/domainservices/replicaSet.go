// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domainservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Replica Set for an Active Directory Domain Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	core/resourceGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/core/resourceGroup"
//	domainservices/replicaSet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/domainservices/replicaSet"
//	domainservices/service "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/domainservices/service"
//	network/networkSecurityGroup "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/networkSecurityGroup"
//	network/subnet "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnet"
//	network/subnetNetworkSecurityGroupAssociation "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/subnetNetworkSecurityGroupAssociation"
//	network/virtualNetwork "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetwork"
//	network/virtualNetworkDnsServers "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetworkDnsServers"
//	network/virtualNetworkPeering "github.com/pulumi/pulumi-azure/sdk/v1/go/azure/network/virtualNetworkPeering"
//	index/group "github.com/pulumi/pulumi-azuread/sdk/v1/go/azuread/index/group"
//	index/groupMember "github.com/pulumi/pulumi-azuread/sdk/v1/go/azuread/index/groupMember"
//	index/servicePrincipal "github.com/pulumi/pulumi-azuread/sdk/v1/go/azuread/index/servicePrincipal"
//	index/user "github.com/pulumi/pulumi-azuread/sdk/v1/go/azuread/index/user"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// primary, err := core/resourceGroup.NewResourceGroup(ctx, "primary", &core/resourceGroup.ResourceGroupArgs{
// Name: "aadds-primary-rg",
// Location: "West Europe",
// })
// if err != nil {
// return err
// }
// primaryVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "primary", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "aadds-primary-vnet",
// Location: primary.Location,
// ResourceGroupName: primary.Name,
// AddressSpaces: []string{
// "10.0.1.0/16",
// },
// })
// if err != nil {
// return err
// }
// primarySubnet, err := network/subnet.NewSubnet(ctx, "primary", &network/subnet.SubnetArgs{
// Name: "aadds-primary-subnet",
// ResourceGroupName: primary.Name,
// VirtualNetworkName: primaryVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.0.1.0/24",
// },
// })
// if err != nil {
// return err
// }
// primaryNetworkSecurityGroup, err := network/networkSecurityGroup.NewNetworkSecurityGroup(ctx, "primary", &network/networkSecurityGroup.NetworkSecurityGroupArgs{
// Name: "aadds-primary-nsg",
// Location: primary.Location,
// ResourceGroupName: primary.Name,
// SecurityRules: []interface{}{
// map[string]interface{}{
// "name": "AllowSyncWithAzureAD",
// "priority": 101,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "443",
// "sourceAddressPrefix": "AzureActiveDirectoryDomainServices",
// "destinationAddressPrefix": "*",
// },
// map[string]interface{}{
// "name": "AllowRD",
// "priority": 201,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "3389",
// "sourceAddressPrefix": "CorpNetSaw",
// "destinationAddressPrefix": "*",
// },
// map[string]interface{}{
// "name": "AllowPSRemoting",
// "priority": 301,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "5986",
// "sourceAddressPrefix": "AzureActiveDirectoryDomainServices",
// "destinationAddressPrefix": "*",
// },
// map[string]interface{}{
// "name": "AllowLDAPS",
// "priority": 401,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "636",
// "sourceAddressPrefix": "*",
// "destinationAddressPrefix": "*",
// },
// },
// })
// if err != nil {
// return err
// }
// _, err = network/subnetNetworkSecurityGroupAssociation.NewSubnetNetworkSecurityGroupAssociation(ctx, "primary", &network/subnetNetworkSecurityGroupAssociation.SubnetNetworkSecurityGroupAssociationArgs{
// SubnetId: primarySubnet.Id,
// NetworkSecurityGroupId: primaryNetworkSecurityGroup.Id,
// })
// if err != nil {
// return err
// }
// dcAdmins, err := azuread.NewGroup(ctx, "dc_admins", &azuread.GroupArgs{
// DisplayName: "aad-dc-administrators",
// SecurityEnabled: true,
// })
// if err != nil {
// return err
// }
// admin, err := azuread.NewUser(ctx, "admin", &azuread.UserArgs{
// UserPrincipalName: "dc-admin@hashicorp-example.net",
// DisplayName: "DC Administrator",
// Password: "Pa55w0Rd!!1",
// })
// if err != nil {
// return err
// }
// _, err = azuread.NewGroupMember(ctx, "admin", &azuread.GroupMemberArgs{
// GroupObjectId: dcAdmins.ObjectId,
// MemberObjectId: admin.ObjectId,
// })
// if err != nil {
// return err
// }
// _, err = azuread.NewServicePrincipal(ctx, "example", &azuread.ServicePrincipalArgs{
// ApplicationId: "2565bd9d-da50-47d4-8b85-4c97f669dc36",
// })
// if err != nil {
// return err
// }
// aadds, err := core/resourceGroup.NewResourceGroup(ctx, "aadds", &core/resourceGroup.ResourceGroupArgs{
// Name: "aadds-rg",
// Location: "westeurope",
// })
// if err != nil {
// return err
// }
// exampleService, err := domainservices/service.NewService(ctx, "example", &domainservices/service.ServiceArgs{
// Name: "example-aadds",
// Location: aadds.Location,
// ResourceGroupName: aadds.Name,
// DomainName: "widgetslogin.net",
// Sku: "Enterprise",
// FilteredSyncEnabled: false,
// InitialReplicaSet: map[string]interface{}{
// "location": primaryVirtualNetwork.Location,
// "subnetId": primarySubnet.Id,
// },
// Notifications: map[string]interface{}{
// "additionalRecipients": []string{
// "notifyA@example.net",
// "notifyB@example.org",
// },
// "notifyDcAdmins": true,
// "notifyGlobalAdmins": true,
// },
// Security: map[string]interface{}{
// "syncKerberosPasswords": true,
// "syncNtlmPasswords": true,
// "syncOnPremPasswords": true,
// },
// Tags: map[string]interface{}{
// "Environment": "prod",
// },
// })
// if err != nil {
// return err
// }
// replica, err := core/resourceGroup.NewResourceGroup(ctx, "replica", &core/resourceGroup.ResourceGroupArgs{
// Name: "aadds-replica-rg",
// Location: "North Europe",
// })
// if err != nil {
// return err
// }
// replicaVirtualNetwork, err := network/virtualNetwork.NewVirtualNetwork(ctx, "replica", &network/virtualNetwork.VirtualNetworkArgs{
// Name: "aadds-replica-vnet",
// Location: replica.Location,
// ResourceGroupName: replica.Name,
// AddressSpaces: []string{
// "10.20.0.0/16",
// },
// })
// if err != nil {
// return err
// }
// aaddsReplica, err := network/subnet.NewSubnet(ctx, "aadds_replica", &network/subnet.SubnetArgs{
// Name: "aadds-replica-subnet",
// ResourceGroupName: replica.Name,
// VirtualNetworkName: replicaVirtualNetwork.Name,
// AddressPrefixes: []string{
// "10.20.0.0/24",
// },
// })
// if err != nil {
// return err
// }
// aaddsReplicaNetworkSecurityGroup, err := network/networkSecurityGroup.NewNetworkSecurityGroup(ctx, "aadds_replica", &network/networkSecurityGroup.NetworkSecurityGroupArgs{
// Name: "aadds-replica-nsg",
// Location: replica.Location,
// ResourceGroupName: replica.Name,
// SecurityRules: []interface{}{
// map[string]interface{}{
// "name": "AllowSyncWithAzureAD",
// "priority": 101,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "443",
// "sourceAddressPrefix": "AzureActiveDirectoryDomainServices",
// "destinationAddressPrefix": "*",
// },
// map[string]interface{}{
// "name": "AllowRD",
// "priority": 201,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "3389",
// "sourceAddressPrefix": "CorpNetSaw",
// "destinationAddressPrefix": "*",
// },
// map[string]interface{}{
// "name": "AllowPSRemoting",
// "priority": 301,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "5986",
// "sourceAddressPrefix": "AzureActiveDirectoryDomainServices",
// "destinationAddressPrefix": "*",
// },
// map[string]interface{}{
// "name": "AllowLDAPS",
// "priority": 401,
// "direction": "Inbound",
// "access": "Allow",
// "protocol": "Tcp",
// "sourcePortRange": "*",
// "destinationPortRange": "636",
// "sourceAddressPrefix": "*",
// "destinationAddressPrefix": "*",
// },
// },
// })
// if err != nil {
// return err
// }
// _, err = network/subnetNetworkSecurityGroupAssociation.NewSubnetNetworkSecurityGroupAssociation(ctx, "replica", &network/subnetNetworkSecurityGroupAssociation.SubnetNetworkSecurityGroupAssociationArgs{
// SubnetId: aaddsReplica.Id,
// NetworkSecurityGroupId: aaddsReplicaNetworkSecurityGroup.Id,
// })
// if err != nil {
// return err
// }
// _, err = network/virtualNetworkPeering.NewVirtualNetworkPeering(ctx, "primary_replica", &network/virtualNetworkPeering.VirtualNetworkPeeringArgs{
// Name: "aadds-primary-replica",
// ResourceGroupName: primaryVirtualNetwork.ResourceGroupName,
// VirtualNetworkName: primaryVirtualNetwork.Name,
// RemoteVirtualNetworkId: replicaVirtualNetwork.Id,
// AllowForwardedTraffic: true,
// AllowGatewayTransit: false,
// AllowVirtualNetworkAccess: true,
// UseRemoteGateways: false,
// })
// if err != nil {
// return err
// }
// _, err = network/virtualNetworkPeering.NewVirtualNetworkPeering(ctx, "replica_primary", &network/virtualNetworkPeering.VirtualNetworkPeeringArgs{
// Name: "aadds-replica-primary",
// ResourceGroupName: replicaVirtualNetwork.ResourceGroupName,
// VirtualNetworkName: replicaVirtualNetwork.Name,
// RemoteVirtualNetworkId: primaryVirtualNetwork.Id,
// AllowForwardedTraffic: true,
// AllowGatewayTransit: false,
// AllowVirtualNetworkAccess: true,
// UseRemoteGateways: false,
// })
// if err != nil {
// return err
// }
// _, err = network/virtualNetworkDnsServers.NewVirtualNetworkDnsServers(ctx, "replica", &network/virtualNetworkDnsServers.VirtualNetworkDnsServersArgs{
// VirtualNetworkId: replicaVirtualNetwork.Id,
// DnsServers: exampleService.InitialReplicaSet.DomainControllerIpAddresses,
// })
// if err != nil {
// return err
// }
// _, err = domainservices/replicaSet.NewReplicaSet(ctx, "replica", &domainservices/replicaSet.ReplicaSetArgs{
// DomainServiceId: exampleService.Id,
// Location: replica.Location,
// SubnetId: aaddsReplica.Id,
// })
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Domain Service Replica Sets can be imported using the resource ID of the parent Domain Service and the Replica Set ID, e.g.
//
// ```sh
// $ pulumi import azure:domainservices/replicaSet:ReplicaSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AAD/domainServices/instance1/replicaSets/00000000-0000-0000-0000-000000000000
// ```
type ReplicaSet struct {
	pulumi.CustomResourceState

	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses pulumi.StringArrayOutput `pulumi:"domainControllerIpAddresses"`
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringOutput `pulumi:"domainServiceId"`
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress pulumi.StringOutput `pulumi:"externalAccessIpAddress"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The current service status for the replica set.
	ServiceStatus pulumi.StringOutput `pulumi:"serviceStatus"`
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewReplicaSet registers a new resource with the given unique name, arguments, and options.
func NewReplicaSet(ctx *pulumi.Context,
	name string, args *ReplicaSetArgs, opts ...pulumi.ResourceOption) (*ReplicaSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainServiceId == nil {
		return nil, errors.New("invalid value for required argument 'DomainServiceId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReplicaSet
	err := ctx.RegisterResource("azure:domainservices/replicaSet:ReplicaSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicaSet gets an existing ReplicaSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicaSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicaSetState, opts ...pulumi.ResourceOption) (*ReplicaSet, error) {
	var resource ReplicaSet
	err := ctx.ReadResource("azure:domainservices/replicaSet:ReplicaSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicaSet resources.
type replicaSetState struct {
	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses []string `pulumi:"domainControllerIpAddresses"`
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId *string `pulumi:"domainServiceId"`
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress *string `pulumi:"externalAccessIpAddress"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The current service status for the replica set.
	ServiceStatus *string `pulumi:"serviceStatus"`
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
}

type ReplicaSetState struct {
	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses pulumi.StringArrayInput
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringPtrInput
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress pulumi.StringPtrInput
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The current service status for the replica set.
	ServiceStatus pulumi.StringPtrInput
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput
}

func (ReplicaSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSetState)(nil)).Elem()
}

type replicaSetArgs struct {
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId string `pulumi:"domainServiceId"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a ReplicaSet resource.
type ReplicaSetArgs struct {
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringInput
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId pulumi.StringInput
}

func (ReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSetArgs)(nil)).Elem()
}

type ReplicaSetInput interface {
	pulumi.Input

	ToReplicaSetOutput() ReplicaSetOutput
	ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput
}

func (*ReplicaSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSet)(nil)).Elem()
}

func (i *ReplicaSet) ToReplicaSetOutput() ReplicaSetOutput {
	return i.ToReplicaSetOutputWithContext(context.Background())
}

func (i *ReplicaSet) ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetOutput)
}

// ReplicaSetArrayInput is an input type that accepts ReplicaSetArray and ReplicaSetArrayOutput values.
// You can construct a concrete instance of `ReplicaSetArrayInput` via:
//
//	ReplicaSetArray{ ReplicaSetArgs{...} }
type ReplicaSetArrayInput interface {
	pulumi.Input

	ToReplicaSetArrayOutput() ReplicaSetArrayOutput
	ToReplicaSetArrayOutputWithContext(context.Context) ReplicaSetArrayOutput
}

type ReplicaSetArray []ReplicaSetInput

func (ReplicaSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaSet)(nil)).Elem()
}

func (i ReplicaSetArray) ToReplicaSetArrayOutput() ReplicaSetArrayOutput {
	return i.ToReplicaSetArrayOutputWithContext(context.Background())
}

func (i ReplicaSetArray) ToReplicaSetArrayOutputWithContext(ctx context.Context) ReplicaSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetArrayOutput)
}

// ReplicaSetMapInput is an input type that accepts ReplicaSetMap and ReplicaSetMapOutput values.
// You can construct a concrete instance of `ReplicaSetMapInput` via:
//
//	ReplicaSetMap{ "key": ReplicaSetArgs{...} }
type ReplicaSetMapInput interface {
	pulumi.Input

	ToReplicaSetMapOutput() ReplicaSetMapOutput
	ToReplicaSetMapOutputWithContext(context.Context) ReplicaSetMapOutput
}

type ReplicaSetMap map[string]ReplicaSetInput

func (ReplicaSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaSet)(nil)).Elem()
}

func (i ReplicaSetMap) ToReplicaSetMapOutput() ReplicaSetMapOutput {
	return i.ToReplicaSetMapOutputWithContext(context.Background())
}

func (i ReplicaSetMap) ToReplicaSetMapOutputWithContext(ctx context.Context) ReplicaSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetMapOutput)
}

type ReplicaSetOutput struct{ *pulumi.OutputState }

func (ReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSet)(nil)).Elem()
}

func (o ReplicaSetOutput) ToReplicaSetOutput() ReplicaSetOutput {
	return o
}

func (o ReplicaSetOutput) ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput {
	return o
}

// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
func (o ReplicaSetOutput) DomainControllerIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringArrayOutput { return v.DomainControllerIpAddresses }).(pulumi.StringArrayOutput)
}

// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
func (o ReplicaSetOutput) DomainServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.DomainServiceId }).(pulumi.StringOutput)
}

// The publicly routable IP address for the domain controllers in this Replica Set.
func (o ReplicaSetOutput) ExternalAccessIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.ExternalAccessIpAddress }).(pulumi.StringOutput)
}

// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
func (o ReplicaSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The current service status for the replica set.
func (o ReplicaSetOutput) ServiceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.ServiceStatus }).(pulumi.StringOutput)
}

// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
func (o ReplicaSetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type ReplicaSetArrayOutput struct{ *pulumi.OutputState }

func (ReplicaSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaSet)(nil)).Elem()
}

func (o ReplicaSetArrayOutput) ToReplicaSetArrayOutput() ReplicaSetArrayOutput {
	return o
}

func (o ReplicaSetArrayOutput) ToReplicaSetArrayOutputWithContext(ctx context.Context) ReplicaSetArrayOutput {
	return o
}

func (o ReplicaSetArrayOutput) Index(i pulumi.IntInput) ReplicaSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplicaSet {
		return vs[0].([]*ReplicaSet)[vs[1].(int)]
	}).(ReplicaSetOutput)
}

type ReplicaSetMapOutput struct{ *pulumi.OutputState }

func (ReplicaSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaSet)(nil)).Elem()
}

func (o ReplicaSetMapOutput) ToReplicaSetMapOutput() ReplicaSetMapOutput {
	return o
}

func (o ReplicaSetMapOutput) ToReplicaSetMapOutputWithContext(ctx context.Context) ReplicaSetMapOutput {
	return o
}

func (o ReplicaSetMapOutput) MapIndex(k pulumi.StringInput) ReplicaSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplicaSet {
		return vs[0].(map[string]*ReplicaSet)[vs[1].(string)]
	}).(ReplicaSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetInput)(nil)).Elem(), &ReplicaSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetArrayInput)(nil)).Elem(), ReplicaSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetMapInput)(nil)).Elem(), ReplicaSetMap{})
	pulumi.RegisterOutputType(ReplicaSetOutput{})
	pulumi.RegisterOutputType(ReplicaSetArrayOutput{})
	pulumi.RegisterOutputType(ReplicaSetMapOutput{})
}
