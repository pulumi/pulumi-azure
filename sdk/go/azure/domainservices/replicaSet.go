// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package domainservices

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Replica Set for an Active Directory Domain Service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/core"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/domainservices"
//	"github.com/pulumi/pulumi-azure/sdk/v5/go/azure/network"
//	"github.com/pulumi/pulumi-azuread/sdk/v5/go/azuread"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// primaryResourceGroup, err := core.NewResourceGroup(ctx, "primaryResourceGroup", &core.ResourceGroupArgs{
// Location: pulumi.String("West Europe"),
// })
// if err != nil {
// return err
// }
// primaryVirtualNetwork, err := network.NewVirtualNetwork(ctx, "primaryVirtualNetwork", &network.VirtualNetworkArgs{
// Location: primaryResourceGroup.Location,
// ResourceGroupName: primaryResourceGroup.Name,
// AddressSpaces: pulumi.StringArray{
// pulumi.String("10.0.1.0/16"),
// },
// })
// if err != nil {
// return err
// }
// primarySubnet, err := network.NewSubnet(ctx, "primarySubnet", &network.SubnetArgs{
// ResourceGroupName: primaryResourceGroup.Name,
// VirtualNetworkName: primaryVirtualNetwork.Name,
// AddressPrefixes: pulumi.StringArray{
// pulumi.String("10.0.1.0/24"),
// },
// })
// if err != nil {
// return err
// }
// primaryNetworkSecurityGroup, err := network.NewNetworkSecurityGroup(ctx, "primaryNetworkSecurityGroup", &network.NetworkSecurityGroupArgs{
// Location: primaryResourceGroup.Location,
// ResourceGroupName: primaryResourceGroup.Name,
// SecurityRules: network.NetworkSecurityGroupSecurityRuleArray{
// &network.NetworkSecurityGroupSecurityRuleArgs{
// Name: pulumi.String("AllowSyncWithAzureAD"),
// Priority: pulumi.Int(101),
// Direction: pulumi.String("Inbound"),
// Access: pulumi.String("Allow"),
// Protocol: pulumi.String("Tcp"),
// SourcePortRange: pulumi.String("*"),
// DestinationPortRange: pulumi.String("443"),
// SourceAddressPrefix: pulumi.String("AzureActiveDirectoryDomainServices"),
// DestinationAddressPrefix: pulumi.String("*"),
// },
// &network.NetworkSecurityGroupSecurityRuleArgs{
// Name: pulumi.String("AllowRD"),
// Priority: pulumi.Int(201),
// Direction: pulumi.String("Inbound"),
// Access: pulumi.String("Allow"),
// Protocol: pulumi.String("Tcp"),
// SourcePortRange: pulumi.String("*"),
// DestinationPortRange: pulumi.String("3389"),
// SourceAddressPrefix: pulumi.String("CorpNetSaw"),
// DestinationAddressPrefix: pulumi.String("*"),
// },
// &network.NetworkSecurityGroupSecurityRuleArgs{
// Name: pulumi.String("AllowPSRemoting"),
// Priority: pulumi.Int(301),
// Direction: pulumi.String("Inbound"),
// Access: pulumi.String("Allow"),
// Protocol: pulumi.String("Tcp"),
// SourcePortRange: pulumi.String("*"),
// DestinationPortRange: pulumi.String("5986"),
// SourceAddressPrefix: pulumi.String("AzureActiveDirectoryDomainServices"),
// DestinationAddressPrefix: pulumi.String("*"),
// },
// &network.NetworkSecurityGroupSecurityRuleArgs{
// Name: pulumi.String("AllowLDAPS"),
// Priority: pulumi.Int(401),
// Direction: pulumi.String("Inbound"),
// Access: pulumi.String("Allow"),
// Protocol: pulumi.String("Tcp"),
// SourcePortRange: pulumi.String("*"),
// DestinationPortRange: pulumi.String("636"),
// SourceAddressPrefix: pulumi.String("*"),
// DestinationAddressPrefix: pulumi.String("*"),
// },
// },
// })
// if err != nil {
// return err
// }
// primarySubnetNetworkSecurityGroupAssociation, err := network.NewSubnetNetworkSecurityGroupAssociation(ctx, "primarySubnetNetworkSecurityGroupAssociation", &network.SubnetNetworkSecurityGroupAssociationArgs{
// SubnetId: primarySubnet.ID(),
// NetworkSecurityGroupId: primaryNetworkSecurityGroup.ID(),
// })
// if err != nil {
// return err
// }
// dcAdmins, err := azuread.NewGroup(ctx, "dcAdmins", &azuread.GroupArgs{
// DisplayName: pulumi.String("aad-dc-administrators"),
// SecurityEnabled: pulumi.Bool(true),
// })
// if err != nil {
// return err
// }
// adminUser, err := azuread.NewUser(ctx, "adminUser", &azuread.UserArgs{
// UserPrincipalName: pulumi.String("dc-admin@hashicorp-example.net"),
// DisplayName: pulumi.String("DC Administrator"),
// Password: pulumi.String("Pa55w0Rd!!1"),
// })
// if err != nil {
// return err
// }
// _, err = azuread.NewGroupMember(ctx, "adminGroupMember", &azuread.GroupMemberArgs{
// GroupObjectId: dcAdmins.ObjectId,
// MemberObjectId: adminUser.ObjectId,
// })
// if err != nil {
// return err
// }
// exampleServicePrincipal, err := azuread.NewServicePrincipal(ctx, "exampleServicePrincipal", &azuread.ServicePrincipalArgs{
// ApplicationId: pulumi.String("2565bd9d-da50-47d4-8b85-4c97f669dc36"),
// })
// if err != nil {
// return err
// }
// aadds, err := core.NewResourceGroup(ctx, "aadds", &core.ResourceGroupArgs{
// Location: pulumi.String("westeurope"),
// })
// if err != nil {
// return err
// }
// exampleService, err := domainservices.NewService(ctx, "exampleService", &domainservices.ServiceArgs{
// Location: aadds.Location,
// ResourceGroupName: aadds.Name,
// DomainName: pulumi.String("widgetslogin.net"),
// Sku: pulumi.String("Enterprise"),
// FilteredSyncEnabled: pulumi.Bool(false),
// InitialReplicaSet: &domainservices.ServiceInitialReplicaSetArgs{
// Location: primaryVirtualNetwork.Location,
// SubnetId: primarySubnet.ID(),
// },
// Notifications: &domainservices.ServiceNotificationsArgs{
// AdditionalRecipients: pulumi.StringArray{
// pulumi.String("notifyA@example.net"),
// pulumi.String("notifyB@example.org"),
// },
// NotifyDcAdmins: pulumi.Bool(true),
// NotifyGlobalAdmins: pulumi.Bool(true),
// },
// Security: &domainservices.ServiceSecurityArgs{
// SyncKerberosPasswords: pulumi.Bool(true),
// SyncNtlmPasswords: pulumi.Bool(true),
// SyncOnPremPasswords: pulumi.Bool(true),
// },
// Tags: pulumi.StringMap{
// "Environment": pulumi.String("prod"),
// },
// }, pulumi.DependsOn([]pulumi.Resource{
// exampleServicePrincipal,
// primarySubnetNetworkSecurityGroupAssociation,
// }))
// if err != nil {
// return err
// }
// replicaResourceGroup, err := core.NewResourceGroup(ctx, "replicaResourceGroup", &core.ResourceGroupArgs{
// Location: pulumi.String("North Europe"),
// })
// if err != nil {
// return err
// }
// replicaVirtualNetwork, err := network.NewVirtualNetwork(ctx, "replicaVirtualNetwork", &network.VirtualNetworkArgs{
// Location: replicaResourceGroup.Location,
// ResourceGroupName: replicaResourceGroup.Name,
// AddressSpaces: pulumi.StringArray{
// pulumi.String("10.20.0.0/16"),
// },
// })
// if err != nil {
// return err
// }
// aaddsReplicaSubnet, err := network.NewSubnet(ctx, "aaddsReplicaSubnet", &network.SubnetArgs{
// ResourceGroupName: replicaResourceGroup.Name,
// VirtualNetworkName: replicaVirtualNetwork.Name,
// AddressPrefixes: pulumi.StringArray{
// pulumi.String("10.20.0.0/24"),
// },
// })
// if err != nil {
// return err
// }
// aaddsReplicaNetworkSecurityGroup, err := network.NewNetworkSecurityGroup(ctx, "aaddsReplicaNetworkSecurityGroup", &network.NetworkSecurityGroupArgs{
// Location: replicaResourceGroup.Location,
// ResourceGroupName: replicaResourceGroup.Name,
// SecurityRules: network.NetworkSecurityGroupSecurityRuleArray{
// &network.NetworkSecurityGroupSecurityRuleArgs{
// Name: pulumi.String("AllowSyncWithAzureAD"),
// Priority: pulumi.Int(101),
// Direction: pulumi.String("Inbound"),
// Access: pulumi.String("Allow"),
// Protocol: pulumi.String("Tcp"),
// SourcePortRange: pulumi.String("*"),
// DestinationPortRange: pulumi.String("443"),
// SourceAddressPrefix: pulumi.String("AzureActiveDirectoryDomainServices"),
// DestinationAddressPrefix: pulumi.String("*"),
// },
// &network.NetworkSecurityGroupSecurityRuleArgs{
// Name: pulumi.String("AllowRD"),
// Priority: pulumi.Int(201),
// Direction: pulumi.String("Inbound"),
// Access: pulumi.String("Allow"),
// Protocol: pulumi.String("Tcp"),
// SourcePortRange: pulumi.String("*"),
// DestinationPortRange: pulumi.String("3389"),
// SourceAddressPrefix: pulumi.String("CorpNetSaw"),
// DestinationAddressPrefix: pulumi.String("*"),
// },
// &network.NetworkSecurityGroupSecurityRuleArgs{
// Name: pulumi.String("AllowPSRemoting"),
// Priority: pulumi.Int(301),
// Direction: pulumi.String("Inbound"),
// Access: pulumi.String("Allow"),
// Protocol: pulumi.String("Tcp"),
// SourcePortRange: pulumi.String("*"),
// DestinationPortRange: pulumi.String("5986"),
// SourceAddressPrefix: pulumi.String("AzureActiveDirectoryDomainServices"),
// DestinationAddressPrefix: pulumi.String("*"),
// },
// &network.NetworkSecurityGroupSecurityRuleArgs{
// Name: pulumi.String("AllowLDAPS"),
// Priority: pulumi.Int(401),
// Direction: pulumi.String("Inbound"),
// Access: pulumi.String("Allow"),
// Protocol: pulumi.String("Tcp"),
// SourcePortRange: pulumi.String("*"),
// DestinationPortRange: pulumi.String("636"),
// SourceAddressPrefix: pulumi.String("*"),
// DestinationAddressPrefix: pulumi.String("*"),
// },
// },
// })
// if err != nil {
// return err
// }
// replicaSubnetNetworkSecurityGroupAssociation, err := network.NewSubnetNetworkSecurityGroupAssociation(ctx, "replicaSubnetNetworkSecurityGroupAssociation", &network.SubnetNetworkSecurityGroupAssociationArgs{
// SubnetId: aaddsReplicaSubnet.ID(),
// NetworkSecurityGroupId: aaddsReplicaNetworkSecurityGroup.ID(),
// })
// if err != nil {
// return err
// }
// primaryReplica, err := network.NewVirtualNetworkPeering(ctx, "primaryReplica", &network.VirtualNetworkPeeringArgs{
// ResourceGroupName: primaryVirtualNetwork.ResourceGroupName,
// VirtualNetworkName: primaryVirtualNetwork.Name,
// RemoteVirtualNetworkId: replicaVirtualNetwork.ID(),
// AllowForwardedTraffic: pulumi.Bool(true),
// AllowGatewayTransit: pulumi.Bool(false),
// AllowVirtualNetworkAccess: pulumi.Bool(true),
// UseRemoteGateways: pulumi.Bool(false),
// })
// if err != nil {
// return err
// }
// replicaPrimary, err := network.NewVirtualNetworkPeering(ctx, "replicaPrimary", &network.VirtualNetworkPeeringArgs{
// ResourceGroupName: replicaVirtualNetwork.ResourceGroupName,
// VirtualNetworkName: replicaVirtualNetwork.Name,
// RemoteVirtualNetworkId: primaryVirtualNetwork.ID(),
// AllowForwardedTraffic: pulumi.Bool(true),
// AllowGatewayTransit: pulumi.Bool(false),
// AllowVirtualNetworkAccess: pulumi.Bool(true),
// UseRemoteGateways: pulumi.Bool(false),
// })
// if err != nil {
// return err
// }
// _, err = network.NewVirtualNetworkDnsServers(ctx, "replicaVirtualNetworkDnsServers", &network.VirtualNetworkDnsServersArgs{
// VirtualNetworkId: replicaVirtualNetwork.ID(),
// DnsServers: exampleService.InitialReplicaSet.ApplyT(func(initialReplicaSet domainservices.ServiceInitialReplicaSet) (interface{}, error) {
// return initialReplicaSet.DomainControllerIpAddresses, nil
// }).(pulumi.Interface{}Output),
// })
// if err != nil {
// return err
// }
// _, err = domainservices.NewReplicaSet(ctx, "replicaReplicaSet", &domainservices.ReplicaSetArgs{
// DomainServiceId: exampleService.ID(),
// Location: replicaResourceGroup.Location,
// SubnetId: aaddsReplicaSubnet.ID(),
// }, pulumi.DependsOn([]pulumi.Resource{
// replicaSubnetNetworkSecurityGroupAssociation,
// primaryReplica,
// replicaPrimary,
// }))
// if err != nil {
// return err
// }
// return nil
// })
// }
// ```
//
// ## Import
//
// Domain Service Replica Sets can be imported using the resource ID of the parent Domain Service and the Replica Set ID, e.g.
//
// ```sh
//
//	$ pulumi import azure:domainservices/replicaSet:ReplicaSet example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/mygroup1/providers/Microsoft.AAD/domainServices/instance1/replicaSets/00000000-0000-0000-0000-000000000000
//
// ```
type ReplicaSet struct {
	pulumi.CustomResourceState

	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses pulumi.StringArrayOutput `pulumi:"domainControllerIpAddresses"`
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringOutput `pulumi:"domainServiceId"`
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress pulumi.StringOutput `pulumi:"externalAccessIpAddress"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringOutput `pulumi:"location"`
	// The current service status for the replica set.
	ServiceStatus pulumi.StringOutput `pulumi:"serviceStatus"`
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewReplicaSet registers a new resource with the given unique name, arguments, and options.
func NewReplicaSet(ctx *pulumi.Context,
	name string, args *ReplicaSetArgs, opts ...pulumi.ResourceOption) (*ReplicaSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainServiceId == nil {
		return nil, errors.New("invalid value for required argument 'DomainServiceId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReplicaSet
	err := ctx.RegisterResource("azure:domainservices/replicaSet:ReplicaSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReplicaSet gets an existing ReplicaSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReplicaSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReplicaSetState, opts ...pulumi.ResourceOption) (*ReplicaSet, error) {
	var resource ReplicaSet
	err := ctx.ReadResource("azure:domainservices/replicaSet:ReplicaSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReplicaSet resources.
type replicaSetState struct {
	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses []string `pulumi:"domainControllerIpAddresses"`
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId *string `pulumi:"domainServiceId"`
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress *string `pulumi:"externalAccessIpAddress"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The current service status for the replica set.
	ServiceStatus *string `pulumi:"serviceStatus"`
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId *string `pulumi:"subnetId"`
}

type ReplicaSetState struct {
	// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
	DomainControllerIpAddresses pulumi.StringArrayInput
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringPtrInput
	// The publicly routable IP address for the domain controllers in this Replica Set.
	ExternalAccessIpAddress pulumi.StringPtrInput
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The current service status for the replica set.
	ServiceStatus pulumi.StringPtrInput
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId pulumi.StringPtrInput
}

func (ReplicaSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSetState)(nil)).Elem()
}

type replicaSetArgs struct {
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId string `pulumi:"domainServiceId"`
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location *string `pulumi:"location"`
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a ReplicaSet resource.
type ReplicaSetArgs struct {
	// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
	DomainServiceId pulumi.StringInput
	// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
	Location pulumi.StringPtrInput
	// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
	SubnetId pulumi.StringInput
}

func (ReplicaSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*replicaSetArgs)(nil)).Elem()
}

type ReplicaSetInput interface {
	pulumi.Input

	ToReplicaSetOutput() ReplicaSetOutput
	ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput
}

func (*ReplicaSet) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSet)(nil)).Elem()
}

func (i *ReplicaSet) ToReplicaSetOutput() ReplicaSetOutput {
	return i.ToReplicaSetOutputWithContext(context.Background())
}

func (i *ReplicaSet) ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetOutput)
}

// ReplicaSetArrayInput is an input type that accepts ReplicaSetArray and ReplicaSetArrayOutput values.
// You can construct a concrete instance of `ReplicaSetArrayInput` via:
//
//	ReplicaSetArray{ ReplicaSetArgs{...} }
type ReplicaSetArrayInput interface {
	pulumi.Input

	ToReplicaSetArrayOutput() ReplicaSetArrayOutput
	ToReplicaSetArrayOutputWithContext(context.Context) ReplicaSetArrayOutput
}

type ReplicaSetArray []ReplicaSetInput

func (ReplicaSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaSet)(nil)).Elem()
}

func (i ReplicaSetArray) ToReplicaSetArrayOutput() ReplicaSetArrayOutput {
	return i.ToReplicaSetArrayOutputWithContext(context.Background())
}

func (i ReplicaSetArray) ToReplicaSetArrayOutputWithContext(ctx context.Context) ReplicaSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetArrayOutput)
}

// ReplicaSetMapInput is an input type that accepts ReplicaSetMap and ReplicaSetMapOutput values.
// You can construct a concrete instance of `ReplicaSetMapInput` via:
//
//	ReplicaSetMap{ "key": ReplicaSetArgs{...} }
type ReplicaSetMapInput interface {
	pulumi.Input

	ToReplicaSetMapOutput() ReplicaSetMapOutput
	ToReplicaSetMapOutputWithContext(context.Context) ReplicaSetMapOutput
}

type ReplicaSetMap map[string]ReplicaSetInput

func (ReplicaSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaSet)(nil)).Elem()
}

func (i ReplicaSetMap) ToReplicaSetMapOutput() ReplicaSetMapOutput {
	return i.ToReplicaSetMapOutputWithContext(context.Background())
}

func (i ReplicaSetMap) ToReplicaSetMapOutputWithContext(ctx context.Context) ReplicaSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReplicaSetMapOutput)
}

type ReplicaSetOutput struct{ *pulumi.OutputState }

func (ReplicaSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReplicaSet)(nil)).Elem()
}

func (o ReplicaSetOutput) ToReplicaSetOutput() ReplicaSetOutput {
	return o
}

func (o ReplicaSetOutput) ToReplicaSetOutputWithContext(ctx context.Context) ReplicaSetOutput {
	return o
}

// A list of subnet IP addresses for the domain controllers in this Replica Set, typically two.
func (o ReplicaSetOutput) DomainControllerIpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringArrayOutput { return v.DomainControllerIpAddresses }).(pulumi.StringArrayOutput)
}

// The ID of the Domain Service for which to create this Replica Set. Changing this forces a new resource to be created.
func (o ReplicaSetOutput) DomainServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.DomainServiceId }).(pulumi.StringOutput)
}

// The publicly routable IP address for the domain controllers in this Replica Set.
func (o ReplicaSetOutput) ExternalAccessIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.ExternalAccessIpAddress }).(pulumi.StringOutput)
}

// The Azure location where this Replica Set should exist. Changing this forces a new resource to be created.
func (o ReplicaSetOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.Location }).(pulumi.StringOutput)
}

// The current service status for the replica set.
func (o ReplicaSetOutput) ServiceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.ServiceStatus }).(pulumi.StringOutput)
}

// The ID of the subnet in which to place this Replica Set. Changing this forces a new resource to be created.
func (o ReplicaSetOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *ReplicaSet) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type ReplicaSetArrayOutput struct{ *pulumi.OutputState }

func (ReplicaSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReplicaSet)(nil)).Elem()
}

func (o ReplicaSetArrayOutput) ToReplicaSetArrayOutput() ReplicaSetArrayOutput {
	return o
}

func (o ReplicaSetArrayOutput) ToReplicaSetArrayOutputWithContext(ctx context.Context) ReplicaSetArrayOutput {
	return o
}

func (o ReplicaSetArrayOutput) Index(i pulumi.IntInput) ReplicaSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReplicaSet {
		return vs[0].([]*ReplicaSet)[vs[1].(int)]
	}).(ReplicaSetOutput)
}

type ReplicaSetMapOutput struct{ *pulumi.OutputState }

func (ReplicaSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReplicaSet)(nil)).Elem()
}

func (o ReplicaSetMapOutput) ToReplicaSetMapOutput() ReplicaSetMapOutput {
	return o
}

func (o ReplicaSetMapOutput) ToReplicaSetMapOutputWithContext(ctx context.Context) ReplicaSetMapOutput {
	return o
}

func (o ReplicaSetMapOutput) MapIndex(k pulumi.StringInput) ReplicaSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReplicaSet {
		return vs[0].(map[string]*ReplicaSet)[vs[1].(string)]
	}).(ReplicaSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetInput)(nil)).Elem(), &ReplicaSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetArrayInput)(nil)).Elem(), ReplicaSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReplicaSetMapInput)(nil)).Elem(), ReplicaSetMap{})
	pulumi.RegisterOutputType(ReplicaSetOutput{})
	pulumi.RegisterOutputType(ReplicaSetArrayOutput{})
	pulumi.RegisterOutputType(ReplicaSetMapOutput{})
}
